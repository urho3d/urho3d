// Script API header intended to be 'force included' in IDE for AngelScript content assist / code completion

#define int8 signed char
#define int16 signed short
#define int64 long
#define uint unsigned
#define uint8 unsigned char
#define uint16 unsigned short
#define uint64 unsigned long
#define null 0
#define in
#define out
#define inout
#define is ==
#define interface struct
#define class struct
#define cast reinterpret_cast
#define mixin
#define funcdef
#define protected
#define private

// Classes

class AllocatorBlock
{
public:
~AllocatorBlock();
AllocatorBlock();
// Methods:
AllocatorBlock&  operator=(const AllocatorBlock&);

// Properties:
uint capacity;
uint nodeSize;
};

class AllocatorNode
{
public:
~AllocatorNode();
AllocatorNode();
// Methods:
AllocatorNode&  operator=(const AllocatorNode&);
};

class Animatable
{
public:
// Methods:
void AllocateNetworkState();
operator AnimatedModel() const;
operator AnimatedSprite2D() const;
operator AnimationController() const;
void ApplyAttributes();
operator BillboardSet() const;
operator BorderImage() const;
operator Button() const;
operator Camera() const;
operator CheckBox() const;
operator CollisionBox2D() const;
operator CollisionChain2D() const;
operator CollisionCircle2D() const;
operator CollisionEdge2D() const;
operator CollisionPolygon2D() const;
operator CollisionShape2D() const;
operator CollisionShape() const;
operator Component() const;
operator Constraint2D() const;
operator Constraint() const;
operator ConstraintDistance2D() const;
operator ConstraintFriction2D() const;
operator ConstraintGear2D() const;
operator ConstraintMotor2D() const;
operator ConstraintMouse2D() const;
operator ConstraintPrismatic2D() const;
operator ConstraintPulley2D() const;
operator ConstraintRevolute2D() const;
operator ConstraintRope2D() const;
operator ConstraintWeld2D() const;
operator ConstraintWheel2D() const;
operator CrowdAgent() const;
operator CrowdManager() const;
operator Cursor() const;
operator CustomGeometry() const;
operator DebugRenderer() const;
operator DecalSet() const;
operator Drawable2D() const;
operator Drawable() const;
operator DropDownList() const;
operator DynamicNavigationMesh() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
operator IKConstraint() const;
operator IKEffector() const;
operator IKSolver() const;
bool IsInstanceOf(StringHash) const;
bool IsTemporary() const;
operator Light() const;
operator LineEdit() const;
operator ListView() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
operator LogicComponent() const;
void MarkNetworkUpdate();
operator Menu() const;
operator NavArea() const;
operator Navigable() const;
operator NavigationMesh() const;
operator NetworkPriority() const;
operator Node() const;
operator Object() const;
operator Obstacle() const;
operator Octree() const;
operator OffMeshConnection() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
operator ParticleEmitter2D() const;
operator ParticleEmitter() const;
operator PhysicsWorld2D() const;
operator PhysicsWorld() const;
operator ProgressBar() const;
operator RaycastVehicle() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
operator Renderer2D() const;
void ResetToDefault();
operator RibbonTrail() const;
operator RigidBody2D() const;
operator RigidBody() const;
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
operator Scene() const;
operator ScriptInstance() const;
operator ScrollBar() const;
operator ScrollView() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
operator Skybox() const;
operator Slider() const;
operator SmoothedTransform() const;
operator SoundListener() const;
operator SoundSource3D() const;
operator SoundSource() const;
operator SplinePath() const;
operator Sprite() const;
operator StaticModel() const;
operator StaticModelGroup() const;
operator StaticSprite2D() const;
operator StretchableSprite2D() const;
const String& GetCategory() const;
const String& GetTypeName() const;
operator Terrain() const;
operator TerrainPatch() const;
operator Text3D() const;
operator Text() const;
operator TileMap2D() const;
operator TileMapLayer2D() const;
operator ToolTip() const;
operator UIComponent() const;
operator UIElement() const;
operator UISelectable() const;
operator UnknownComponent() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
operator View3D() const;
int WeakRefs() const;
operator Window() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator Zone() const;
operator const AnimatedModel() const;
operator const AnimatedSprite2D() const;
operator const AnimationController() const;
operator const BillboardSet() const;
operator const BorderImage() const;
operator const Button() const;
operator const Camera() const;
operator const CheckBox() const;
operator const CollisionBox2D() const;
operator const CollisionChain2D() const;
operator const CollisionCircle2D() const;
operator const CollisionEdge2D() const;
operator const CollisionPolygon2D() const;
operator const CollisionShape2D() const;
operator const CollisionShape() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Constraint() const;
operator const ConstraintDistance2D() const;
operator const ConstraintFriction2D() const;
operator const ConstraintGear2D() const;
operator const ConstraintMotor2D() const;
operator const ConstraintMouse2D() const;
operator const ConstraintPrismatic2D() const;
operator const ConstraintPulley2D() const;
operator const ConstraintRevolute2D() const;
operator const ConstraintRope2D() const;
operator const ConstraintWeld2D() const;
operator const ConstraintWheel2D() const;
operator const CrowdAgent() const;
operator const CrowdManager() const;
operator const Cursor() const;
operator const CustomGeometry() const;
operator const DebugRenderer() const;
operator const DecalSet() const;
operator const Drawable2D() const;
operator const Drawable() const;
operator const DropDownList() const;
operator const DynamicNavigationMesh() const;
operator const IKConstraint() const;
operator const IKEffector() const;
operator const IKSolver() const;
operator const Light() const;
operator const LineEdit() const;
operator const ListView() const;
operator const LogicComponent() const;
operator const Menu() const;
operator const NavArea() const;
operator const Navigable() const;
operator const NavigationMesh() const;
operator const NetworkPriority() const;
operator const Node() const;
operator const Object() const;
operator const Obstacle() const;
operator const Octree() const;
operator const OffMeshConnection() const;
operator const ParticleEmitter2D() const;
operator const ParticleEmitter() const;
operator const PhysicsWorld2D() const;
operator const PhysicsWorld() const;
operator const ProgressBar() const;
operator const RaycastVehicle() const;
operator const RefCounted() const;
operator const Renderer2D() const;
operator const RibbonTrail() const;
operator const RigidBody2D() const;
operator const RigidBody() const;
operator const Scene() const;
operator const ScriptInstance() const;
operator const ScrollBar() const;
operator const ScrollView() const;
operator const Serializable() const;
operator const Skybox() const;
operator const Slider() const;
operator const SmoothedTransform() const;
operator const SoundListener() const;
operator const SoundSource3D() const;
operator const SoundSource() const;
operator const SplinePath() const;
operator const Sprite() const;
operator const StaticModel() const;
operator const StaticModelGroup() const;
operator const StaticSprite2D() const;
operator const StretchableSprite2D() const;
operator const Terrain() const;
operator const TerrainPatch() const;
operator const Text3D() const;
operator const Text() const;
operator const TileMap2D() const;
operator const TileMapLayer2D() const;
operator const ToolTip() const;
operator const UIComponent() const;
operator const UIElement() const;
operator const UISelectable() const;
operator const UnknownComponent() const;
operator const View3D() const;
operator const Window() const;
operator const Zone() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class AnimatedModel
{
public:
AnimatedModel();
// Methods:
AnimationState AddAnimationState(Animation);
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAnimation();
void ApplyAttributes();
void ApplyMaterialList(const String& = String :: EMPTY);
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
float GetAnimationLodBias() const;
AnimationState GetAnimationState(Animation) const;
AnimationState GetAnimationState(StringHash) const;
AnimationState GetAnimationState(const String&) const;
AnimationState GetAnimationState(uint) const;
Array<AnimationState> GetAnimationStates() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial() const;
Material GetMaterial(uint) const;
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Model GetModel() const;
ResourceRef GetModelAttr() const;
Array<VertexBuffer> GetMorphVertexBuffers() const;
float GetMorphWeight(StringHash) const;
float GetMorphWeight(const String&) const;
float GetMorphWeight(uint) const;
Node GetNode() const;
uint GetNumAnimationStates() const;
uint GetNumAttributes() const;
uint GetNumGeometries() const;
uint GetNumMorphs() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
uint GetOcclusionLodLevel() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
Skeleton& GetSkeleton();
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
bool GetUpdateInvisible() const;
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInside(const Vector3&) const;
bool IsInsideLocal(const Vector3&) const;
bool IsInstanceOf(StringHash) const;
bool IsMaster() const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllAnimationStates();
void RemoveAnimationState(Animation);
void RemoveAnimationState(AnimationState);
void RemoveAnimationState(StringHash);
void RemoveAnimationState(const String&);
void RemoveAnimationState(uint);
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetMorphWeights();
void ResetToDefault();
const ResourceRefList& GetMaterialsAttr() const;
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationLodBias(float);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
bool SetMaterial(uint, Material);
void SetMaterialsAttr(const ResourceRefList&);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetModel(Model);
void SetModel(Model, bool = true);
void SetModelAttr(const ResourceRef&);
void SetMorphWeight(StringHash, float);
void SetMorphWeight(const String&, float);
void SetMorphWeight(uint, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOcclusionLodLevel(uint);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetUpdateInvisible(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
operator StaticModel() const;
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateBoneBoundingBox();
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const StaticModel() const;

// Properties:
bool animationEnabled;
float animationLodBias;
/* readonly */
Array<AnimationState> animationStates;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
Material material;
Array<Material> materials;
uint maxLights;
Model model;
/* readonly */
Array<String> morphNames;
Array<float> morphWeights;
/* readonly */
Node node;
/* readonly */
uint numAnimationStates;
/* readonly */
uint numAttributes;
/* readonly */
uint numGeometries;
/* readonly */
uint numMorphs;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
uint occlusionLodLevel;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
/* readonly */
Skeleton skeleton;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool updateInvisible;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class AnimatedSprite2D
{
public:
AnimatedSprite2D();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
const Color& GetColor() const;
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable2D() const;
operator Drawable() const;
float GetAlpha() const;
bool GetAnimationEnabled() const;
AnimationSet2D GetAnimationSet() const;
ResourceRef GetAnimationSetAttr() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
Material GetCustomMaterial() const;
ResourceRef GetCustomMaterialAttr() const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
bool GetFlipX() const;
bool GetFlipY() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayer() const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
LoopMode2D GetLoopMode() const;
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
int GetOrderInLayer() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
float GetSpeed() const;
Sprite2D GetSprite() const;
ResourceRef GetSpriteAttr() const;
Object GetSubsystem(StringHash) const;
bool GetSwapXY() const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
bool GetUseDrawRect() const;
bool GetUseHotSpot() const;
bool GetUseTextureRect() const;
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
const Rect& GetDrawRect() const;
const Rect& GetTextureRect() const;
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlpha(float);
void SetAnimation(const String&, LoopMode2D = LM_DEFAULT);
void SetAnimationAttr(const String&);
void SetAnimationEnabled(bool);
void SetAnimationSet(AnimationSet2D);
void SetAnimationSetAttr(const ResourceRef&);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetColor(const Color&);
void SetCustomMaterial(Material);
void SetCustomMaterialAttr(const ResourceRef&);
void SetDrawDistance(float);
void SetDrawRect(const Rect&);
void SetEnabled(bool);
void SetEntity(const String&);
void SetFlip(bool, bool, bool = false);
void SetFlipX(bool);
void SetFlipY(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetHotSpot(const Vector2&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLayer(int);
void SetLightMask(uint);
void SetLodBias(float);
void SetLoopMode(LoopMode2D);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOrderInLayer(int);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetSpeed(float);
void SetSprite(Sprite2D);
void SetSpriteAttr(const ResourceRef&);
void SetSwapXY(bool);
void SetTemporary(bool);
void SetTextureRect(const Rect&);
void SetUseDrawRect(bool);
void SetUseHotSpot(bool);
void SetUseTextureRect(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
operator StaticSprite2D() const;
const String& GetAnimation() const;
const String& GetCategory() const;
const String& GetEntity() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetHotSpot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable2D() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const StaticSprite2D() const;

// Properties:
float alpha;
String animation;
bool animationEnabled;
AnimationSet2D animationSet;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
Color color;
Material customMaterial;
float drawDistance;
Rect drawRect;
bool enabled;
/* readonly */
bool enabledEffective;
String entity;
bool flipX;
bool flipY;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
Vector2 hotSpot;
/* readonly */
uint id;
/* readonly */
bool inView;
int layer;
uint lightMask;
float lodBias;
LoopMode2D loopMode;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
int orderInLayer;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
float speed;
Sprite2D sprite;
bool swapXY;
bool temporary;
Rect textureRect;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDrawRect;
bool useHotSpot;
bool useTextureRect;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class Animation
{
public:
Animation();
// Methods:
void AddMetadata(const String&, const Variant&);
void AddTrigger(const AnimationTriggerPoint&);
void AddTrigger(float, bool, const Variant&);
bool BeginLoad(Deserializer&);
Animation Clone(const String& = String :: EMPTY) const;
AnimationTrack CreateTrack(const String&);
bool EndLoad();
StringHash GetAnimationNameHash() const;
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetLength() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
uint GetNumTracks() const;
uint GetNumTriggers() const;
Object GetSubsystem(StringHash) const;
AnimationTrack GetTrack(StringHash);
AnimationTrack GetTrack(const String&);
AnimationTrack GetTrack(uint);
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasMetadata() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RemoveAllMetadata();
void RemoveAllTracks();
void RemoveAllTriggers();
void RemoveMetadata(const String&);
bool RemoveTrack(const String&);
void RemoveTrigger(uint);
void ResetUseTimer();
operator Resource() const;
operator ResourceWithMetadata() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAnimationName(const String&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetLength(float);
void SetMemoryUse(uint);
void SetName(const String&);
void SetNumTriggers(uint);
void SetTrigger(uint, const AnimationTriggerPoint&);
const String& GetAnimationName() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetMetadata(const String&) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;
operator const ResourceWithMetadata() const;

// Properties:
String animationName;
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hasMetadata;
float length;
/* readonly */
uint memoryUse;
Array<Variant> metadata;
String name;
/* readonly */
uint numTracks;
uint numTriggers;
/* readonly */
int refs;
/* readonly */
Array<AnimationTrack> tracks;
Array<AnimationTriggerPoint> triggers;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class AnimationControl
{
public:
// Methods:
AnimationControl&  operator=(const AnimationControl&);

// Properties:
float autoFadeTime;
float fadeTime;
StringHash hash;
String name;
bool removeOnCompletion;
uint16 setTime;
uint8 setTimeRev;
float setTimeTtl;
uint8 setWeight;
uint8 setWeightRev;
float setWeightTtl;
float speed;
float targetWeight;
};

class AnimationController
{
public:
AnimationController();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool Fade(const String&, float, float);
bool FadeOthers(const String&, float, float);
bool GetAnimationEnabled() const;
AnimationState GetAnimationState(StringHash) const;
AnimationState GetAnimationState(const String&) const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
float GetAutoFade(const String&) const;
AnimationBlendMode GetBlendMode(const String&) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFadeTarget(const String&) const;
float GetFadeTime(const String&) const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint8 GetLayer(const String&) const;
float GetLength(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
bool GetRemoveOnCompletion(const String&) const;
Scene GetScene() const;
float GetSpeed(const String&) const;
Bone GetStartBone(const String&) const;
Object GetSubsystem(StringHash) const;
float GetTime(const String&) const;
StringHash GetType() const;
float GetWeight(const String&) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsAtEnd(const String&) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsFadingIn(const String&) const;
bool IsFadingOut(const String&) const;
bool IsInstanceOf(StringHash) const;
bool IsLooped(const String&) const;
bool IsPlaying(const String&) const;
bool IsPlaying(uint8) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
bool Play(const String&, uint8, bool, float = 0.0f);
bool PlayExclusive(const String&, uint8, bool, float = 0.0f);
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
bool SetAutoFade(const String&, float);
bool SetBlendMode(const String&, AnimationBlendMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
bool SetLayer(const String&, uint8);
bool SetLooped(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
bool SetRemoveOnCompletion(const String&, bool);
bool SetSpeed(const String&, float);
bool SetStartBone(const String&, const String&);
void SetTemporary(bool);
bool SetTime(const String&, float);
bool SetWeight(const String&, float);
bool Stop(const String&, float = 0.0f);
void StopAll(float = 0.0f);
void StopLayer(uint8, float = 0.0f);
const String& GetCategory() const;
const String& GetStartBoneName(const String&) const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<AnimationControl> animations;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAnimations;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class AnimationKeyFrame
{
public:
~AnimationKeyFrame();
AnimationKeyFrame();
// Methods:
AnimationKeyFrame&  operator=(const AnimationKeyFrame&);

// Properties:
Vector3 position;
Quaternion rotation;
Vector3 scale;
float time;
};

class AnimationSet2D
{
public:
AnimationSet2D();
// Methods:
bool BeginLoad(Deserializer&);
bool EndLoad();
String GetAnimation(uint) const;
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
uint GetNumAnimations() const;
Sprite2D GetSprite() const;
Sprite2D GetSpriterFileSprite(int, int) const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasAnimation(const String&) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
uint numAnimations;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class AnimationState
{
public:
AnimationState(AnimatedModel&, Animation&);
AnimationState(Node&, Animation&);
// Methods:
void AddTime(float);
void AddWeight(float);
void Apply();
Animation GetAnimation() const;
AnimationBlendMode GetBlendMode() const;
float GetBoneWeight(StringHash) const;
float GetBoneWeight(const String&) const;
float GetBoneWeight(uint) const;
uint8 GetLayer() const;
float GetLength() const;
AnimatedModel GetModel() const;
Node GetNode() const;
Bone GetStartBone() const;
float GetTime() const;
uint GetTrackIndex(Node) const;
uint GetTrackIndex(StringHash) const;
uint GetTrackIndex(const String&) const;
float GetWeight() const;
bool IsEnabled() const;
bool IsLooped() const;
operator RefCounted() const;
int Refs() const;
void SetBlendMode(AnimationBlendMode);
void SetBoneWeight(StringHash, float, bool = false);
void SetBoneWeight(const String&, float, bool = false);
void SetBoneWeight(uint, float, bool = false);
void SetLayer(uint8);
void SetLooped(bool);
void SetStartBone(Bone);
void SetTime(float);
void SetWeight(float);
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
Animation animation;
AnimationBlendMode blendMode;
Array<float> boneWeights;
/* readonly */
bool enabled;
uint8 layer;
/* readonly */
float length;
bool looped;
/* readonly */
AnimatedModel model;
/* readonly */
Node node;
/* readonly */
int refs;
Bone startBone;
float time;
/* readonly */
int weakRefs;
float weight;
};

class AnimationStateTrack
{
public:
~AnimationStateTrack();
AnimationStateTrack();
// Methods:
AnimationStateTrack&  operator=(const AnimationStateTrack&);

// Properties:
uint keyFrame;
float weight;
};

class AnimationTrack
{
public:
// Methods:
AnimationTrack&  operator=(const AnimationTrack&);
void AddKeyFrame(const AnimationKeyFrame&);
bool GetKeyFrameIndex(float, uint&) const;
uint GetNumKeyFrames() const;
void InsertKeyFrame(uint, const AnimationKeyFrame&);
void RemoveAllKeyFrames();
void RemoveKeyFrame(uint);
void SetKeyFrame(uint, const AnimationKeyFrame&);

// Properties:
uint8 channelMask;
Array<AnimationKeyFrame> keyFrames;
String name;
StringHash nameHash;
/* readonly */
uint numKeyFrames;
};

class AnimationTriggerPoint
{
public:
~AnimationTriggerPoint();
AnimationTriggerPoint();
// Methods:
AnimationTriggerPoint&  operator=(const AnimationTriggerPoint&);

// Properties:
Variant data;
float time;
};

class AreaAllocator
{
public:
~AreaAllocator();
AreaAllocator();
AreaAllocator(int, int, bool = true);
AreaAllocator(int, int, int, int, bool = true);
// Methods:
AreaAllocator&  operator=(const AreaAllocator&);
bool Allocate(int, int, int&, int&);
bool GetFastMode() const;
int GetHeight() const;
int GetWidth() const;
void Reset(int, int, int = 0, int = 0, bool = true);
};

template <typename T>
class Array
{
public:
Array(int&in);
Array(int&in, uint);
Array(int&in, uint, const T&in);
// Methods:
Array<Array<T>&  operator=(const T>&);
bool  operator==(const Array<T>&) const;
T&  operator[](uint);
void Clear();
void Erase(uint);
int Find(const T&) const;
int Find(uint, const T&) const;
int FindByRef(const T&) const;
int FindByRef(uint, const T&) const;
void Insert(uint, const T&);
void Pop();
void Push(const T&);
void Reserve(uint);
void Resize(uint);
void Reverse();
void Sort();
void Sort(uint, uint);
void SortReverse();
void SortReverse(uint, uint);
bool Swap(Array<T>&);
const T&  operator[](uint) const;

// Properties:
/* readonly */
bool empty;
uint length;
};

class AsyncProgress
{
public:
~AsyncProgress();
AsyncProgress();
// Methods:
AsyncProgress&  operator=(const AsyncProgress&);

// Properties:
uint jsonIndex;
uint loadedNodes;
uint loadedResources;
LoadMode mode;
uint totalNodes;
uint totalResources;
XMLElement xmlElement;
};

class AttributeAccessor
{
public:
// Methods:
void Get(Serializable, Variant&) const;
operator RefCounted() const;
int Refs() const;
void Set(Serializable, const Variant&);
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class AttributeAnimationInfo
{
public:
AttributeAnimationInfo(Animatable&, const AttributeInfo&in, ValueAnimation&, WrapMode, float);
AttributeAnimationInfo(const AttributeAnimationInfo&in);
// Methods:
const AttributeInfo& GetAttributeInfo() const;
ValueAnimation GetAnimation() const;
float GetSpeed() const;
Object GetTarget() const;
float GetTime() const;
WrapMode GetWrapMode() const;
operator RefCounted() const;
int Refs() const;
void SetSpeed(float);
bool SetTime(float);
void SetWrapMode(WrapMode);
bool Update(float);
operator ValueAnimationInfo() const;
int WeakRefs() const;
operator const RefCounted() const;
operator const ValueAnimationInfo() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class AttributeInfo
{
public:
~AttributeInfo();
AttributeInfo();
// Methods:
AttributeInfo&  operator=(const AttributeInfo&);
const Variant& GetMetadata(const StringHash&) const;

// Properties:
Variant defaultValue;
/* readonly */
Array<String> enumNames;
VariantMap metadata;
int mode;
String name;
VariantType type;
};

class Audio
{
public:
Audio();
// Methods:
void AddSoundSource(SoundSource);
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
bool GetInterpolation() const;
SoundListener GetListener() const;
float GetMasterGain(const String&) const;
int GetMixRate() const;
Mutex& GetMutex();
uint GetSampleSize() const;
float GetSoundSourceMasterGain(StringHash) const;
Array<SoundSource> GetSoundSources() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasMasterGain(const String&) const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInitialized() const;
bool IsInstanceOf(StringHash) const;
bool IsPlaying() const;
bool IsSoundTypePaused(const String&) const;
bool IsStereo() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void PauseSoundType(const String&);
bool Play();
operator RefCounted() const;
int Refs() const;
void RemoveSoundSource(SoundSource);
void ResumeAll();
void ResumeSoundType(const String&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetListener(SoundListener);
void SetMasterGain(const String&, float);
bool SetMode(int, int, bool, bool = true);
void Stop();
void StopSound(Sound);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool initialized;
/* readonly */
bool interpolation;
SoundListener listener;
Array<float> masterGain;
/* readonly */
int mixRate;
/* readonly */
bool playing;
/* readonly */
int refs;
/* readonly */
uint sampleSize;
/* readonly */
bool stereo;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class BackgroundLoadItem
{
public:
~BackgroundLoadItem();
BackgroundLoadItem();
// Methods:
BackgroundLoadItem&  operator=(const BackgroundLoadItem&);

// Properties:
bool sendEventOnFailure;
};

class Batch
{
public:
~Batch();
Batch();
Batch(const SourceBatch&in);
// Methods:
Batch&  operator=(const Batch&);
void CalculateSortKey();
void Draw(View, Camera, bool) const;
void Prepare(View, Camera, bool, bool) const;

// Properties:
float distance;
GeometryType geometryType;
bool isBase;
uint8 lightMask;
uint numWorldTransforms;
uint8 renderOrder;
uint64 sortKey;
};

class BatchGroup
{
public:
~BatchGroup();
BatchGroup();
BatchGroup(const Batch&in);
// Methods:
BatchGroup&  operator=(const BatchGroup&);
void AddTransforms(const Batch&);
void CalculateSortKey();
void Draw(View, Camera, bool) const;
void Prepare(View, Camera, bool, bool) const;

// Properties:
float distance;
GeometryType geometryType;
bool isBase;
uint8 lightMask;
uint numWorldTransforms;
uint8 renderOrder;
uint64 sortKey;
uint startIndex;
};

class BatchGroupKey
{
public:
~BatchGroupKey();
BatchGroupKey();
BatchGroupKey(const Batch&in);
// Methods:
BatchGroupKey&  operator=(const BatchGroupKey&);
bool  operator==(const BatchGroupKey&) const;
uint ToHash() const;

// Properties:
uint8 renderOrder;
};

class BatchQueue
{
public:
~BatchQueue();
BatchQueue();
// Methods:
BatchQueue&  operator=(const BatchQueue&);
void Clear(int);
void Draw(View, Camera, bool, bool, bool) const;
uint GetNumInstances() const;
bool IsEmpty() const;
void SortBackToFront();
void SortFrontToBack();

// Properties:
bool hasExtraDefines;
uint maxSortedInstances;
String psExtraDefines;
StringHash psExtraDefinesHash;
String vsExtraDefines;
StringHash vsExtraDefinesHash;
};

class BiasParameters
{
public:
BiasParameters();
BiasParameters(float, float, float = 0.0f);
// Methods:
BiasParameters&  operator=(const BiasParameters&);
void Validate();

// Properties:
float constantBias;
float normalOffset;
float slopeScaledBias;
};

class Billboard
{
public:
// Methods:
Billboard&  operator=(const Billboard&);

// Properties:
Color color;
Vector3 direction;
bool enabled;
Vector3 position;
float rotation;
float screenScaleFactor;
Vector2 size;
float sortDistance;
Rect uv;
};

class BillboardSet
{
public:
BillboardSet();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
void Commit();
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
float GetAnimationLodBias() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
Billboard GetBillboard(uint);
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FaceCameraMode GetFaceCameraMode() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinAngle() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumBillboards() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsFixedScreenSize() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsRelative() const;
bool IsReplicated() const;
bool IsScaled() const;
bool IsSorted() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
operator ParticleEmitter() const;
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationLodBias(float);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetFaceCameraMode(FaceCameraMode);
void SetFixedScreenSize(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxLights(uint);
void SetMinAngle(float);
void SetMinMaxZ(float, float);
void SetNumBillboards(uint);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetRelative(bool);
void SetScaled(bool);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetSorted(bool);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const ParticleEmitter() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
float animationLodBias;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
Array<Billboard> billboards;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
FaceCameraMode faceCameraMode;
bool fixedScreenSize;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
Material material;
uint maxLights;
float minAngle;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
uint numBillboards;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
/* readonly */
int refs;
bool relative;
/* readonly */
bool replicated;
bool scaled;
float shadowDistance;
uint shadowMask;
bool sorted;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class Bone
{
public:
// Methods:
Bone&  operator=(const Bone&);

// Properties:
bool animated;
BoundingBox boundingBox;
uint8 collisionMask;
Vector3 initialPosition;
Quaternion initialRotation;
Vector3 initialScale;
String name;
StringHash nameHash;
Node node;
Matrix3x4 offsetMatrix;
uint parentIndex;
float radius;
};

class BorderImage
{
public:
BorderImage();
BorderImage(const String&in);
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void BringToFront();
operator Button() const;
operator CheckBox() const;
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
operator Cursor() const;
void DisableLayoutUpdate();
operator DropDownList() const;
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
operator LineEdit() const;
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Menu() const;
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
operator ProgressBar() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
operator ScrollBar() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
operator Slider() const;
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
operator View3D() const;
int WeakRefs() const;
operator Window() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Button() const;
operator const CheckBox() const;
operator const Cursor() const;
operator const DropDownList() const;
operator const LineEdit() const;
operator const Menu() const;
operator const Object() const;
operator const ProgressBar() const;
operator const RefCounted() const;
operator const ScrollBar() const;
operator const Serializable() const;
operator const Slider() const;
operator const UIElement() const;
operator const View3D() const;
operator const Window() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class BoundingBox
{
public:
BoundingBox();
BoundingBox(const BoundingBox&in);
BoundingBox(const Rect&in);
BoundingBox(const Vector3&in, const Vector3&in);
BoundingBox(float, float);
BoundingBox(const Frustum&in);
BoundingBox(const Polyhedron&in);
BoundingBox(const Sphere&in);
// Methods:
BoundingBox&  operator=(const BoundingBox&);
BoundingBox&  operator=(const Rect&);
bool  operator==(const BoundingBox&) const;
Vector3 Center() const;
void Clear();
void Clip(const BoundingBox&);
void Define(const BoundingBox&);
void Define(const Frustum&);
void Define(const Polyhedron&);
void Define(const Rect&);
void Define(const Sphere&);
void Define(const Vector3&);
void Define(const Vector3&, const Vector3&);
void Define(float, float);
bool Defined() const;
float DistanceToPoint(const Vector3&) const;
Vector3 HalfSize() const;
Intersection IsInside(const BoundingBox&) const;
Intersection IsInside(const Sphere&) const;
Intersection IsInside(const Vector3&) const;
Intersection IsInsideFast(const BoundingBox&) const;
Intersection IsInsideFast(const Sphere&) const;
void Merge(const BoundingBox&);
void Merge(const Frustum&);
void Merge(const Polyhedron&);
void Merge(const Sphere&);
void Merge(const Vector3&);
Rect Projected(const Matrix4&) const;
Vector3 Size() const;
String ToString() const;
void Transform(const Matrix3&);
void Transform(const Matrix3x4&);
BoundingBox Transformed(const Matrix3&) const;
BoundingBox Transformed(const Matrix3x4&) const;

// Properties:
/* readonly */
Vector3 center;
float dummyMax;
float dummyMin;
/* readonly */
Vector3 halfSize;
Vector3 max;
Vector3 min;
/* readonly */
Vector3 size;
};

class BufferedSoundStream
{
public:
BufferedSoundStream();
// Methods:
void Clear();
float GetBufferLength() const;
uint GetBufferNumBytes() const;
float GetFrequency() const;
uint GetIntFrequency() const;
uint GetSampleSize() const;
bool GetStopAtEnd() const;
bool IsSixteenBit() const;
bool IsStereo() const;
operator RefCounted() const;
int Refs() const;
bool Seek(uint);
void SetFormat(uint, bool, bool);
void SetStopAtEnd(bool);
operator SoundStream() const;
int WeakRefs() const;
operator const RefCounted() const;
operator const SoundStream() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class Button
{
public:
Button();
Button(const String&in);
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
operator DropDownList() const;
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
float GetRepeatDelay() const;
float GetRepeatRate() const;
UIElement GetRoot() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetPressedChildOffset() const;
const IntVector2& GetPressedOffset() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsPressed() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Menu() const;
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPressedChildOffset(const IntVector2&);
void SetPressedChildOffset(int, int);
void SetPressedOffset(const IntVector2&);
void SetPressedOffset(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetRepeat(float, float);
void SetRepeatDelay(float);
void SetRepeatRate(float);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const DropDownList() const;
operator const Menu() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
/* readonly */
bool pressed;
IntVector2 pressedChildOffset;
IntVector2 pressedOffset;
int priority;
/* readonly */
int refs;
float repeatDelay;
float repeatRate;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class Camera
{
public:
Camera();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
const Frustum& GetFrustum() const;
bool GetAnimationEnabled() const;
float GetAspectRatio() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetAutoAspectRatio() const;
bool GetBlockEvents() const;
Vector4 GetClipPlaneAttr() const;
Component GetComponent(StringHash) const;
float GetDistance(const Vector3&) const;
float GetDistanceSquared(const Vector3&) const;
Matrix3x4 GetEffectiveWorldTransform() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Quaternion GetFaceCameraRotation(const Vector3&, const Quaternion&, FaceCameraMode, float = 0.0f);
float GetFarClip() const;
FillMode GetFillMode() const;
bool GetFlipVertical() const;
float GetFov() const;
void GetFrustumSize(Vector3&, Vector3&) const;
Matrix4 GetGPUProjection() const;
float GetHalfViewSize() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetLodBias() const;
float GetLodDistance(float, float, float) const;
float GetNearClip() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOrthoSize() const;
Matrix4 GetProjection() const;
Vector4 GetReflectionPlaneAttr() const;
bool GetReverseCulling() const;
Scene GetScene() const;
Ray GetScreenRay(float, float) const;
Frustum GetSplitFrustum(float, float) const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool GetUseClipping() const;
bool GetUseReflection() const;
uint GetViewMask() const;
uint GetViewOverrideFlags() const;
Frustum GetViewSpaceFrustum() const;
Frustum GetViewSpaceSplitFrustum(float, float) const;
float GetZoom() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsOrthographic() const;
bool IsProjectionValid() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
const Matrix3x4& GetView() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
const Plane& GetClipPlane() const;
const Plane& GetReflectionPlane() const;
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
Vector3 ScreenToWorldPoint(const Vector3&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAspectRatio(float);
void SetAspectRatioInternal(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAutoAspectRatio(bool);
void SetBlockEvents(bool);
void SetClipPlane(const Plane&);
void SetClipPlaneAttr(const Vector4&);
void SetEnabled(bool);
void SetFarClip(float);
void SetFillMode(FillMode);
void SetFlipVertical(bool);
void SetFov(float);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLodBias(float);
void SetNearClip(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOrthoSize(const Vector2&);
void SetOrthoSize(float);
void SetOrthoSizeAttr(float);
void SetOrthographic(bool);
void SetProjection(const Matrix4&);
void SetProjectionOffset(const Vector2&);
void SetReflectionPlane(const Plane&);
void SetReflectionPlaneAttr(const Vector4&);
void SetTemporary(bool);
void SetUseClipping(bool);
void SetUseReflection(bool);
void SetViewMask(uint);
void SetViewOverrideFlags(uint);
void SetZoom(float);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetProjectionOffset() const;
int WeakRefs() const;
Vector2 WorldToScreenPoint(const Vector3&) const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
float aspectRatio;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool autoAspectRatio;
/* readonly */
String category;
Plane clipPlane;
/* readonly */
Matrix3x4 effectiveWorldTransform;
bool enabled;
/* readonly */
bool enabledEffective;
float farClip;
FillMode fillMode;
float fov;
/* readonly */
Frustum frustum;
/* readonly */
Matrix4 gPUProjection;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
float halfViewSize;
/* readonly */
uint id;
float lodBias;
float nearClip;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
float orthoSize;
bool orthographic;
Matrix4 projection;
Vector2 projectionOffset;
Plane reflectionPlane;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useClipping;
bool useReflection;
/* readonly */
Matrix3x4 view;
uint viewMask;
uint viewOverrideFlags;
/* readonly */
Frustum viewSpaceFrustum;
/* readonly */
int weakRefs;
float zoom;
};

class CascadeParameters
{
public:
CascadeParameters();
CascadeParameters(float, float, float, float, float, float = 1.0f);
// Methods:
CascadeParameters&  operator=(const CascadeParameters&);
float GetShadowRange() const;
void Validate();

// Properties:
float biasAutoAdjust;
float fadeStart;
float split1;
float split2;
float split3;
float split4;
Vector4 splits;
};

class CharLocation
{
public:
~CharLocation();
CharLocation();
// Methods:
CharLocation&  operator=(const CharLocation&);

// Properties:
Vector2 position;
Vector2 size;
};

class CheckBox
{
public:
CheckBox();
CheckBox(const String&in);
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetCheckedOffset() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChecked() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChecked(bool);
void SetCheckedOffset(const IntVector2&);
void SetCheckedOffset(int, int);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
bool checked;
IntVector2 checkedOffset;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class CollisionBox2D
{
public:
CollisionBox2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator CollisionShape2D() const;
operator Component() const;
void CreateFixture();
void DrawDebugGeometry(DebugRenderer, bool);
float GetAngle() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
int GetCategoryBits() const;
Component GetComponent(StringHash) const;
float GetDensity() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFriction() const;
int GetGroupIndex() const;
uint GetID() const;
float GetInertia() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetMaskBits() const;
float GetMass() const;
Vector2 GetMassCenter() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetRestitution() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsTrigger() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseFixture();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAngle(float);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCategoryBits(int);
void SetCenter(const Vector2&);
void SetCenter(float, float);
void SetDensity(float);
void SetEnabled(bool);
void SetFriction(float);
void SetGlobalVar(StringHash, const Variant&);
void SetGroupIndex(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaskBits(int);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetRestitution(float);
void SetSize(const Vector2&);
void SetSize(float, float);
void SetTemporary(bool);
void SetTrigger(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetCenter() const;
const Vector2& GetSize() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const CollisionShape2D() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
float angle;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
int categoryBits;
Vector2 center;
float density;
bool enabled;
/* readonly */
bool enabledEffective;
float friction;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int groupIndex;
/* readonly */
uint id;
/* readonly */
float inertia;
int maskBits;
/* readonly */
float mass;
/* readonly */
Vector2 massCenter;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
float restitution;
Vector2 size;
bool temporary;
bool trigger;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class CollisionChain2D
{
public:
CollisionChain2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator CollisionShape2D() const;
operator Component() const;
void CreateFixture();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
int GetCategoryBits() const;
Component GetComponent(StringHash) const;
float GetDensity() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFriction() const;
int GetGroupIndex() const;
uint GetID() const;
float GetInertia() const;
bool GetInterceptNetworkUpdate(const String&) const;
bool GetLoop() const;
int GetMaskBits() const;
float GetMass() const;
Vector2 GetMassCenter() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetRestitution() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetVertexCount() const;
Array<Vector2> GetVertices() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsTrigger() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseFixture();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCategoryBits(int);
void SetDensity(float);
void SetEnabled(bool);
void SetFriction(float);
void SetGlobalVar(StringHash, const Variant&);
void SetGroupIndex(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLoop(bool);
void SetMaskBits(int);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetRestitution(float);
void SetTemporary(bool);
void SetTrigger(bool);
void SetVertex(uint, const Vector2&);
void SetVertexCount(uint);
void SetVertices(Array<Vector2>);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetVertex(uint) const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const CollisionShape2D() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
int categoryBits;
float density;
bool enabled;
/* readonly */
bool enabledEffective;
float friction;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int groupIndex;
/* readonly */
uint id;
/* readonly */
float inertia;
bool loop;
int maskBits;
/* readonly */
float mass;
/* readonly */
Vector2 massCenter;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
float restitution;
bool temporary;
bool trigger;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint vertexCount;
/* readonly */
int weakRefs;
};

class CollisionCircle2D
{
public:
CollisionCircle2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator CollisionShape2D() const;
operator Component() const;
void CreateFixture();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
int GetCategoryBits() const;
Component GetComponent(StringHash) const;
float GetDensity() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFriction() const;
int GetGroupIndex() const;
uint GetID() const;
float GetInertia() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetMaskBits() const;
float GetMass() const;
Vector2 GetMassCenter() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetRadius() const;
float GetRestitution() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsTrigger() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseFixture();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCategoryBits(int);
void SetCenter(const Vector2&);
void SetCenter(float, float);
void SetDensity(float);
void SetEnabled(bool);
void SetFriction(float);
void SetGlobalVar(StringHash, const Variant&);
void SetGroupIndex(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaskBits(int);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetRadius(float);
void SetRestitution(float);
void SetTemporary(bool);
void SetTrigger(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetCenter() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const CollisionShape2D() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
int categoryBits;
Vector2 center;
float density;
bool enabled;
/* readonly */
bool enabledEffective;
float friction;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int groupIndex;
/* readonly */
uint id;
/* readonly */
float inertia;
int maskBits;
/* readonly */
float mass;
/* readonly */
Vector2 massCenter;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
float radius;
/* readonly */
int refs;
/* readonly */
bool replicated;
float restitution;
bool temporary;
bool trigger;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class CollisionEdge2D
{
public:
CollisionEdge2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator CollisionShape2D() const;
operator Component() const;
void CreateFixture();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
int GetCategoryBits() const;
Component GetComponent(StringHash) const;
float GetDensity() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFriction() const;
int GetGroupIndex() const;
uint GetID() const;
float GetInertia() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetMaskBits() const;
float GetMass() const;
Vector2 GetMassCenter() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetRestitution() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsTrigger() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseFixture();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCategoryBits(int);
void SetDensity(float);
void SetEnabled(bool);
void SetFriction(float);
void SetGlobalVar(StringHash, const Variant&);
void SetGroupIndex(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaskBits(int);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetRestitution(float);
void SetTemporary(bool);
void SetTrigger(bool);
void SetVertex1(const Vector2&);
void SetVertex2(const Vector2&);
void SetVertices(const Vector2&, const Vector2&);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetVertex1() const;
const Vector2& GetVertex2() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const CollisionShape2D() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
int categoryBits;
float density;
bool enabled;
/* readonly */
bool enabledEffective;
float friction;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int groupIndex;
/* readonly */
uint id;
/* readonly */
float inertia;
int maskBits;
/* readonly */
float mass;
/* readonly */
Vector2 massCenter;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
float restitution;
bool temporary;
bool trigger;
/* readonly */
StringHash type;
/* readonly */
String typeName;
Vector2 vertex1;
Vector2 vertex2;
/* readonly */
int weakRefs;
};

class CollisionGeometryData
{
public:
// Methods:
operator ConvexData() const;
operator GImpactMeshData() const;
operator HeightfieldData() const;
operator RefCounted() const;
int Refs() const;
operator TriangleMeshData() const;
int WeakRefs() const;
operator const ConvexData() const;
operator const GImpactMeshData() const;
operator const HeightfieldData() const;
operator const RefCounted() const;
operator const TriangleMeshData() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class CollisionPolygon2D
{
public:
CollisionPolygon2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator CollisionShape2D() const;
operator Component() const;
void CreateFixture();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
int GetCategoryBits() const;
Component GetComponent(StringHash) const;
float GetDensity() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFriction() const;
int GetGroupIndex() const;
uint GetID() const;
float GetInertia() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetMaskBits() const;
float GetMass() const;
Vector2 GetMassCenter() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetRestitution() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetVertexCount() const;
Array<Vector2> GetVertices() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsTrigger() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseFixture();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCategoryBits(int);
void SetDensity(float);
void SetEnabled(bool);
void SetFriction(float);
void SetGlobalVar(StringHash, const Variant&);
void SetGroupIndex(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaskBits(int);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetRestitution(float);
void SetTemporary(bool);
void SetTrigger(bool);
void SetVertex(uint, const Vector2&);
void SetVertexCount(uint);
void SetVertices(Array<Vector2>);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetVertex(uint) const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const CollisionShape2D() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
int categoryBits;
float density;
bool enabled;
/* readonly */
bool enabledEffective;
float friction;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int groupIndex;
/* readonly */
uint id;
/* readonly */
float inertia;
int maskBits;
/* readonly */
float mass;
/* readonly */
Vector2 massCenter;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
float restitution;
bool temporary;
bool trigger;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint vertexCount;
/* readonly */
int weakRefs;
};

class CollisionShape
{
public:
CollisionShape();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
CollisionGeometryData GetGeometryData() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLodLevel() const;
float GetMargin() const;
Model GetModel() const;
ResourceRef GetModelAttr() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
PhysicsWorld GetPhysicsWorld() const;
Scene GetScene() const;
ShapeType GetShapeType() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
BoundingBox GetWorldBoundingBox() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
void NotifyRigidBody(bool = true);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
const Quaternion& GetRotation() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseShape();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetBox(const Vector3&, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetCapsule(float, float, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetCone(float, float, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetConvexHull(Model, uint = 0, const Vector3& = Vector3 :: ONE, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetCustomConvexHull(CustomGeometry, const Vector3& = Vector3 :: ONE, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetCustomGImpactMesh(CustomGeometry, const Vector3& = Vector3 :: ONE, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetCustomTriangleMesh(CustomGeometry, const Vector3& = Vector3 :: ONE, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetCylinder(float, float, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetEnabled(bool);
void SetGImpactMesh(Model, uint = 0, const Vector3& = Vector3 :: ONE, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLodLevel(uint);
void SetMargin(float);
void SetModel(Model);
void SetModelAttr(const ResourceRef&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetPosition(const Vector3&);
void SetRotation(const Quaternion&);
void SetShapeType(ShapeType);
void SetSize(const Vector3&);
void SetSphere(float, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetStaticPlane(const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
void SetTemporary(bool);
void SetTerrain(uint = 0);
void SetTransform(const Vector3&, const Quaternion&);
void SetTriangleMesh(Model, uint = 0, const Vector3& = Vector3 :: ONE, const Vector3& = Vector3 :: ZERO, const Quaternion& = Quaternion :: IDENTITY);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetPosition() const;
const Vector3& GetSize() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
uint lodLevel;
float margin;
Model model;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
Vector3 position;
/* readonly */
int refs;
/* readonly */
bool replicated;
Quaternion rotation;
ShapeType shapeType;
Vector3 size;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
};

class CollisionShape2D
{
public:
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator CollisionBox2D() const;
operator CollisionChain2D() const;
operator CollisionCircle2D() const;
operator CollisionEdge2D() const;
operator CollisionPolygon2D() const;
operator Component() const;
void CreateFixture();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
int GetCategoryBits() const;
Component GetComponent(StringHash) const;
float GetDensity() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFriction() const;
int GetGroupIndex() const;
uint GetID() const;
float GetInertia() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetMaskBits() const;
float GetMass() const;
Vector2 GetMassCenter() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetRestitution() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsTrigger() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseFixture();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCategoryBits(int);
void SetDensity(float);
void SetEnabled(bool);
void SetFriction(float);
void SetGlobalVar(StringHash, const Variant&);
void SetGroupIndex(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaskBits(int);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetRestitution(float);
void SetTemporary(bool);
void SetTrigger(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const CollisionBox2D() const;
operator const CollisionChain2D() const;
operator const CollisionCircle2D() const;
operator const CollisionEdge2D() const;
operator const CollisionPolygon2D() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
int categoryBits;
float density;
bool enabled;
/* readonly */
bool enabledEffective;
float friction;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int groupIndex;
/* readonly */
uint id;
/* readonly */
float inertia;
int maskBits;
/* readonly */
float mass;
/* readonly */
Vector2 massCenter;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
float restitution;
bool temporary;
bool trigger;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class Color
{
public:
Color();
Color(const Color&in);
Color(const Color&in, float);
Color(float, float, float);
Color(float, float, float, float);
Color(const Vector3&in);
Color(const Vector4&in);
Color(float[]&inout);
// Methods:
Color  operator+(const Color&) const;
Color&  operator+=(const Color&);
Color&  operator=(const Color&);
bool  operator==(const Color&) const;
Color Abs() const;
float Average() const;
float Chroma() const;
void Clip(bool = false);
bool Equals(const Color&) const;
void FromHSL(float, float, float, float = 1.0f);
void FromHSV(float, float, float, float = 1.0f);
void FromUInt(uint);
Color GammaToLinear() const;
float Hue() const;
void Invert(bool = false);
Color Lerp(const Color&, float) const;
float Lightness() const;
Color LinearToGamma() const;
float Luma() const;
float MaxRGB() const;
float MinRGB() const;
float Range() const;
float SaturationHSL() const;
float SaturationHSV() const;
float SumRGB() const;
Vector3 ToHSL() const;
Vector3 ToHSV() const;
uint ToHash() const;
String ToString() const;
uint ToUInt() const;
uint ToUIntArgb() const;
Vector3 ToVector3() const;
Vector4 ToVector4() const;
float Value() const;

// Properties:
float a;
float b;
/* readonly */
Array<float> data;
float g;
float r;
/* readonly */
Vector3 rgb;
/* readonly */
Vector4 rgba;

// Constants:
static const Color BLACK;
static const Color BLUE;
static const Color CYAN;
static const Color GRAY;
static const Color GREEN;
static const Color MAGENTA;
static const Color RED;
static const Color TRANSPARENT_BLACK;
static const Color WHITE;
static const Color YELLOW;
};

class ColorFrame
{
public:
// Methods:
ColorFrame&  operator=(const ColorFrame&);
Color Interpolate(const ColorFrame&, float) const;

// Properties:
Color color;
float time;
};

class Component
{
public:
Component();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
operator AnimatedModel() const;
operator AnimatedSprite2D() const;
operator AnimationController() const;
void ApplyAttributes();
operator BillboardSet() const;
operator Camera() const;
void CleanupConnection(Connection);
operator CollisionBox2D() const;
operator CollisionChain2D() const;
operator CollisionCircle2D() const;
operator CollisionEdge2D() const;
operator CollisionPolygon2D() const;
operator CollisionShape2D() const;
operator CollisionShape() const;
operator Constraint2D() const;
operator Constraint() const;
operator ConstraintDistance2D() const;
operator ConstraintFriction2D() const;
operator ConstraintGear2D() const;
operator ConstraintMotor2D() const;
operator ConstraintMouse2D() const;
operator ConstraintPrismatic2D() const;
operator ConstraintPulley2D() const;
operator ConstraintRevolute2D() const;
operator ConstraintRope2D() const;
operator ConstraintWeld2D() const;
operator ConstraintWheel2D() const;
operator CrowdAgent() const;
operator CrowdManager() const;
operator CustomGeometry() const;
operator DebugRenderer() const;
operator DecalSet() const;
void DrawDebugGeometry(DebugRenderer, bool);
operator Drawable2D() const;
operator Drawable() const;
operator DynamicNavigationMesh() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
operator IKConstraint() const;
operator IKEffector() const;
operator IKSolver() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
operator Light() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
operator LogicComponent() const;
void MarkNetworkUpdate();
operator NavArea() const;
operator Navigable() const;
operator NavigationMesh() const;
operator NetworkPriority() const;
operator Object() const;
operator Obstacle() const;
operator Octree() const;
operator OffMeshConnection() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
operator ParticleEmitter2D() const;
operator ParticleEmitter() const;
operator PhysicsWorld2D() const;
operator PhysicsWorld() const;
void PrepareNetworkUpdate();
operator RaycastVehicle() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
operator Renderer2D() const;
void ResetToDefault();
operator RibbonTrail() const;
operator RigidBody2D() const;
operator RigidBody() const;
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
operator ScriptInstance() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
operator Skybox() const;
operator SmoothedTransform() const;
operator SoundListener() const;
operator SoundSource3D() const;
operator SoundSource() const;
operator SplinePath() const;
operator StaticModel() const;
operator StaticModelGroup() const;
operator StaticSprite2D() const;
operator StretchableSprite2D() const;
const String& GetCategory() const;
const String& GetTypeName() const;
operator Terrain() const;
operator TerrainPatch() const;
operator Text3D() const;
operator TileMap2D() const;
operator TileMapLayer2D() const;
operator UIComponent() const;
operator UnknownComponent() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator Zone() const;
operator const Animatable() const;
operator const AnimatedModel() const;
operator const AnimatedSprite2D() const;
operator const AnimationController() const;
operator const BillboardSet() const;
operator const Camera() const;
operator const CollisionBox2D() const;
operator const CollisionChain2D() const;
operator const CollisionCircle2D() const;
operator const CollisionEdge2D() const;
operator const CollisionPolygon2D() const;
operator const CollisionShape2D() const;
operator const CollisionShape() const;
operator const Constraint2D() const;
operator const Constraint() const;
operator const ConstraintDistance2D() const;
operator const ConstraintFriction2D() const;
operator const ConstraintGear2D() const;
operator const ConstraintMotor2D() const;
operator const ConstraintMouse2D() const;
operator const ConstraintPrismatic2D() const;
operator const ConstraintPulley2D() const;
operator const ConstraintRevolute2D() const;
operator const ConstraintRope2D() const;
operator const ConstraintWeld2D() const;
operator const ConstraintWheel2D() const;
operator const CrowdAgent() const;
operator const CrowdManager() const;
operator const CustomGeometry() const;
operator const DebugRenderer() const;
operator const DecalSet() const;
operator const Drawable2D() const;
operator const Drawable() const;
operator const DynamicNavigationMesh() const;
operator const IKConstraint() const;
operator const IKEffector() const;
operator const IKSolver() const;
operator const Light() const;
operator const LogicComponent() const;
operator const NavArea() const;
operator const Navigable() const;
operator const NavigationMesh() const;
operator const NetworkPriority() const;
operator const Object() const;
operator const Obstacle() const;
operator const Octree() const;
operator const OffMeshConnection() const;
operator const ParticleEmitter2D() const;
operator const ParticleEmitter() const;
operator const PhysicsWorld2D() const;
operator const PhysicsWorld() const;
operator const RaycastVehicle() const;
operator const RefCounted() const;
operator const Renderer2D() const;
operator const RibbonTrail() const;
operator const RigidBody2D() const;
operator const RigidBody() const;
operator const ScriptInstance() const;
operator const Serializable() const;
operator const Skybox() const;
operator const SmoothedTransform() const;
operator const SoundListener() const;
operator const SoundSource3D() const;
operator const SoundSource() const;
operator const SplinePath() const;
operator const StaticModel() const;
operator const StaticModelGroup() const;
operator const StaticSprite2D() const;
operator const StretchableSprite2D() const;
operator const Terrain() const;
operator const TerrainPatch() const;
operator const Text3D() const;
operator const TileMap2D() const;
operator const TileMapLayer2D() const;
operator const UIComponent() const;
operator const UnknownComponent() const;
operator const Zone() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ComponentReplicationState
{
public:
~ComponentReplicationState();
ComponentReplicationState();
// Methods:
ComponentReplicationState&  operator=(const ComponentReplicationState&);

// Properties:
DirtyBits dirtyAttributes;
};

class CompressedLevel
{
public:
~CompressedLevel();
CompressedLevel();
// Methods:
CompressedLevel&  operator=(const CompressedLevel&);

// Properties:
uint blockSize;
uint dataSize;
int depth;
CompressedFormat format;
int height;
uint rowSize;
uint rows;
int width;
};

class Condition
{
public:
~Condition();
Condition();
// Methods:
Condition&  operator=(const Condition&);
void Set();
void Wait();
};

class Connection
{
public:
// Methods:
void Ban();
void ConfigureNetworkSimulator(int, float);
const Controls& GetControls() const;
void Disconnect(int = 0);
String GetAddress() const;
bool GetBlockEvents() const;
float GetBytesInPerSec() const;
float GetBytesOutPerSec() const;
float GetDownloadProgress() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
VariantMap& GetIdentity();
uint GetLastHeardTime() const;
bool GetLogStatistics() const;
uint GetNumDownloads() const;
PacketType GetPacketType(bool, bool);
int GetPacketsInPerSec() const;
int GetPacketsOutPerSec() const;
uint16 GetPort() const;
float GetRoundTripTime() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
uint8 GetTimeStamp() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsClient() const;
bool IsConnectPending() const;
bool IsConnected() const;
bool IsInstanceOf(StringHash) const;
bool IsSceneLoaded() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void ProcessPendingLatestData();
const Quaternion& GetRotation() const;
operator RefCounted() const;
int Refs() const;
void SendAllBuffers();
void SendBuffer(PacketType);
void SendClientUpdate();
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SendMessage(int, bool, bool, const VectorBuffer&, uint = 0);
void SendPackageToClient(PackageFile);
void SendPackages();
void SendRemoteEvent(Node, StringHash, bool, const VariantMap& = VariantMap ( ));
void SendRemoteEvent(StringHash, bool, const VariantMap& = VariantMap ( ));
void SendRemoteEvents();
void SendServerUpdate();
void SetBlockEvents(bool);
void SetConnectPending(bool);
void SetControls(const Controls&);
void SetGlobalVar(StringHash, const Variant&);
void SetIdentity(const VariantMap&);
void SetLogStatistics(bool);
void SetPacketSizeLimit(int);
void SetPosition(const Vector3&);
void SetRotation(const Quaternion&);
void SetScene(Scene);
const String& GetCategory() const;
const String& GetDownloadName() const;
const String& GetTypeName() const;
String ToString() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetPosition() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String address;
/* readonly */
float bytesInPerSec;
/* readonly */
float bytesOutPerSec;
/* readonly */
String category;
/* readonly */
bool client;
/* readonly */
bool connectPending;
/* readonly */
bool connected;
Controls controls;
/* readonly */
String downloadName;
/* readonly */
float downloadProgress;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
VariantMap identity;
/* readonly */
uint lastHeardTime;
bool logStatistics;
/* readonly */
uint numDownloads;
/* readonly */
int packetsInPerSec;
/* readonly */
int packetsOutPerSec;
/* readonly */
uint16 port;
Vector3 position;
/* readonly */
int refs;
Quaternion rotation;
/* readonly */
float roundTripTime;
Scene scene;
/* readonly */
bool sceneLoaded;
uint8 timeStamp;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class Console
{
public:
Console();
// Methods:
void AddAutoComplete(const String&);
void CopySelectedRows() const;
BorderImage GetBackground() const;
bool GetBlockEvents() const;
Button GetCloseButton() const;
XMLFile GetDefaultStyle() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
bool GetFocusOnShow() const;
uint GetHistoryPosition() const;
LineEdit GetLineEdit() const;
uint GetNumBufferedRows() const;
uint GetNumHistoryRows() const;
uint GetNumRows() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsAutoVisibleOnError() const;
bool IsInstanceOf(StringHash) const;
bool IsVisible() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RemoveAutoComplete(const String&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAutoVisibleOnError(bool);
void SetBlockEvents(bool);
void SetCommandInterpreter(const String&);
void SetDefaultStyle(XMLFile);
void SetFocusOnShow(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetNumBufferedRows(uint);
void SetNumHistoryRows(uint);
void SetNumRows(uint);
void SetVisible(bool);
const String& GetCategory() const;
const String& GetCommandInterpreter() const;
const String& GetHistoryRow(uint) const;
const String& GetTypeName() const;
void Toggle();
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdateElements();
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
bool autoVisibleOnError;
/* readonly */
BorderImage background;
/* readonly */
String category;
/* readonly */
Button closeButton;
String commandInterpreter;
XMLFile defaultStyle;
bool focusOnShow;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint historyPosition;
/* readonly */
Array<String> historyRow;
/* readonly */
LineEdit lineEdit;
uint numBufferedRows;
uint numHistoryRows;
uint numRows;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool visible;
/* readonly */
int weakRefs;
};

class ConstantBuffer
{
public:
ConstantBuffer();
// Methods:
void Apply();
void ClearDataLost();
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetGPUObjectName() const;
Graphics GetGraphics() const;
uint GetSize() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasPendingData() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsDataLost() const;
bool IsDirty() const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnDeviceLost();
void OnDeviceReset();
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void Release();
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
bool SetSize(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
/* readonly */
bool dataLost;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class Constraint
{
public:
Constraint();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void ApplyFrames();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
float GetCFM() const;
Component GetComponent(StringHash) const;
ConstraintType GetConstraintType() const;
bool GetDisableCollision() const;
float GetERP() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody GetOtherBody() const;
RigidBody GetOwnBody() const;
PhysicsWorld GetPhysicsWorld() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
Vector3 GetWorldPosition() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
const Quaternion& GetOtherRotation() const;
const Quaternion& GetRotation() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseConstraint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAxis(const Vector3&);
void SetBlockEvents(bool);
void SetCFM(float);
void SetConstraintType(ConstraintType);
void SetDisableCollision(bool);
void SetERP(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetHighLimit(const Vector2&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLowLimit(const Vector2&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherAxis(const Vector3&);
void SetOtherBody(RigidBody);
void SetOtherPosition(const Vector3&);
void SetOtherRotation(const Quaternion&);
void SetPosition(const Vector3&);
void SetRotation(const Quaternion&);
void SetTemporary(bool);
void SetWorldPosition(const Vector3&);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetHighLimit() const;
const Vector2& GetLowLimit() const;
const Vector3& GetOtherPosition() const;
const Vector3& GetPosition() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* writeonly */
Vector3 axis;
/* readonly */
String category;
float cfm;
ConstraintType constraintType;
bool disableCollision;
bool enabled;
/* readonly */
bool enabledEffective;
float erp;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
Vector2 highLimit;
/* readonly */
uint id;
Vector2 lowLimit;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* writeonly */
Vector3 otherAxis;
RigidBody otherBody;
Vector3 otherPosition;
Quaternion otherRotation;
/* readonly */
RigidBody ownBody;
Vector3 position;
/* readonly */
int refs;
/* readonly */
bool replicated;
Quaternion rotation;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
Vector3 worldPosition;
};

class Constraint2D
{
public:
Constraint2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator ConstraintDistance2D() const;
operator ConstraintFriction2D() const;
operator ConstraintGear2D() const;
operator ConstraintMotor2D() const;
operator ConstraintMouse2D() const;
operator ConstraintPrismatic2D() const;
operator ConstraintPulley2D() const;
operator ConstraintRevolute2D() const;
operator ConstraintRope2D() const;
operator ConstraintWeld2D() const;
operator ConstraintWheel2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const ConstraintDistance2D() const;
operator const ConstraintFriction2D() const;
operator const ConstraintGear2D() const;
operator const ConstraintMotor2D() const;
operator const ConstraintMouse2D() const;
operator const ConstraintPrismatic2D() const;
operator const ConstraintPulley2D() const;
operator const ConstraintRevolute2D() const;
operator const ConstraintRope2D() const;
operator const ConstraintWeld2D() const;
operator const ConstraintWheel2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool collideConnected;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
/* readonly */
RigidBody2D ownerBody;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ConstraintDistance2D
{
public:
ConstraintDistance2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
float GetDampingRatio() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFrequencyHz() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetLength() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetDampingRatio(float);
void SetEnabled(bool);
void SetFrequencyHz(float);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLength(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetOtherBodyAnchor(const Vector2&);
void SetOwnerBodyAnchor(const Vector2&);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetOtherBodyAnchor() const;
const Vector2& GetOwnerBodyAnchor() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool collideConnected;
float dampingRatio;
bool enabled;
/* readonly */
bool enabledEffective;
float frequencyHz;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float length;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
Vector2 otherBodyAnchor;
/* readonly */
RigidBody2D ownerBody;
Vector2 ownerBodyAnchor;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ConstraintFriction2D
{
public:
ConstraintFriction2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetMaxForce() const;
float GetMaxTorque() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnchor(const Vector2&);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaxForce(float);
void SetMaxTorque(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetAnchor() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
Vector2 anchor;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool collideConnected;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float maxForce;
float maxTorque;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
/* readonly */
RigidBody2D ownerBody;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ConstraintGear2D
{
public:
ConstraintGear2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
Constraint2D GetOtherConstraint() const;
RigidBody2D GetOwnerBody() const;
Constraint2D GetOwnerConstraint() const;
float GetRatio() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetOtherConstraint(Constraint2D);
void SetOwnerConstraint(Constraint2D);
void SetRatio(float);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool collideConnected;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
Constraint2D otherConstraint;
/* readonly */
RigidBody2D ownerBody;
Constraint2D ownerConstraint;
float ratio;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ConstraintMotor2D
{
public:
ConstraintMotor2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
float GetAngularOffset() const;
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
float GetCorrectionFactor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetMaxForce() const;
float GetMaxTorque() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAngularOffset(float);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetCorrectionFactor(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLinearOffset(const Vector2&);
void SetMaxForce(float);
void SetMaxTorque(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetLinearOffset() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
float angularOffset;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool collideConnected;
float correctionFactor;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
Vector2 linearOffset;
float maxForce;
float maxTorque;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
/* readonly */
RigidBody2D ownerBody;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ConstraintMouse2D
{
public:
ConstraintMouse2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
float GetDampingRatio() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFrequencyHz() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetMaxForce() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetDampingRatio(float);
void SetEnabled(bool);
void SetFrequencyHz(float);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaxForce(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetTarget(const Vector2&);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetTarget() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool collideConnected;
float dampingRatio;
bool enabled;
/* readonly */
bool enabledEffective;
float frequencyHz;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float maxForce;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
/* readonly */
RigidBody2D ownerBody;
/* readonly */
int refs;
/* readonly */
bool replicated;
Vector2 target;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ConstraintPrismatic2D
{
public:
ConstraintPrismatic2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
bool GetEnableLimit() const;
bool GetEnableMotor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetLowerTranslation() const;
float GetMaxMotorForce() const;
float GetMotorSpeed() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
float GetUpperTranslation() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnchor(const Vector2&);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAxis(const Vector2&);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetEnableLimit(bool);
void SetEnableMotor(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLowerTranslation(float);
void SetMaxMotorForce(float);
void SetMotorSpeed(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetTemporary(bool);
void SetUpperTranslation(float);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetAnchor() const;
const Vector2& GetAxis() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
Vector2 anchor;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
Vector2 axis;
/* readonly */
String category;
bool collideConnected;
bool enableLimit;
bool enableMotor;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float lowerTranslation;
float maxMotorForce;
float motorSpeed;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
/* readonly */
RigidBody2D ownerBody;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
float upperTranslation;
/* readonly */
int weakRefs;
};

class ConstraintPulley2D
{
public:
ConstraintPulley2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
float GetRatio() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetOtherBodyAnchor(const Vector2&);
void SetOtherBodyGroundAnchor(const Vector2&);
void SetOwnerBodyAnchor(const Vector2&);
void SetOwnerBodyGroundAnchor(const Vector2&);
void SetRatio(float);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetOtherBodyAnchor() const;
const Vector2& GetOtherBodyGroundAnchor() const;
const Vector2& GetOwnerBodyAnchor() const;
const Vector2& GetOwnerBodyGroundAnchor() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool collideConnected;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
Vector2 otherBodyAnchor;
Vector2 otherBodyGroundAnchor;
/* readonly */
RigidBody2D ownerBody;
Vector2 ownerBodyAnchor;
Vector2 ownerBodyGroundAnchor;
float ratio;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ConstraintRevolute2D
{
public:
ConstraintRevolute2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
bool GetEnableLimit() const;
bool GetEnableMotor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetLowerAngle() const;
float GetMaxMotorTorque() const;
float GetMotorSpeed() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
float GetUpperAngle() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnchor(const Vector2&);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetEnableLimit(bool);
void SetEnableMotor(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLowerAngle(float);
void SetMaxMotorTorque(float);
void SetMotorSpeed(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetTemporary(bool);
void SetUpperAngle(float);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetAnchor() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
Vector2 anchor;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool collideConnected;
bool enableLimit;
bool enableMotor;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float lowerAngle;
float maxMotorTorque;
float motorSpeed;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
/* readonly */
RigidBody2D ownerBody;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
float upperAngle;
/* readonly */
int weakRefs;
};

class ConstraintRope2D
{
public:
ConstraintRope2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetMaxLength() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaxLength(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetOtherBodyAnchor(const Vector2&);
void SetOwnerBodyAnchor(const Vector2&);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetOtherBodyAnchor() const;
const Vector2& GetOwnerBodyAnchor() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool collideConnected;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float maxLength;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
Vector2 otherBodyAnchor;
/* readonly */
RigidBody2D ownerBody;
Vector2 ownerBodyAnchor;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ConstraintWeld2D
{
public:
ConstraintWeld2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
float GetDampingRatio() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFrequencyHz() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnchor(const Vector2&);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetDampingRatio(float);
void SetEnabled(bool);
void SetFrequencyHz(float);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetAnchor() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
Vector2 anchor;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool collideConnected;
float dampingRatio;
bool enabled;
/* readonly */
bool enabledEffective;
float frequencyHz;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
/* readonly */
RigidBody2D ownerBody;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ConstraintWheel2D
{
public:
ConstraintWheel2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
operator Constraint2D() const;
void CreateJoint();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Constraint2D GetAttachedConstraint() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCollideConnected() const;
Component GetComponent(StringHash) const;
float GetDampingRatio() const;
bool GetEnableMotor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFrequencyHz() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetMaxMotorTorque() const;
float GetMotorSpeed() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
RigidBody2D GetOtherBody() const;
RigidBody2D GetOwnerBody() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseJoint();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnchor(const Vector2&);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttachedConstraint(Constraint2D);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAxis(const Vector2&);
void SetBlockEvents(bool);
void SetCollideConnected(bool);
void SetDampingRatio(float);
void SetEnableMotor(bool);
void SetEnabled(bool);
void SetFrequencyHz(float);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaxMotorTorque(float);
void SetMotorSpeed(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOtherBody(RigidBody2D);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetAnchor() const;
const Vector2& GetAxis() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
Vector2 anchor;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
Vector2 axis;
/* readonly */
String category;
bool collideConnected;
float dampingRatio;
bool enableMotor;
bool enabled;
/* readonly */
bool enabledEffective;
float frequencyHz;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float maxMotorTorque;
float motorSpeed;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
RigidBody2D otherBody;
/* readonly */
RigidBody2D ownerBody;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class Context
{
public:
Context();
// Methods:
void CopyBaseAttributes(StringHash, StringHash);
Object CreateObject(StringHash);
VariantMap& GetEventDataMap();
EventReceiverGroup GetEventReceivers(Object, StringHash);
EventReceiverGroup GetEventReceivers(StringHash);
Object GetEventSender() const;
Object GetSubsystem(StringHash) const;
operator RefCounted() const;
int Refs() const;
void RegisterFactory(ObjectFactory);
void RegisterSubsystem(Object);
void ReleaseSDL();
void RemoveAllAttributes(StringHash);
void RemoveSubsystem(StringHash);
bool RequireSDL(uint);
void SetGlobalVar(StringHash, const Variant&);
const String& GetTypeName(StringHash) const;
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class Controls
{
public:
~Controls();
Controls();
// Methods:
Controls&  operator=(const Controls&);
bool IsDown(uint) const;
bool IsPressed(uint, const Controls&) const;
void Reset();
void Set(uint, bool = true);

// Properties:
uint buttons;
VariantMap extraData;
float pitch;
float yaw;
};

class ConvexData
{
public:
ConvexData(Model&, uint);
ConvexData(CustomGeometry&);
// Methods:
void BuildHull(Array<Vector3>);
operator CollisionGeometryData() const;
operator RefCounted() const;
int Refs() const;
int WeakRefs() const;
operator const CollisionGeometryData() const;
operator const RefCounted() const;

// Properties:
uint indexCount;
/* readonly */
int refs;
uint vertexCount;
/* readonly */
int weakRefs;
};

class CrowdAgent
{
public:
CrowdAgent();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
void DrawDebugGeometry(bool);
Vector3 GetActualVelocity() const;
int GetAgentCrowdId() const;
CrowdAgentState GetAgentState() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
Vector3 GetDesiredVelocity() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetHeight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetMaxAccel() const;
float GetMaxSpeed() const;
NavigationPushiness GetNavigationPushiness() const;
NavigationQuality GetNavigationQuality() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
uint GetObstacleAvoidanceType() const;
Vector3 GetPosition() const;
uint GetQueryFilterType() const;
float GetRadius() const;
CrowdAgentRequestedTarget GetRequestedTargetType() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
CrowdAgentTargetState GetTargetState() const;
StringHash GetType() const;
bool GetUpdateNodePosition() const;
bool HasArrived() const;
bool HasEventHandlers() const;
bool HasRequestedTarget() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInCrowd() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetTarget();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(float);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaxAccel(float);
void SetMaxSpeed(float);
void SetNavigationPushiness(NavigationPushiness);
void SetNavigationQuality(NavigationQuality);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetObstacleAvoidanceType(uint);
void SetQueryFilterType(uint);
void SetRadius(float);
void SetTargetPosition(const Vector3&);
void SetTargetVelocity(const Vector3&);
void SetTemporary(bool);
void SetUpdateNodePosition(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetTargetPosition() const;
const Vector3& GetTargetVelocity() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
/* readonly */
Vector3 actualVelocity;
/* readonly */
CrowdAgentState agentState;
bool animationEnabled;
/* readonly */
bool arrived;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
/* readonly */
Vector3 desiredVelocity;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
float height;
/* readonly */
uint id;
/* readonly */
bool inCrowd;
float maxAccel;
float maxSpeed;
NavigationPushiness navigationPushiness;
NavigationQuality navigationQuality;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
uint obstacleAvoidanceType;
/* readonly */
Vector3 position;
uint queryFilterType;
float radius;
/* readonly */
int refs;
/* readonly */
bool replicated;
/* readonly */
bool requestedTarget;
/* readonly */
CrowdAgentRequestedTarget requestedTargetType;
Vector3 targetPosition;
/* readonly */
CrowdAgentTargetState targetState;
Vector3 targetVelocity;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool updateNodePosition;
/* readonly */
int weakRefs;
};

class CrowdManager
{
public:
CrowdManager();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
const CrowdObstacleAvoidanceParams& GetObstacleAvoidanceParams(uint) const;
void DrawDebugGeometry(DebugRenderer, bool);
void DrawDebugGeometry(bool);
Vector3 FindNearestPoint(const Vector3&, int);
Array<CrowdAgent> GetAgents(Node = null, bool = true) const;
bool GetAnimationEnabled() const;
float GetAreaCost(uint, uint) const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
float GetDistanceToWall(const Vector3&, float, int);
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint16 GetExcludeFlags(uint) const;
uint GetID() const;
uint16 GetIncludeFlags(uint) const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetMaxAgentRadius() const;
uint GetMaxAgents() const;
NavigationMesh GetNavigationMesh() const;
Node GetNode() const;
uint GetNumAreas(uint) const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumObstacleAvoidanceTypes() const;
uint GetNumQueryFilterTypes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Vector3 GetRandomPoint(int);
Vector3 GetRandomPointInCircle(const Vector3&, float, int);
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
Vector3 MoveAlongSurface(const Vector3&, const Vector3&, int, int = 3);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
Vector3 Raycast(const Vector3&, const Vector3&, int);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetCrowdTarget(Node = null);
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAreaCost(uint, uint, float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCrowdTarget(const Vector3&, Node = null);
void SetCrowdVelocity(const Vector3&, Node = null);
void SetEnabled(bool);
void SetExcludeFlags(uint, uint16);
void SetGlobalVar(StringHash, const Variant&);
void SetIncludeFlags(uint, uint16);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaxAgentRadius(float);
void SetMaxAgents(uint);
void SetNavigationMesh(NavigationMesh);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetObstacleAvoidanceParams(uint, const CrowdObstacleAvoidanceParams&);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float maxAgentRadius;
uint maxAgents;
NavigationMesh navMesh;
/* readonly */
Node node;
/* readonly */
Array<uint> numAreas;
/* readonly */
uint numAttributes;
/* readonly */
uint numObstacleAvoidanceTypes;
/* readonly */
uint numQueryFilterTypes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class CrowdObstacleAvoidanceParams
{
public:
// Methods:
CrowdObstacleAvoidanceParams&  operator=(const CrowdObstacleAvoidanceParams&);

// Properties:
uint8 adaptiveDepth;
uint8 adaptiveDivs;
uint8 adaptiveRings;
uint8 gridSize;
float horizTime;
float velBias;
float weightCurVel;
float weightDesVel;
float weightSide;
float weightToi;
};

class Cursor
{
public:
Cursor();
Cursor(const String&in);
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void ApplyOSCursorShape();
operator BorderImage() const;
void BringToFront();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DefineShape(CursorShape, Image, const IntRect&, const IntVector2&);
void DefineShape(const String&, Image, const IntRect&, const IntVector2&);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
bool GetUseSystemShapes() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetSelected(bool);
void SetShape(CursorShape);
void SetShape(const String&);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetUseSystemShapes(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetShape() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
String shape;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
bool useSystemShapes;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class CursorShapeInfo
{
public:
~CursorShapeInfo();
CursorShapeInfo();
CursorShapeInfo(int);
// Methods:
CursorShapeInfo&  operator=(const CursorShapeInfo&);

// Properties:
IntVector2 hotSpot;
IntRect imageRect;
int systemCursor;
bool systemDefined;
};

class CustomGeometry
{
public:
CustomGeometry();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void BeginGeometry(uint, PrimitiveType);
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
void Clear();
void Commit();
operator Component() const;
void DefineColor(const Color&);
void DefineGeometry(uint, PrimitiveType, uint, bool, bool, bool, bool);
void DefineNormal(const Vector3&);
void DefineTangent(const Vector4&);
void DefineTexCoord(const Vector2&);
void DefineVertex(const Vector3&);
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial(uint = 0) const;
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumGeometries() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
uint GetNumVertices(uint) const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
CustomGeometryVertex GetVertex(uint, uint);
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsDynamic() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
const ResourceRefList& GetMaterialsAttr() const;
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetDynamic(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
bool SetMaterial(uint, Material);
void SetMaterialsAttr(const ResourceRefList&);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetNumGeometries(uint);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool dynamic;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
/* writeonly */
Material material;
Array<Material> materials;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
uint numGeometries;
/* readonly */
Array<uint> numVertices;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class CustomGeometryVertex
{
public:
// Methods:
CustomGeometryVertex&  operator=(const CustomGeometryVertex&);

// Properties:
uint color;
Vector3 normal;
Vector3 position;
Vector4 tangent;
Vector2 texCoord;
};

class Database
{
public:
Database();
// Methods:
DbConnection Connect(const String&);
void Disconnect(DbConnection);
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetPoolSize() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool IsPooling() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetPoolSize(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
uint poolSize;
/* readonly */
bool pooling;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class DbConnection
{
public:
// Methods:
DbResult Execute(const String&, bool useCursorEvent = false);
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
void OnEvent(Object, StringHash, VariantMap&);
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;

// Properties:
/* readonly */
String category;
/* readonly */
bool connected;
/* readonly */
String connectionString;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class DbResult
{
public:
~DbResult();
DbResult();
DbResult(const DbResult&in);
// Methods:
DbResult&  operator=(const DbResult&);

// Properties:
/* readonly */
Array<String> columns;
/* readonly */
int64 numAffectedRows;
/* readonly */
uint numColumns;
/* readonly */
uint numRows;
/* readonly */
Array<Array<Variant>> row;
};

class DebugHud
{
public:
DebugHud();
// Methods:
void ClearAppStats();
bool GetBlockEvents() const;
XMLFile GetDefaultStyle() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Text GetMemoryText() const;
uint GetMode() const;
Text GetModeText() const;
float GetProfilerInterval() const;
uint GetProfilerMaxDepth() const;
Text GetProfilerText() const;
Text GetStatsText() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool GetUseRendererStats() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
bool ResetAppStats(const String&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAppStats(const String&, const String&);
void SetAppStats(const String&, const Variant&);
void SetBlockEvents(bool);
void SetDefaultStyle(XMLFile);
void SetGlobalVar(StringHash, const Variant&);
void SetMode(uint);
void SetProfilerInterval(float);
void SetProfilerMaxDepth(uint);
void SetUseRendererStats(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void Toggle(uint);
void ToggleAll();
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update();
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
XMLFile defaultStyle;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
Text memoryText;
uint mode;
/* readonly */
Text modeText;
float profilerInterval;
uint profilerMaxDepth;
/* readonly */
Text profilerText;
/* readonly */
int refs;
/* readonly */
Text statsText;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useRendererStats;
/* readonly */
int weakRefs;
};

class DebugLine
{
public:
~DebugLine();
DebugLine();
DebugLine(const Vector3&in, const Vector3&in, uint);
// Methods:
DebugLine&  operator=(const DebugLine&);

// Properties:
uint color;
Vector3 end;
Vector3 start;
};

class DebugRenderer
{
public:
DebugRenderer();
// Methods:
void AddBoundingBox(const BoundingBox&, const Color&, bool = true, bool = false);
void AddBoundingBox(const BoundingBox&, const Matrix3x4&, const Color&, bool = true, bool = false);
void AddCircle(const Vector3&, const Vector3&, float, const Color&, int = 64, bool = true);
void AddCross(const Vector3&, float, const Color&, bool = true);
void AddCylinder(const Vector3&, float, float, const Color&, bool = true);
void AddFrustum(const Frustum&, const Color&, bool = true);
void AddLine(const Vector3&, const Vector3&, const Color&, bool = true);
void AddLine(const Vector3&, const Vector3&, uint, bool = true);
void AddNode(Node, float = 1.0f, bool = true);
void AddPolygon(const Vector3&, const Vector3&, const Vector3&, const Vector3&, const Color&, bool = true);
void AddPolygon(const Vector3&, const Vector3&, const Vector3&, const Vector3&, uint, bool = true);
void AddPolyhedron(const Polyhedron&, const Color&, bool = true);
void AddQuad(const Vector3&, float, float, const Color&, bool = true);
void AddSkeleton(const Skeleton&, const Color&, bool = true);
void AddSphere(const Sphere&, const Color&, bool = true);
void AddSphereSector(const Sphere&, const Quaternion&, float, bool, const Color&, bool = true);
void AddTriangle(const Vector3&, const Vector3&, const Vector3&, const Color&, bool = true);
void AddTriangle(const Vector3&, const Vector3&, const Vector3&, uint, bool = true);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
const Frustum& GetFrustum() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
bool GetLineAntiAlias() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasContent() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInside(const BoundingBox&) const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
const Matrix3x4& GetView() const;
const Matrix4& GetProjection() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void Render();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLineAntiAlias(bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
void SetView(Camera);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
bool lineAntiAlias;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class DebugTriangle
{
public:
~DebugTriangle();
DebugTriangle();
DebugTriangle(const Vector3&in, const Vector3&in, const Vector3&in, uint);
// Methods:
DebugTriangle&  operator=(const DebugTriangle&);

// Properties:
uint color;
Vector3 v1;
Vector3 v2;
Vector3 v3;
};

class Decal
{
public:
~Decal();
Decal();
// Methods:
Decal&  operator=(const Decal&);
void AddVertex(const DecalVertex&);
void CalculateBoundingBox();

// Properties:
BoundingBox boundingBox;
float timeToLive;
float timer;
};

class DecalSet
{
public:
DecalSet();
// Methods:
bool AddDecal(Drawable, const Vector3&, const Quaternion&, float, float, float, const Vector2&, const Vector2&, float = 0.0f, float = 0.1f, uint = M_MAX_UNSIGNED);
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
uint GetMaxIndices() const;
uint GetMaxLights() const;
uint GetMaxVertices() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumDecals() const;
uint GetNumIndices() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
uint GetNumVertices() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
bool GetOptimizeBufferSize() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllDecals();
void RemoveAttributeAnimation(const String&);
void RemoveDecals(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxIndices(uint);
void SetMaxLights(uint);
void SetMaxVertices(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOptimizeBufferSize(bool);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
Material material;
uint maxIndices;
uint maxLights;
uint maxVertices;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
uint numDecals;
/* readonly */
uint numIndices;
/* readonly */
uint numVertices;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
bool optimizeBufferSize;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class DecalVertex
{
public:
~DecalVertex();
DecalVertex();
DecalVertex(const Vector3&in, const Vector3&in);
// Methods:
DecalVertex&  operator=(const DecalVertex&);

// Properties:
Vector3 normal;
Vector3 position;
Vector4 tangent;
Vector2 texCoord;
};

class DelayedWorldTransform
{
public:
~DelayedWorldTransform();
DelayedWorldTransform();
// Methods:
DelayedWorldTransform&  operator=(const DelayedWorldTransform&);

// Properties:
Vector3 worldPosition;
Quaternion worldRotation;
};

class DelayedWorldTransform2D
{
public:
~DelayedWorldTransform2D();
DelayedWorldTransform2D();
// Methods:
DelayedWorldTransform2D&  operator=(const DelayedWorldTransform2D&);

// Properties:
Vector3 worldPosition;
Quaternion worldRotation;
};

class DepthValue
{
public:
// Methods:
DepthValue&  operator=(const DepthValue&);

// Properties:
int max;
int min;
};

class Deserializer
{
public:
// Methods:
Deserializer&  operator=(const Deserializer&);
operator File() const;
uint GetChecksum();
uint GetPosition() const;
uint GetSize() const;
operator HttpRequest() const;
bool IsEof() const;
operator NamedPipe() const;
Array<uint8> Read(uint);
bool ReadBool();
BoundingBox ReadBoundingBox();
int8 ReadByte();
Color ReadColor();
double ReadDouble();
String ReadFileID();
float ReadFloat();
int ReadInt();
int64 ReadInt64();
IntRect ReadIntRect();
IntVector2 ReadIntVector2();
IntVector3 ReadIntVector3();
String ReadLine();
Matrix3 ReadMatrix3();
Matrix3x4 ReadMatrix3x4();
Matrix4 ReadMatrix4();
uint ReadNetID();
Quaternion ReadPackedQuaternion();
Vector3 ReadPackedVector3(float);
Quaternion ReadQuaternion();
Rect ReadRect();
ResourceRef ReadResourceRef();
ResourceRefList ReadResourceRefList();
int16 ReadShort();
String ReadString();
StringHash ReadStringHash();
Array<String> ReadStringVector();
uint8 ReadUByte();
uint ReadUInt();
uint64 ReadUInt64();
uint16 ReadUShort();
uint ReadVLE();
Variant ReadVariant();
Variant ReadVariant(VariantType);
VariantMap ReadVariantMap();
Vector2 ReadVector2();
Vector3 ReadVector3();
Vector4 ReadVector4();
VectorBuffer ReadVectorBuffer(uint);
uint Seek(uint);
uint SeekRelative(int);
const String& GetName() const;
uint Tell() const;
operator const File() const;
operator const HttpRequest() const;
operator const NamedPipe() const;

// Properties:
/* readonly */
uint checksum;
/* readonly */
bool eof;
/* readonly */
String name;
/* readonly */
uint position;
/* readonly */
uint size;
};

class Dictionary
{
public:
Dictionary();
// Methods:
Dictionary&  operator=(const Dictionary&);
DictionaryValue&  operator[](const String&);
void Clear();
const DictionaryValue&  operator[](const String&) const;
void Erase(const String&);
bool Exists(const String&) const;
bool Get(const String&, void*) const;
bool Get(const String&, double&) const;
bool Get(const String&, int64&) const;
void Set(const String&, const void*);
void Set(const String&, const double&);
void Set(const String&, const int64&);

// Properties:
/* readonly */
bool empty;
/* readonly */
Array<String> keys;
/* readonly */
uint length;
};

class DictionaryValue
{
public:
~DictionaryValue();
DictionaryValue();
// Methods:
DictionaryValue&  operator=(const void*);
DictionaryValue&  operator=(double);
DictionaryValue&  operator=(int64);
};

class DirtyBits
{
public:
~DirtyBits();
DirtyBits();
DirtyBits(const DirtyBits&in);
// Methods:
DirtyBits&  operator=(const DirtyBits&);
void Clear(uint);
void ClearAll();
uint Count() const;
bool IsSet(uint) const;
void Set(uint);

// Properties:
uint8 count;
};

class Drawable
{
public:
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
operator AnimatedModel() const;
operator AnimatedSprite2D() const;
void ApplyAttributes();
operator BillboardSet() const;
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
operator Component() const;
operator CustomGeometry() const;
operator DecalSet() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable2D() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
operator Light() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
operator ParticleEmitter2D() const;
operator ParticleEmitter() const;
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
operator Renderer2D() const;
void ResetToDefault();
operator RibbonTrail() const;
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
operator Skybox() const;
operator StaticModel() const;
operator StaticModelGroup() const;
operator StaticSprite2D() const;
operator StretchableSprite2D() const;
const String& GetCategory() const;
const String& GetTypeName() const;
operator TerrainPatch() const;
operator Text3D() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator Zone() const;
operator const Animatable() const;
operator const AnimatedModel() const;
operator const AnimatedSprite2D() const;
operator const BillboardSet() const;
operator const Component() const;
operator const CustomGeometry() const;
operator const DecalSet() const;
operator const Drawable2D() const;
operator const Light() const;
operator const Object() const;
operator const ParticleEmitter2D() const;
operator const ParticleEmitter() const;
operator const RefCounted() const;
operator const Renderer2D() const;
operator const RibbonTrail() const;
operator const Serializable() const;
operator const Skybox() const;
operator const StaticModel() const;
operator const StaticModelGroup() const;
operator const StaticSprite2D() const;
operator const StretchableSprite2D() const;
operator const TerrainPatch() const;
operator const Text3D() const;
operator const Zone() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class Drawable2D
{
public:
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
operator AnimatedSprite2D() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayer() const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
int GetOrderInLayer() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
operator ParticleEmitter2D() const;
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLayer(int);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOrderInLayer(int);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
operator StaticSprite2D() const;
operator StretchableSprite2D() const;
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const AnimatedSprite2D() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const ParticleEmitter2D() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const StaticSprite2D() const;
operator const StretchableSprite2D() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
int layer;
uint lightMask;
float lodBias;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
int orderInLayer;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class DropDownList
{
public:
DropDownList();
// Methods:
void AddChild(UIElement);
void AddItem(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
operator Button() const;
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
int GetAcceleratorKey() const;
int GetAcceleratorQualifiers() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
UIElement GetItem(uint) const;
Array<UIElement> GetItems() const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
ListView GetListView() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumItems() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
UIElement GetPlaceholder() const;
UIElement GetPopup() const;
int GetPriority() const;
float GetRepeatDelay() const;
float GetRepeatRate() const;
bool GetResizePopup() const;
UIElement GetRoot() const;
UIElement GetSelectedItem() const;
uint GetSelection() const;
bool GetShowPopup() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
void InsertItem(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPopupOffset() const;
const IntVector2& GetPosition() const;
const IntVector2& GetPressedChildOffset() const;
const IntVector2& GetPressedOffset() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsPressed() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Menu() const;
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHidePopup();
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnShowPopup();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllItems();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveItem(UIElement);
void RemoveItem(uint);
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAccelerator(int, int);
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPlaceholderText(const String&);
void SetPopup(UIElement);
void SetPopupOffset(const IntVector2&);
void SetPopupOffset(int, int);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPressedChildOffset(const IntVector2&);
void SetPressedChildOffset(int, int);
void SetPressedOffset(const IntVector2&);
void SetPressedOffset(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetRepeat(float, float);
void SetRepeatDelay(float);
void SetRepeatRate(float);
void SetResizePopup(bool);
void SetSelected(bool);
void SetSelection(uint);
void SetSelectionAttr(uint);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void ShowPopup(bool);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetPlaceholderText() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Button() const;
operator const Menu() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
/* readonly */
int acceleratorKey;
/* readonly */
int acceleratorQualifiers;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
/* readonly */
Array<UIElement> items;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
/* readonly */
ListView listView;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
/* readonly */
uint numItems;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
/* readonly */
UIElement placeholder;
String placeholderText;
UIElement popup;
IntVector2 popupOffset;
IntVector2 position;
/* readonly */
bool pressed;
IntVector2 pressedChildOffset;
IntVector2 pressedOffset;
int priority;
/* readonly */
int refs;
float repeatDelay;
float repeatRate;
bool resizePopup;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
/* readonly */
UIElement selectedItem;
uint selection;
bool showPopup;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class DynamicNavigationMesh
{
public:
DynamicNavigationMesh();
// Methods:
bool AddTile(const VectorBuffer&) const;
bool Allocate(const BoundingBox&, uint);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
bool Build();
bool Build(const BoundingBox&);
bool Build(const IntVector2&, const IntVector2&);
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
void DrawDebugGeometry(bool);
Vector3 FindNearestPoint(const Vector3&, const Vector3& = Vector3 :: ONE);
Array<Vector3> FindPath(const Vector3&, const Vector3&, const Vector3& extents = Vector3 :: ONE);
float GetAgentHeight() const;
float GetAgentMaxClimb() const;
float GetAgentMaxSlope() const;
float GetAgentRadius() const;
bool GetAnimationEnabled() const;
float GetAreaCost(uint) const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
float GetCellHeight() const;
float GetCellSize() const;
Component GetComponent(StringHash) const;
float GetDetailSampleDistance() const;
float GetDetailSampleMaxError() const;
float GetDistanceToWall(const Vector3&, float, const Vector3& = Vector3 :: ONE);
bool GetDrawNavAreas() const;
bool GetDrawObstacles() const;
bool GetDrawOffMeshConnections() const;
float GetEdgeMaxError() const;
float GetEdgeMaxLength() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetMaxLayers() const;
uint GetMaxObstacles() const;
String GetMeshName() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
IntVector2 GetNumTiles() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
NavmeshPartitionType GetPartitionType() const;
Vector3 GetRandomPoint();
Vector3 GetRandomPointInCircle(const Vector3&, float, const Vector3& = Vector3 :: ONE);
float GetRegionMergeSize() const;
float GetRegionMinSize() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
BoundingBox GetTileBoundingBox(const IntVector2&) const;
VectorBuffer GetTileData(const IntVector2&) const;
IntVector2 GetTileIndex(const Vector3&) const;
int GetTileSize() const;
StringHash GetType() const;
BoundingBox GetWorldBoundingBox() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTile(const IntVector2&) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInitialized() const;
bool IsInstanceOf(StringHash) const;
bool IsObstacleInTile(Obstacle, const IntVector2&) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
Vector3 MoveAlongSurface(const Vector3&, const Vector3&, const Vector3& = Vector3 :: ONE, int = 3);
operator NavigationMesh() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
Vector3 Raycast(const Vector3&, const Vector3&, const Vector3& = Vector3 :: ONE);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllTiles();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void RemoveTile(const IntVector2&);
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAgentHeight(float);
void SetAgentMaxClimb(float);
void SetAgentMaxSlope(float);
void SetAgentRadius(float);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAreaCost(uint, float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCellHeight(float);
void SetCellSize(float);
void SetDetailSampleDistance(float);
void SetDetailSampleMaxError(float);
void SetDrawNavAreas(bool);
void SetDrawObstacles(bool);
void SetDrawOffMeshConnections(bool);
void SetEdgeMaxError(float);
void SetEdgeMaxLength(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaxLayers(uint);
void SetMaxObstacles(uint);
void SetMeshName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetPadding(const Vector3&);
void SetPartitionType(NavmeshPartitionType);
void SetRegionMergeSize(float);
void SetRegionMinSize(float);
void SetTemporary(bool);
void SetTileSize(int);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetPadding() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const NavigationMesh() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
float agentHeight;
float agentMaxClimb;
float agentMaxSlope;
float agentRadius;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
/* readonly */
String category;
float cellHeight;
float cellSize;
float detailSampleDistance;
float detailSampleMaxError;
bool drawNavAreas;
bool drawObstacles;
bool drawOffMeshConnections;
float edgeMaxError;
float edgeMaxLength;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool initialized;
uint maxLayers;
uint maxObstacles;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
IntVector2 numTiles;
ObjectAnimation objectAnimation;
Vector3 padding;
NavmeshPartitionType partitionType;
/* readonly */
int refs;
float regionMergeSize;
float regionMinSize;
/* readonly */
bool replicated;
bool temporary;
int tileSize;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
};

class Engine
{
public:
Engine();
// Methods:
void ApplyFrameLimit();
Console CreateConsole();
DebugHud CreateDebugHud();
void DumpMemory();
void DumpProfiler();
void DumpResources(bool = false);
void Exit();
bool GetAutoExit() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
int GetMaxFps() const;
int GetMaxInactiveFps() const;
int GetMinFps() const;
float GetNextTimeStep() const;
bool GetPauseMinimized() const;
Object GetSubsystem(StringHash) const;
int GetTimeStepSmoothing() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool Initialize(const VariantMap&);
bool InitializeResourceCache(const VariantMap&, bool = true);
bool IsExiting() const;
bool IsHeadless() const;
bool IsInitialized() const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void Render();
void RunFrame();
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAutoExit(bool);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMaxFps(int);
void SetMaxInactiveFps(int);
void SetMinFps(int);
void SetNextTimeStep(float);
void SetPauseMinimized(bool);
void SetTimeStepSmoothing(int);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update();
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
bool autoExit;
/* readonly */
String category;
/* readonly */
bool exiting;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool headless;
/* readonly */
bool initialized;
int maxFps;
int maxInactiveFps;
int minFps;
bool pauseMinimized;
/* readonly */
int refs;
int timeStepSmoothing;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class EventProfiler
{
public:
EventProfiler();
// Methods:
void BeginBlock(StringHash);
void BeginFrame();
void BeginInterval();
void EndBlock();
void EndFrame();
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator Profiler() const;
operator RefCounted() const;
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
const String& GetCategory() const;
const String& GetTypeName() const;
const String& PrintData(bool = false, bool = false, uint = M_MAX_UNSIGNED) const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const Profiler() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class EventReceiverGroup
{
public:
EventReceiverGroup();
// Methods:
void Add(Object);
void BeginSendEvent();
void EndSendEvent();
operator RefCounted() const;
int Refs() const;
void Remove(Object);
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class File
{
public:
File();
File(const String&in, FileMode = FILE_READ);
File(PackageFile&, const String&in);
// Methods:
void Close();
operator Deserializer() const;
void Flush();
bool GetBlockEvents() const;
uint GetChecksum();
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FileMode GetMode() const;
uint GetPosition() const;
uint GetSize() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEof() const;
bool IsInstanceOf(StringHash) const;
bool IsOpen() const;
bool IsPackaged() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
bool Open(PackageFile, const String&);
bool Open(const String&, FileMode = FILE_READ);
Array<uint8> Read(uint);
bool ReadBool();
BoundingBox ReadBoundingBox();
int8 ReadByte();
Color ReadColor();
double ReadDouble();
String ReadFileID();
float ReadFloat();
int ReadInt();
int64 ReadInt64();
IntRect ReadIntRect();
IntVector2 ReadIntVector2();
IntVector3 ReadIntVector3();
String ReadLine();
Matrix3 ReadMatrix3();
Matrix3x4 ReadMatrix3x4();
Matrix4 ReadMatrix4();
uint ReadNetID();
Quaternion ReadPackedQuaternion();
Vector3 ReadPackedVector3(float);
Quaternion ReadQuaternion();
Rect ReadRect();
ResourceRef ReadResourceRef();
ResourceRefList ReadResourceRefList();
int16 ReadShort();
String ReadString();
StringHash ReadStringHash();
Array<String> ReadStringVector();
uint8 ReadUByte();
uint ReadUInt();
uint64 ReadUInt64();
uint16 ReadUShort();
uint ReadVLE();
Variant ReadVariant();
Variant ReadVariant(VariantType);
VariantMap ReadVariantMap();
Vector2 ReadVector2();
Vector3 ReadVector3();
Vector4 ReadVector4();
VectorBuffer ReadVectorBuffer(uint);
operator RefCounted() const;
int Refs() const;
uint Seek(uint);
uint SeekRelative(int);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializer() const;
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetName(const String&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
uint Tell() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
uint Write(Array<uint8>);
bool WriteBool(bool);
bool WriteBoundingBox(const BoundingBox&);
bool WriteByte(int8);
bool WriteColor(const Color&);
bool WriteDouble(double);
bool WriteFileID(const String&);
bool WriteFloat(float);
bool WriteInt(int);
bool WriteInt64(int64);
bool WriteIntRect(const IntRect&);
bool WriteIntVector2(const IntVector2&);
bool WriteIntVector3(const IntVector3&);
bool WriteLine(const String&);
bool WriteMatrix3(const Matrix3&);
bool WriteMatrix3x4(const Matrix3x4&);
bool WriteMatrix4(const Matrix4&);
bool WriteNetID(uint);
bool WritePackedQuaternion(const Quaternion&);
bool WritePackedVector3(const Vector3&, float);
bool WriteQuaternion(const Quaternion&);
bool WriteRect(const Rect&);
bool WriteResourceRef(const ResourceRef&);
bool WriteResourceRefList(const ResourceRefList&);
bool WriteShort(int16);
bool WriteString(const String&);
bool WriteStringHash(const StringHash&);
bool WriteStringVector(Array<String>);
bool WriteUByte(uint8);
bool WriteUInt(uint);
bool WriteUInt64(uint64);
bool WriteUShort(uint16);
bool WriteVLE(uint);
bool WriteVariant(const Variant&);
bool WriteVariantData(const Variant&);
bool WriteVariantMap(const VariantMap&);
bool WriteVector2(const Vector2&);
bool WriteVector3(const Vector3&);
bool WriteVector4(const Vector4&);
bool WriteVectorBuffer(const VectorBuffer&);
operator const Deserializer() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializer() const;

// Properties:
/* readonly */
String category;
/* readonly */
uint checksum;
/* readonly */
bool eof;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
FileMode mode;
String name;
/* readonly */
bool open;
/* readonly */
bool packaged;
/* readonly */
uint position;
/* readonly */
int refs;
/* readonly */
uint size;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class FileSelector
{
public:
FileSelector();
// Methods:
bool GetBlockEvents() const;
Button GetCancelButton() const;
Button GetCloseButton() const;
XMLFile GetDefaultStyle() const;
bool GetDirectoryMode() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
ListView GetFileList() const;
LineEdit GetFileNameEdit() const;
uint GetFilterIndex() const;
DropDownList GetFilterList() const;
Button GetOKButton() const;
LineEdit GetPathEdit() const;
Object GetSubsystem(StringHash) const;
Text GetTitleText() const;
StringHash GetType() const;
Window GetWindow() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetButtonTexts(const String&, const String&);
void SetDefaultStyle(XMLFile);
void SetDirectoryMode(bool);
void SetFileName(const String&);
void SetFilters(Array<String>, uint);
void SetGlobalVar(StringHash, const Variant&);
void SetPath(const String&);
void SetTitle(const String&);
const String& GetCategory() const;
const String& GetFileName() const;
const String& GetFilter() const;
const String& GetPath() const;
const String& GetTitle() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdateElements();
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
Button cancelButton;
/* readonly */
String category;
XMLFile defaultStyle;
bool directoryMode;
/* readonly */
ListView fileList;
String fileName;
/* readonly */
LineEdit fileNameEdit;
/* readonly */
String filter;
/* readonly */
uint filterIndex;
/* readonly */
DropDownList filterList;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
Button okButton;
String path;
/* readonly */
LineEdit pathEdit;
/* readonly */
int refs;
String title;
/* readonly */
Text titleText;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
/* readonly */
Window window;
};

class FileSelectorEntry
{
public:
~FileSelectorEntry();
FileSelectorEntry();
// Methods:
FileSelectorEntry&  operator=(const FileSelectorEntry&);

// Properties:
bool directory;
String name;
};

class FileSystem
{
public:
FileSystem();
// Methods:
bool CheckAccess(const String&) const;
bool Copy(const String&, const String&);
bool CreateDir(const String&);
bool Delete(const String&);
bool DirExists(const String&) const;
bool FileExists(const String&) const;
String GetAppPreferencesDir(const String&, const String&) const;
bool GetBlockEvents() const;
String GetCurrentDir() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
bool GetExecuteConsoleCommands() const;
uint GetLastModifiedTime(const String&) const;
String GetProgramDir() const;
Object GetSubsystem(StringHash) const;
String GetTemporaryDir() const;
StringHash GetType() const;
String GetUserDocumentsDir() const;
bool HasEventHandlers() const;
bool HasRegisteredPaths() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RegisterPath(const String&);
bool Rename(const String&, const String&);
Array<String> ScanDir(const String&, const String&, uint, bool) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
bool SetCurrentDir(const String&);
void SetExecuteConsoleCommands(bool);
void SetGlobalVar(StringHash, const Variant&);
bool SetLastModifiedTime(const String&, uint);
const String& GetCategory() const;
const String& GetTypeName() const;
int SystemCommand(const String&, bool = false);
uint SystemCommandAsync(const String&);
bool SystemOpen(const String&, const String& = String :: EMPTY);
int SystemRun(const String&, Array<String>);
uint SystemRunAsync(const String&, Array<String>);
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
String currentDir;
bool executeConsoleCommands;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
String programDir;
/* readonly */
int refs;
/* readonly */
String temporaryDir;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
String userDocumentsDir;
/* readonly */
int weakRefs;
};

class FileWatcher
{
public:
FileWatcher();
// Methods:
void AddChange(const String&);
bool GetBlockEvents() const;
float GetDelay() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
bool GetNextChange(String&);
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool IsStarted() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
bool Run();
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetDelay(float);
void SetGlobalVar(StringHash, const Variant&);
void SetPriority(int);
bool StartWatching(const String&, bool);
void Stop();
void StopWatching();
const String& GetCategory() const;
const String& GetPath() const;
const String& GetTypeName() const;
void ThreadFunction();
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class FocusParameters
{
public:
FocusParameters();
FocusParameters(bool, bool, bool, float, float);
// Methods:
FocusParameters&  operator=(const FocusParameters&);
void Validate();

// Properties:
bool autoSize;
bool focus;
float minView;
bool nonUniform;
float quantize;
};

class Font
{
public:
Font();
// Methods:
bool BeginLoad(Deserializer&);
bool EndLoad();
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FontFace GetFace(float);
FontType GetFontType() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
Object GetSubsystem(StringHash) const;
IntVector2 GetTotalGlyphOffset(float) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
const IntVector2& GetAbsoluteGlyphOffset() const;
bool IsInstanceOf(StringHash) const;
bool IsSDFFont() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ReleaseFaces();
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
bool SaveXML(File, int, bool usedGlyphs = false, const String& indentation = "\t");
bool SaveXML(Serializer&, int, bool = false, const String& = "\t");
bool SaveXML(VectorBuffer&, int, bool usedGlyphs = false, const String& indentation = "\t");
bool SaveXML(const String&, int, bool usedGlyphs = false, const String& indentation = "\t");
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAbsoluteGlyphOffset(const IntVector2&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
void SetScaledGlyphOffset(const Vector2&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetScaledGlyphOffset() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
IntVector2 absoluteGlyphOffset;
/* readonly */
String category;
/* readonly */
FontType fontType;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
Vector2 scaledGlyphOffset;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class FontFace
{
public:
// Methods:
operator FontFaceBitmap() const;
operator FontFaceFreeType() const;
float GetKerning(uint, uint) const;
float GetPointSize() const;
float GetRowHeight() const;
Array<Texture2D> GetTextures() const;
bool HasMutableGlyphs() const;
bool IsDataLost() const;
operator RefCounted() const;
int Refs() const;
int WeakRefs() const;
operator const FontFaceBitmap() const;
operator const FontFaceFreeType() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class FontFaceBitmap
{
public:
FontFaceBitmap(Font&);
// Methods:
operator FontFace() const;
float GetKerning(uint, uint) const;
float GetPointSize() const;
float GetRowHeight() const;
Array<Texture2D> GetTextures() const;
bool HasMutableGlyphs() const;
bool IsDataLost() const;
bool Load(FontFace, bool);
operator RefCounted() const;
int Refs() const;
bool Save(Serializer&, int, const String& = "\t");
int WeakRefs() const;
operator const FontFace() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class FontFaceFreeType
{
public:
FontFaceFreeType(Font&);
// Methods:
operator FontFace() const;
float GetKerning(uint, uint) const;
float GetPointSize() const;
float GetRowHeight() const;
Array<Texture2D> GetTextures() const;
bool HasMutableGlyphs() const;
bool IsDataLost() const;
operator RefCounted() const;
int Refs() const;
int WeakRefs() const;
operator const FontFace() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class FontGlyph
{
public:
~FontGlyph();
FontGlyph();
// Methods:
FontGlyph&  operator=(const FontGlyph&);

// Properties:
float advanceX;
float height;
float offsetX;
float offsetY;
uint page;
int16 texHeight;
int16 texWidth;
bool used;
float width;
int16 x;
int16 y;
};

class FrameInfo
{
public:
~FrameInfo();
FrameInfo();
// Methods:
FrameInfo&  operator=(const FrameInfo&);

// Properties:
uint frameNumber;
float timeStep;
IntVector2 viewSize;
};

class Frustum
{
public:
~Frustum();
Frustum();
Frustum(const Frustum&in);
// Methods:
Frustum&  operator=(const Frustum&);
void Define(const BoundingBox&, const Matrix3x4& = Matrix3x4 :: IDENTITY);
void Define(const Matrix4&);
void Define(const Vector3&, const Vector3&, const Matrix3x4& = Matrix3x4 :: IDENTITY);
void Define(float, float, float, float, float, const Matrix3x4& = Matrix3x4 :: IDENTITY);
void DefineOrtho(float, float, float, float, float, const Matrix3x4& = Matrix3x4 :: IDENTITY);
void DefineSplit(const Matrix4&, float, float);
float Distance(const Vector3&) const;
Intersection IsInside(const BoundingBox&) const;
Intersection IsInside(const Sphere&) const;
Intersection IsInside(const Vector3&) const;
Intersection IsInsideFast(const BoundingBox&) const;
Intersection IsInsideFast(const Sphere&) const;
Rect Projected(const Matrix4&) const;
void Transform(const Matrix3&);
void Transform(const Matrix3x4&);
Frustum Transformed(const Matrix3&) const;
Frustum Transformed(const Matrix3x4&) const;
void UpdatePlanes();

// Properties:
/* readonly */
Array<Vector3> vertices;
};

class GImpactMeshData
{
public:
GImpactMeshData(Model&, uint);
GImpactMeshData(CustomGeometry&);
// Methods:
operator CollisionGeometryData() const;
operator RefCounted() const;
int Refs() const;
int WeakRefs() const;
operator const CollisionGeometryData() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class GPUObject
{
public:
~GPUObject();
GPUObject(Graphics@);
// Methods:
GPUObject&  operator=(const GPUObject&);
void ClearDataLost();
uint GetGPUObjectName() const;
Graphics GetGraphics() const;
bool HasPendingData() const;
bool IsDataLost() const;
void OnDeviceLost();
void OnDeviceReset();
void Release();

// Properties:
/* readonly */
bool dataLost;
};

class Geometry
{
public:
Geometry();
// Methods:
void Draw(Graphics);
bool GetBlockEvents() const;
uint16 GetBufferHash() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
IndexBuffer GetIndexBuffer() const;
uint GetIndexCount() const;
uint GetIndexStart() const;
float GetLodDistance() const;
uint GetNumVertexBuffers() const;
PrimitiveType GetPrimitiveType() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
VertexBuffer GetVertexBuffer(uint) const;
Array<VertexBuffer> GetVertexBuffers() const;
uint GetVertexCount() const;
uint GetVertexStart() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEmpty() const;
bool IsInside(const Ray&) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
bool SetDrawRange(PrimitiveType, uint, uint, bool = true);
bool SetDrawRange(PrimitiveType, uint, uint, uint, uint, bool = true);
void SetGlobalVar(StringHash, const Variant&);
void SetIndexBuffer(IndexBuffer);
void SetLodDistance(float);
bool SetNumVertexBuffers(uint);
bool SetVertexBuffer(uint, VertexBuffer);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
/* readonly */
bool empty;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
IndexBuffer indexBuffer;
/* readonly */
uint indexCount;
/* readonly */
uint indexStart;
float lodDistance;
uint numVertexBuffers;
/* readonly */
PrimitiveType primitiveType;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
Array<VertexBuffer> vertexBuffers;
/* readonly */
uint vertexCount;
/* readonly */
uint vertexStart;
/* readonly */
int weakRefs;
};

class GeometryDesc
{
public:
~GeometryDesc();
GeometryDesc();
// Methods:
GeometryDesc&  operator=(const GeometryDesc&);

// Properties:
uint ibRef;
uint indexCount;
uint indexStart;
PrimitiveType type;
uint vbRef;
};

class Graphics
{
public:
Graphics();
// Methods:
void BeginDumpShaders(const String&);
bool BeginFrame();
void CleanupScratchBuffers();
void CleanupShaderPrograms(ShaderVariation);
void Clear(uint, const Color& = Color ( 0.0f , 0.0f , 0.0f , 0.0f ), float = 1.0f, uint = 0);
void ClearParameterSource(ShaderParameterGroup);
void ClearParameterSources();
void ClearTransformSources();
void Close();
void Draw(PrimitiveType, uint, uint);
void Draw(PrimitiveType, uint, uint, uint, uint);
void Draw(PrimitiveType, uint, uint, uint, uint, uint);
void DrawInstanced(PrimitiveType, uint, uint, uint, uint, uint);
void DrawInstanced(PrimitiveType, uint, uint, uint, uint, uint, uint);
void EndDumpShaders();
void EndFrame();
uint FindBestResolutionIndex(int, int, int, int) const;
bool GetAlphaToCoverage() const;
bool GetAnisotropySupport() const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBorderless() const;
bool GetColorWrite() const;
CullMode GetCullMode() const;
int GetCurrentMonitor() const;
uint GetDefaultTextureAnisotropy() const;
TextureFilterMode GetDefaultTextureFilterMode() const;
bool GetDeferredSupport() const;
float GetDepthConstantBias() const;
float GetDepthSlopeScaledBias() const;
RenderSurface GetDepthStencil() const;
CompareMode GetDepthTest() const;
bool GetDepthWrite() const;
IntVector2 GetDesktopResolution(int) const;
Vector3 GetDisplayDPI(int = 0) const;
bool GetDither() const;
uint GetDummyColorFormat() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FillMode GetFillMode() const;
bool GetFlushGPU() const;
bool GetForceGL2() const;
uint GetFormat(CompressedFormat) const;
bool GetFullscreen() const;
bool GetHardwareShadowSupport() const;
int GetHeight() const;
bool GetHighDPI() const;
uint GetHiresShadowMapFormat() const;
IndexBuffer GetIndexBuffer() const;
bool GetInstancingSupport() const;
bool GetLightPrepassSupport() const;
bool GetLineAntiAlias() const;
bool GetMaximized() const;
int GetMonitor() const;
int GetMonitorCount() const;
int GetMultiSample() const;
Array<int> GetMultiSampleLevels() const;
uint GetNumBatches() const;
uint GetNumPrimitives() const;
ShaderVariation GetPixelShader() const;
bool GetReadableDepthSupport() const;
int GetRefreshRate() const;
RenderSurface GetRenderTarget(uint) const;
IntVector2 GetRenderTargetDimensions() const;
bool GetResizable() const;
Array<IntVector3> GetResolutions(int) const;
bool GetSRGB() const;
bool GetSRGBSupport() const;
bool GetSRGBWriteSupport() const;
bool GetScissorTest() const;
ShaderVariation GetShader(ShaderType, const String&, const String& = String :: EMPTY) const;
uint GetShadowMapFormat() const;
IntVector2 GetSize() const;
uint GetStencilCompareMask() const;
StencilOp GetStencilFail() const;
StencilOp GetStencilPass() const;
uint GetStencilRef() const;
bool GetStencilTest() const;
CompareMode GetStencilTestMode() const;
uint GetStencilWriteMask() const;
StencilOp GetStencilZFail() const;
Object GetSubsystem(StringHash) const;
Texture GetTexture(uint) const;
TextureUnit GetTextureUnit(const String&);
bool GetTripleBuffer() const;
StringHash GetType() const;
bool GetUseClipPlane() const;
bool GetVSync() const;
VertexBuffer GetVertexBuffer(uint) const;
ShaderVariation GetVertexShader() const;
IntRect GetViewport() const;
int GetWidth() const;
IntVector2 GetWindowPosition() const;
bool HasEventHandlers() const;
bool HasShaderParameter(StringHash);
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTextureUnit(TextureUnit);
const IntRect& GetScissorRect() const;
bool IsDeviceLost() const;
bool IsInitialized() const;
bool IsInstanceOf(StringHash) const;
void Maximize();
void Minimize();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnWindowMoved();
void OnWindowResized();
void PrecacheShaders(Deserializer&);
void PrecacheShaders(File);
void PrecacheShaders(VectorBuffer&);
void Raise() const;
operator RefCounted() const;
int Refs() const;
void ResetDepthStencil();
void ResetRenderTarget(uint);
void ResetRenderTargets();
bool ResolveToTexture(Texture2D);
bool ResolveToTexture(Texture2D, const IntRect&);
bool ResolveToTexture(TextureCube);
const ScreenModeParams& GetScreenModeParams() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlendMode(BlendMode, bool = false);
void SetBlockEvents(bool);
void SetClipPlane(bool, const Plane& = Plane :: UP, const Matrix3x4& = Matrix3x4 :: IDENTITY, const Matrix4& = Matrix4 :: IDENTITY);
void SetColorWrite(bool);
void SetCullMode(CullMode);
void SetDefaultTextureAnisotropy(uint);
void SetDefaultTextureFilterMode(TextureFilterMode);
bool SetDefaultWindowModes(int, int, const ScreenModeParams&);
void SetDepthBias(float, float);
void SetDepthStencil(RenderSurface);
void SetDepthStencil(Texture2D);
void SetDepthTest(CompareMode);
void SetDepthWrite(bool);
void SetDither(bool);
void SetFillMode(FillMode);
void SetFlushGPU(bool);
void SetForceGL2(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetIndexBuffer(IndexBuffer);
void SetLineAntiAlias(bool);
bool SetMode(int, int);
bool SetMode(int, int, bool, bool, bool, bool, bool, bool, int, int, int);
void SetOrientations(const String&);
void SetRenderTarget(uint, RenderSurface);
void SetRenderTarget(uint, Texture2D);
void SetSRGB(bool);
void SetScissorTest(bool, const IntRect&);
void SetScissorTest(bool, const Rect& = Rect :: FULL, bool = true);
bool SetScreenMode(int, int);
bool SetScreenMode(int, int, const ScreenModeParams&, bool = false);
void SetShaderCacheDir(const String&);
void SetShaderParameter(StringHash, bool);
void SetShaderParameter(StringHash, const Color&);
void SetShaderParameter(StringHash, const Matrix3&);
void SetShaderParameter(StringHash, const Matrix3x4&);
void SetShaderParameter(StringHash, const Matrix4&);
void SetShaderParameter(StringHash, const Variant&);
void SetShaderParameter(StringHash, const Vector2&);
void SetShaderParameter(StringHash, const Vector3&);
void SetShaderParameter(StringHash, const Vector4&);
void SetShaderParameter(StringHash, float);
void SetShaderParameter(StringHash, int);
void SetShaders(ShaderVariation, ShaderVariation);
void SetStencilTest(bool, CompareMode = CMP_ALWAYS, StencilOp = OP_KEEP, StencilOp = OP_KEEP, StencilOp = OP_KEEP, uint = 0, uint = M_MAX_UNSIGNED, uint = M_MAX_UNSIGNED);
void SetTexture(uint, Texture);
void SetVertexBuffer(VertexBuffer);
bool SetVertexBuffers(Array<VertexBuffer>, uint = 0);
void SetViewport(const IntRect&);
void SetWindowIcon(Image);
bool SetWindowModes(const WindowModeParams&, const WindowModeParams&, bool = false);
void SetWindowPosition(const IntVector2&);
void SetWindowPosition(int, int);
void SetWindowTitle(const String&);
const String& GetApiName() const;
const String& GetCategory() const;
const String& GetOrientations() const;
const String& GetShaderCacheDir() const;
const String& GetTextureUnitName(TextureUnit);
const String& GetTypeName() const;
const String& GetWindowTitle() const;
bool TakeScreenShot(Image&);
bool ToggleFullscreen();
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String apiName;
/* readonly */
bool borderless;
/* readonly */
String category;
/* readonly */
int currentMonitor;
/* readonly */
bool deferredSupport;
/* readonly */
Array<IntVector2> desktopResolution;
/* readonly */
bool deviceLost;
/* readonly */
Array<Vector3> displayDPI;
bool dither;
bool flushGPU;
/* readonly */
bool fullscreen;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hardwareShadowSupport;
/* readonly */
int height;
/* readonly */
bool initialized;
/* readonly */
bool instancingSupport;
/* readonly */
bool lightPrepassSupport;
/* readonly */
bool maximized;
/* readonly */
int monitorCount;
/* readonly */
int multiSample;
/* readonly */
Array<int> multiSampleLevels;
/* readonly */
uint numBatches;
/* readonly */
uint numPrimitives;
String orientations;
/* readonly */
bool readableDepthSupport;
/* readonly */
int refs;
/* readonly */
bool resizable;
/* readonly */
Array<Array<IntVector3>> resolutions;
bool sRGB;
/* readonly */
bool sRGBSupport;
/* readonly */
bool sRGBWriteSupport;
String shaderCacheDir;
/* readonly */
IntVector2 size;
/* readonly */
bool tripleBuffer;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
bool vSync;
/* readonly */
int weakRefs;
/* readonly */
int width;
/* writeonly */
Image windowIcon;
IntVector2 windowPosition;
String windowTitle;
};

class HashBase
{
public:
~HashBase();
HashBase();
// Methods:
HashBase&  operator=(const HashBase&);
bool Empty() const;
uint NumBuckets() const;
uint Size() const;
void Swap(HashBase&);

// Constants:
static const uint MAX_LOAD_FACTOR;
static const uint MIN_BUCKETS;
};

class HashIteratorBase
{
public:
~HashIteratorBase();
HashIteratorBase();
// Methods:
HashIteratorBase&  operator=(const HashIteratorBase&);
bool  operator==(const HashIteratorBase&) const;
void GotoNext();
void GotoPrev();
};

class HashNodeBase
{
public:
~HashNodeBase();
HashNodeBase();
// Methods:
HashNodeBase&  operator=(const HashNodeBase&);
};

class HeightfieldData
{
public:
HeightfieldData(Terrain&, uint);
// Methods:
operator CollisionGeometryData() const;
operator RefCounted() const;
int Refs() const;
int WeakRefs() const;
operator const CollisionGeometryData() const;
operator const RefCounted() const;

// Properties:
float maxHeight;
float minHeight;
/* readonly */
int refs;
IntVector2 size;
Vector3 spacing;
/* readonly */
int weakRefs;
};

class HiresTimer
{
public:
~HiresTimer();
HiresTimer();
// Methods:
HiresTimer&  operator=(const HiresTimer&);
int64 GetUSec(bool);
void Reset();
};

class HttpRequest
{
public:
HttpRequest(const String&in, const String&in, String[]&, const String&in);
// Methods:
operator Deserializer() const;
uint GetAvailableSize() const;
uint GetChecksum();
String GetError() const;
uint GetPosition() const;
uint GetSize() const;
HttpRequestState GetState() const;
bool IsEof() const;
bool IsOpen() const;
bool IsStarted() const;
Array<uint8> Read(uint);
bool ReadBool();
BoundingBox ReadBoundingBox();
int8 ReadByte();
Color ReadColor();
double ReadDouble();
String ReadFileID();
float ReadFloat();
int ReadInt();
int64 ReadInt64();
IntRect ReadIntRect();
IntVector2 ReadIntVector2();
IntVector3 ReadIntVector3();
String ReadLine();
Matrix3 ReadMatrix3();
Matrix3x4 ReadMatrix3x4();
Matrix4 ReadMatrix4();
uint ReadNetID();
Quaternion ReadPackedQuaternion();
Vector3 ReadPackedVector3(float);
Quaternion ReadQuaternion();
Rect ReadRect();
ResourceRef ReadResourceRef();
ResourceRefList ReadResourceRefList();
int16 ReadShort();
String ReadString();
StringHash ReadStringHash();
Array<String> ReadStringVector();
uint8 ReadUByte();
uint ReadUInt();
uint64 ReadUInt64();
uint16 ReadUShort();
uint ReadVLE();
Variant ReadVariant();
Variant ReadVariant(VariantType);
VariantMap ReadVariantMap();
Vector2 ReadVector2();
Vector3 ReadVector3();
Vector4 ReadVector4();
VectorBuffer ReadVectorBuffer(uint);
operator RefCounted() const;
int Refs() const;
bool Run();
uint Seek(uint);
uint SeekRelative(int);
void SetPriority(int);
void Stop();
const String& GetName() const;
const String& GetURL() const;
const String& GetVerb() const;
uint Tell() const;
void ThreadFunction();
int WeakRefs() const;
operator const Deserializer() const;
operator const RefCounted() const;

// Properties:
/* readonly */
uint availableSize;
/* readonly */
uint checksum;
/* readonly */
bool eof;
/* readonly */
String error;
/* readonly */
String name;
/* readonly */
bool open;
/* readonly */
uint position;
/* readonly */
int refs;
/* readonly */
uint size;
/* readonly */
HttpRequestState state;
/* readonly */
String url;
/* readonly */
String verb;
/* readonly */
int weakRefs;
};

class IKConstraint
{
public:
IKConstraint();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
float GetStiffness() const;
float GetStretchiness() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLengthConstraints(const Vector2&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetStiffness(float);
void SetStretchiness(float);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetLengthConstraints() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class IKEffector
{
public:
IKEffector();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
void DrawDebugGeometry(bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
uint GetChainLength() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetINHERIT_PARENT_ROTATION() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetRotationDecay() const;
float GetRotationWeight() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
Node GetTargetNode() const;
Vector3 GetTargetRotationEuler() const;
StringHash GetType() const;
bool GetWEIGHT_NLERP() const;
float GetWeight() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
const Quaternion& GetTargetRotation() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetChainLength(uint);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetINHERIT_PARENT_ROTATION(bool);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetRotationDecay(float);
void SetRotationWeight(float);
void SetTargetName(const String&);
void SetTargetNode(Node);
void SetTargetPosition(const Vector3&);
void SetTargetRotation(const Quaternion&);
void SetTargetRotationEuler(const Vector3&);
void SetTemporary(bool);
void SetWEIGHT_NLERP(bool);
void SetWeight(float);
const String& GetCategory() const;
const String& GetTargetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetTargetPosition() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
uint chainLength;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
float rotationDecay;
float rotationWeight;
String targetName;
Node targetNode;
Vector3 targetPosition;
Quaternion targetRotation;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
float weight;
};

class IKSolver
{
public:
IKSolver();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyActivePoseToScene();
void ApplyAttributes();
void ApplyOriginalPoseToActivePose();
void ApplyOriginalPoseToScene();
void ApplySceneToActivePose();
void ApplySceneToOriginalPose();
void CalculateJointRotations();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
void DrawDebugGeometry(bool);
bool GetAUTO_SOLVE() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCONSTRAINTS() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
bool GetJOINT_ROTATIONS() const;
uint GetMaximumIterations() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
bool GetTARGET_ROTATIONS() const;
float GetTolerance() const;
StringHash GetType() const;
bool GetUPDATE_ACTIVE_POSE() const;
bool GetUPDATE_ORIGINAL_POSE() const;
bool GetUSE_ORIGINAL_POSE() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
void RebuildChainTrees();
void RecalculateSegmentLengths();
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAUTO_SOLVE(bool);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCONSTRAINTS(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetJOINT_ROTATIONS(bool);
void SetMaximumIterations(uint);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTARGET_ROTATIONS(bool);
void SetTemporary(bool);
void SetTolerance(float);
void SetUPDATE_ACTIVE_POSE(bool);
void SetUPDATE_ORIGINAL_POSE(bool);
void SetUSE_ORIGINAL_POSE(bool);
void Solve();
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool AUTO_SOLVE;
bool CONSTRAINTS;
bool JOINT_ROTATIONS;
bool TARGET_ROTATIONS;
bool UPDATE_ACTIVE_POSE;
bool UPDATE_ORIGINAL_POSE;
bool USE_ORIGINAL_POSE;
IKAlgorithm algorithm;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
uint maximumIterations;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
float tolerance;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class Image
{
public:
Image();
// Methods:
bool BeginLoad(Deserializer&);
void CleanupLevels();
void Clear(const Color&);
void ClearInt(uint);
Image ConvertToRGBA() const;
bool EndLoad();
bool FlipHorizontal();
bool FlipVertical();
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
uint GetComponents() const;
CompressedFormat GetCompressedFormat() const;
CompressedLevel GetCompressedLevel(uint) const;
Image GetDecompressedImage() const;
int GetDepth() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
int GetHeight() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
Image GetNextLevel() const;
Image GetNextSibling() const;
uint GetNumCompressedLevels() const;
Color GetPixel(int, int) const;
Color GetPixel(int, int, int) const;
Color GetPixelBilinear(float, float) const;
uint GetPixelInt(int, int) const;
uint GetPixelInt(int, int, int) const;
Color GetPixelTrilinear(float, float, float) const;
Image GetSubimage(const IntRect&) const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
int GetWidth() const;
bool HasAlphaChannel() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsArray() const;
bool IsCompressed() const;
bool IsCubemap() const;
bool IsInstanceOf(StringHash) const;
bool IsSRGB() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadColorLUT(Deserializer&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void PrecalculateLevels();
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
bool Resize(int, int);
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveBMP(const String&) const;
bool SaveDDS(const String&) const;
bool SaveFile(const String&) const;
bool SaveJPG(const String&, int) const;
bool SavePNG(const String&) const;
bool SaveTGA(const String&) const;
bool SaveWEBP(const String&, float = 0.0f) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
void SetPixel(int, int, const Color&);
void SetPixel(int, int, int, const Color&);
void SetPixelInt(int, int, int, uint);
void SetPixelInt(int, int, uint);
bool SetSize(int, int, int, uint);
bool SetSize(int, int, uint);
bool SetSubimage(Image, const IntRect&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
bool array;
/* readonly */
String category;
/* readonly */
uint components;
/* readonly */
bool compressed;
/* readonly */
CompressedFormat compressedFormat;
/* readonly */
bool cubemap;
/* readonly */
int depth;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hasAlphaChannel;
/* readonly */
int height;
/* readonly */
uint memoryUse;
String name;
/* readonly */
uint numCompressedLevels;
/* readonly */
int refs;
/* readonly */
bool sRGB;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
/* readonly */
int width;
};

class IndexBuffer
{
public:
IndexBuffer(bool = false);
// Methods:
void ClearDataLost();
bool GetBlockEvents() const;
VectorBuffer GetData();
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetGPUObjectName() const;
Graphics GetGraphics() const;
uint GetIndexCount() const;
uint GetIndexSize() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool GetUsedVertexRange(uint, uint, uint&, uint&);
bool HasEventHandlers() const;
bool HasPendingData() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsDataLost() const;
bool IsDynamic() const;
bool IsInstanceOf(StringHash) const;
bool IsLocked() const;
bool IsShadowed() const;
operator Object() const;
void OnDeviceLost();
void OnDeviceReset();
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void Release();
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
bool SetData(VectorBuffer&);
bool SetDataRange(VectorBuffer&, uint, uint, bool discard = false);
void SetGlobalVar(StringHash, const Variant&);
void SetShadowed(bool);
bool SetSize(uint, bool, bool = false);
const String& GetCategory() const;
const String& GetTypeName() const;
void Unlock();
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
/* readonly */
bool dataLost;
/* readonly */
bool dynamic;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint indexCount;
/* readonly */
uint indexSize;
/* readonly */
int refs;
bool shadowed;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class IndexBufferDesc
{
public:
~IndexBufferDesc();
IndexBufferDesc();
// Methods:
IndexBufferDesc&  operator=(const IndexBufferDesc&);

// Properties:
uint dataSize;
uint indexCount;
uint indexSize;
};

class Input
{
public:
Input();
// Methods:
int AddScreenJoystick(XMLFile = null, XMLFile = null);
void CenterMousePosition();
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Vector2 GetInputScale() const;
JoystickState GetJoystick(int);
JoystickState GetJoystickByIndex(uint);
JoystickState GetJoystickByName(const String&);
bool GetKeyDown(uint) const;
uint GetKeyFromName(const String&) const;
uint GetKeyFromScancode(uint) const;
String GetKeyName(uint) const;
bool GetKeyPress(uint) const;
bool GetMouseButtonDown(uint) const;
bool GetMouseButtonPress(uint) const;
MouseMode GetMouseMode() const;
IntVector2 GetMouseMove() const;
int GetMouseMoveWheel() const;
int GetMouseMoveX() const;
int GetMouseMoveY() const;
IntVector2 GetMousePosition() const;
uint GetNumJoysticks() const;
uint GetNumTouches() const;
bool GetQualifierDown(uint) const;
bool GetQualifierPress(uint) const;
uint GetQualifiers() const;
bool GetScancodeDown(uint) const;
uint GetScancodeFromKey(uint) const;
uint GetScancodeFromName(const String&) const;
String GetScancodeName(uint) const;
bool GetScancodePress(uint) const;
bool GetScreenKeyboardSupport() const;
Object GetSubsystem(StringHash) const;
bool GetToggleFullscreen() const;
TouchState GetTouch(uint) const;
bool GetTouchEmulation() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasFocus();
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool IsMinimized() const;
bool IsMouseGrabbed() const;
bool IsMouseLocked() const;
bool IsMouseVisible() const;
bool IsScreenJoystickVisible(int) const;
bool IsScreenKeyboardVisible() const;
uint LoadGestures(Deserializer&);
uint LoadGestures(File);
uint LoadGestures(VectorBuffer&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
bool RecordGesture();
operator RefCounted() const;
int Refs() const;
void RemoveAllGestures();
bool RemoveGesture(uint);
bool RemoveScreenJoystick(int);
void ResetMouseGrabbed();
void ResetMouseMode();
void ResetMouseVisible();
bool SaveGesture(File, uint);
bool SaveGesture(Serializer&, uint);
bool SaveGesture(VectorBuffer&, uint);
bool SaveGestures(File);
bool SaveGestures(Serializer&);
bool SaveGestures(VectorBuffer&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMouseGrabbed(bool, bool = false);
void SetMouseMode(MouseMode, bool = false);
void SetMousePosition(const IntVector2&);
void SetMouseVisible(bool, bool = false);
void SetScreenJoystickVisible(int, bool);
void SetScreenKeyboardVisible(bool);
void SetToggleFullscreen(bool);
void SetTouchEmulation(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update();
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
/* readonly */
bool focus;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
Vector2 inputScale;
/* readonly */
Array<JoystickState> joysticks;
/* readonly */
Array<JoystickState> joysticksByIndex;
/* readonly */
Array<JoystickState> joysticksByName;
/* readonly */
Array<bool> keyDown;
/* readonly */
Array<bool> keyPress;
/* readonly */
bool minimized;
/* readonly */
Array<bool> mouseButtonDown;
/* readonly */
Array<bool> mouseButtonPress;
bool mouseGrabbed;
/* readonly */
bool mouseLocked;
MouseMode mouseMode;
/* readonly */
IntVector2 mouseMove;
/* readonly */
int mouseMoveWheel;
/* readonly */
int mouseMoveX;
/* readonly */
int mouseMoveY;
IntVector2 mousePosition;
bool mouseVisible;
/* readonly */
uint numJoysticks;
/* readonly */
uint numTouches;
/* readonly */
Array<bool> qualifierDown;
/* readonly */
Array<bool> qualifierPress;
/* readonly */
uint qualifiers;
/* readonly */
int refs;
/* readonly */
Array<bool> scancodeDown;
/* readonly */
Array<bool> scancodePress;
Array<bool> screenJoystickVisible;
/* readonly */
bool screenKeyboardSupport;
bool screenKeyboardVisible;
bool toggleFullscreen;
bool touchEmulation;
/* readonly */
Array<TouchState> touches;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class InstanceData
{
public:
~InstanceData();
InstanceData();
// Methods:
InstanceData&  operator=(const InstanceData&);

// Properties:
float distance;
};

class IntRect
{
public:
IntRect();
IntRect(const IntVector2&in, const IntVector2&in);
IntRect(int, int, int, int);
IntRect(int[]&inout);
// Methods:
IntRect  operator+(const IntRect&) const;
IntRect&  operator+=(const IntRect&);
IntRect&  operator=(const IntRect&);
bool  operator==(const IntRect&) const;
int Bottom() const;
void Clip(const IntRect&);
int Height() const;
Intersection IsInside(const IntRect&) const;
Intersection IsInside(const IntVector2&) const;
int Left() const;
IntVector2 Max() const;
void Merge(const IntRect&);
IntVector2 Min() const;
int Right() const;
IntVector2 Size() const;
String ToString() const;
int Top() const;
int Width() const;

// Properties:
int bottom;
/* readonly */
Array<int> data;
/* readonly */
int height;
int left;
int right;
/* readonly */
IntVector2 size;
int top;
/* readonly */
int width;

// Constants:
static const IntRect ZERO;
};

class IntVector2
{
public:
IntVector2();
IntVector2(int, int);
IntVector2(const IntVector2&in);
IntVector2(int[]&inout);
// Methods:
IntVector2  operator+(const IntVector2&) const;
IntVector2&  operator+=(const IntVector2&);
IntVector2&  operator=(const IntVector2&);
bool  operator==(const IntVector2&) const;
float Length() const;
uint ToHash() const;
String ToString() const;

// Properties:
/* readonly */
Array<int> data;
int x;
int y;

// Constants:
static const IntVector2 DOWN;
static const IntVector2 LEFT;
static const IntVector2 ONE;
static const IntVector2 RIGHT;
static const IntVector2 UP;
static const IntVector2 ZERO;
};

class IntVector3
{
public:
IntVector3();
IntVector3(int, int, int);
IntVector3(const IntVector3&in);
IntVector3(int[]&inout);
// Methods:
IntVector3  operator+(const IntVector3&) const;
IntVector3&  operator+=(const IntVector3&);
IntVector3&  operator=(const IntVector3&);
bool  operator==(const IntVector3&) const;
float Length() const;
uint ToHash() const;
String ToString() const;

// Properties:
/* readonly */
Array<int> data;
int x;
int y;
int z;

// Constants:
static const IntVector3 BACK;
static const IntVector3 DOWN;
static const IntVector3 FORWARD;
static const IntVector3 LEFT;
static const IntVector3 ONE;
static const IntVector3 RIGHT;
static const IntVector3 UP;
static const IntVector3 ZERO;
};

class JSONFile
{
public:
JSONFile();
// Methods:
bool BeginLoad(Deserializer&);
bool EndLoad();
bool FromString(const String&);
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
JSONValue& GetRoot();
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
const JSONValue& GetRoot() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(Serializer&, const String&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
String ToString(const String& = "\t") const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
/* readonly */
JSONValue root;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class JSONValue
{
public:
~JSONValue();
JSONValue();
JSONValue(bool);
JSONValue(int);
JSONValue(uint);
JSONValue(float);
JSONValue(double);
JSONValue(const String&in);
JSONValue(const JSONValue&in);
// Methods:
JSONValue&  operator=(bool);
JSONValue&  operator=(const JSONValue&);
JSONValue&  operator=(const String&);
JSONValue&  operator=(double);
JSONValue&  operator=(float);
JSONValue&  operator=(int);
JSONValue&  operator=(uint);
JSONValue&  operator[](const String&);
JSONValue&  operator[](uint);
void Clear();
bool Contains(const String&) const;
bool Erase(const String&);
void Erase(uint, uint = 1);
bool GetBool(bool = false) const;
double GetDouble(double = 0.0) const;
float GetFloat(float = 0.0f) const;
int GetInt(int = 0) const;
JSONNumberType GetNumberType() const;
String GetNumberTypeName() const;
uint GetUInt(uint = 0) const;
JSONValueType GetValueType() const;
String GetValueTypeName() const;
Variant GetVariant() const;
VariantMap GetVariantMap() const;
Variant GetVariantValue(VariantType) const;
void Insert(uint, const JSONValue&);
bool IsArray() const;
bool IsBool() const;
bool IsNull() const;
bool IsNumber() const;
bool IsObject() const;
bool IsString() const;
const JSONValue&  operator[](const String&) const;
const JSONValue&  operator[](uint) const;
const JSONValue& Get(const String&) const;
void Pop();
void Push(const JSONValue&);
void Resize(uint);
void Set(const String&, const JSONValue&);
void SetType(JSONValueType, JSONNumberType = JSONNT_NAN);
void SetVariant(const Variant&);
void SetVariantMap(const VariantMap&);
void SetVariantValue(const Variant&);
uint Size() const;
const String& GetString(const String& = String :: EMPTY) const;

// Properties:
/* readonly */
bool isArray;
/* readonly */
bool isBool;
/* readonly */
bool isNull;
/* readonly */
bool isNumber;
/* readonly */
bool isObject;
/* readonly */
bool isString;
/* readonly */
Array<String> keys;
/* readonly */
JSONNumberType numberType;
/* readonly */
String numberTypeName;
/* readonly */
uint size;
/* readonly */
JSONValueType valueType;
/* readonly */
String valueTypeName;
/* readonly */
Array<JSONValue> values;

// Constants:
static const JSONValue EMPTY;
};

class JoystickState
{
public:
// Methods:
JoystickState&  operator=(const JoystickState&);
float GetAxisPosition(uint) const;
bool GetButtonDown(uint) const;
bool GetButtonPress(uint) const;
int GetHatPosition(uint) const;
uint GetNumAxes() const;
uint GetNumButtons() const;
uint GetNumHats() const;
void Initialize(uint, uint, uint);
bool IsController() const;
void Reset();

// Properties:
/* readonly */
Array<float> axisPosition;
/* readonly */
Array<bool> buttonDown;
/* readonly */
Array<bool> buttonPress;
/* readonly */
bool controller;
/* readonly */
Array<int> hatPosition;
int joystickID;
String name;
/* readonly */
uint numAxes;
/* readonly */
uint numButtons;
/* readonly */
uint numHats;
};

class Light
{
public:
Light();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BiasParameters& GetShadowBias() const;
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
const CascadeParameters& GetShadowCascade() const;
void CleanupConnection(Connection);
const Color& GetColor() const;
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
const FocusParameters& GetShadowFocus() const;
bool GetAnimationEnabled() const;
float GetAspectRatio() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
float GetBrightness() const;
bool GetCastShadows() const;
Color GetColorFromTemperature() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
Color GetEffectiveColor() const;
float GetEffectiveSpecularIntensity() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFadeDistance() const;
Light GetFirstLight() const;
float GetFov() const;
Frustum GetFrustum() const;
uint GetID() const;
float GetIntensityDivisor(float = 1.0f) const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetLength() const;
uint GetLightMask() const;
LightType GetLightType() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
int GetNumShadowSplits() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
bool GetPerVertex() const;
float GetRadius() const;
Texture GetRampTexture() const;
ResourceRef GetRampTextureAttr() const;
float GetRange() const;
Scene GetScene() const;
float GetShadowDistance() const;
float GetShadowFadeDistance() const;
float GetShadowIntensity() const;
uint GetShadowMask() const;
float GetShadowMaxExtrusion() const;
float GetShadowNearFarRatio() const;
float GetShadowResolution() const;
Texture GetShapeTexture() const;
ResourceRef GetShapeTextureAttr() const;
float GetSortValue() const;
float GetSpecularIntensity() const;
Object GetSubsystem(StringHash) const;
float GetTemperature() const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
bool GetUsePhysicalValues() const;
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Frustum GetViewSpaceFrustum(const Matrix3x4&) const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsNegative() const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
const Matrix3x4& GetVolumeTransform(Camera);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAspectRatio(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetBrightness(float);
void SetCastShadows(bool);
void SetColor(const Color&);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetFadeDistance(float);
void SetFov(float);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetIntensitySortValue(const BoundingBox&);
void SetIntensitySortValue(float);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLength(float);
void SetLightMask(uint);
void SetLightType(LightType);
void SetLodBias(float);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetPerVertex(bool);
void SetRadius(float);
void SetRampTexture(Texture);
void SetRampTextureAttr(const ResourceRef&);
void SetRange(float);
void SetShadowBias(const BiasParameters&);
void SetShadowCascade(const CascadeParameters&);
void SetShadowDistance(float);
void SetShadowFadeDistance(float);
void SetShadowFocus(const FocusParameters&);
void SetShadowIntensity(float);
void SetShadowMask(uint);
void SetShadowMaxExtrusion(float);
void SetShadowNearFarRatio(float);
void SetShadowResolution(float);
void SetShapeTexture(Texture);
void SetShapeTextureAttr(const ResourceRef&);
void SetSortValue(float);
void SetSpecularIntensity(float);
void SetTemperature(float);
void SetTemporary(bool);
void SetUsePhysicalValues(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
float aspectRatio;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
float brightness;
bool castShadows;
/* readonly */
String category;
Color color;
/* readonly */
Color colorFromTemperature;
float drawDistance;
/* readonly */
Color effectiveColor;
/* readonly */
float effectiveSpecularIntensity;
bool enabled;
/* readonly */
bool enabledEffective;
float fadeDistance;
float fov;
/* readonly */
Frustum frustum;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
float length;
uint lightMask;
LightType lightType;
float lodBias;
uint maxLights;
/* readonly */
bool negative;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
int numShadowSplits;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
bool perVertex;
float radius;
Texture rampTexture;
float range;
/* readonly */
int refs;
/* readonly */
bool replicated;
BiasParameters shadowBias;
CascadeParameters shadowCascade;
float shadowDistance;
float shadowFadeDistance;
FocusParameters shadowFocus;
float shadowIntensity;
uint shadowMask;
float shadowMaxExtrusion;
float shadowNearFarRatio;
float shadowResolution;
Texture shapeTexture;
float specularIntensity;
float temperature;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool usePhysicalValues;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class LightBatchQueue
{
public:
~LightBatchQueue();
LightBatchQueue();
// Methods:
LightBatchQueue&  operator=(const LightBatchQueue&);

// Properties:
BatchQueue litBaseBatches;
BatchQueue litBatches;
bool negative;
};

class LightQueryResult
{
public:
~LightQueryResult();
LightQueryResult();
// Methods:
LightQueryResult&  operator=(const LightQueryResult&);

// Properties:
uint numSplits;
};

class LineEdit
{
public:
LineEdit();
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
BorderImage GetCursor() const;
float GetCursorBlinkRate() const;
uint GetCursorPosition() const;
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
uint GetEchoCharacter() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
uint GetMaxLength() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Text GetTextElement() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsCursorMovable() const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTextCopyable() const;
bool IsTextSelectable() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetCursorBlinkRate(float);
void SetCursorMovable(bool);
void SetCursorPosition(uint);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEchoCharacter(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxLength(uint);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetText(const String&);
void SetTextCopyable(bool);
void SetTextSelectable(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetText() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
/* readonly */
BorderImage cursor;
float cursorBlinkRate;
bool cursorMovable;
uint cursorPosition;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
uint echoCharacter;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
uint maxLength;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
String text;
bool textCopyable;
/* readonly */
Text textElement;
bool textSelectable;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class LinkedListNode
{
public:
~LinkedListNode();
LinkedListNode();
// Methods:
LinkedListNode&  operator=(const LinkedListNode&);
};

class ListBase
{
public:
~ListBase();
ListBase();
// Methods:
ListBase&  operator=(const ListBase&);
void Swap(ListBase&);
};

class ListIteratorBase
{
public:
~ListIteratorBase();
ListIteratorBase();
// Methods:
ListIteratorBase&  operator=(const ListIteratorBase&);
bool  operator==(const ListIteratorBase&) const;
void GotoNext();
void GotoPrev();
};

class ListNodeBase
{
public:
~ListNodeBase();
ListNodeBase();
// Methods:
ListNodeBase&  operator=(const ListNodeBase&);
};

class ListView
{
public:
ListView();
// Methods:
void AddChild(UIElement);
void AddItem(UIElement);
void AddSelection(uint);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void BringToFront();
void ChangeSelection(int, bool = false);
void ClearSelection();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
void CopySelectedItemsToClipboard() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableInternalLayoutUpdate();
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableInternalLayoutUpdate();
void EnableLayoutUpdate();
void EnsureItemVisibility(UIElement);
void EnsureItemVisibility(uint);
void Expand(uint, bool, bool = false);
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
uint FindItem(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetAutoDisableChildren() const;
float GetAutoDisableThreshold() const;
int GetBaseIndent() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClearSelectionOnDefocus() const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
UIElement GetContentElement() const;
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
bool GetHierarchyMode() const;
HighlightMode GetHighlightMode() const;
HorizontalAlignment GetHorizontalAlignment() const;
ScrollBar GetHorizontalScrollBar() const;
bool GetHorizontalScrollBarVisible() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
UIElement GetItem(uint) const;
Array<UIElement> GetItems() const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
bool GetMultiselect() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumItems() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
float GetPageStep() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
bool GetScrollBarsAutoVisible() const;
float GetScrollDeceleration() const;
BorderImage GetScrollPanel() const;
float GetScrollSnapEpsilon() const;
float GetScrollStep() const;
bool GetSelectOnClickEnd() const;
UIElement GetSelectedItem() const;
Array<UIElement> GetSelectedItems() const;
uint GetSelection() const;
Array<uint> GetSelections() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
ScrollBar GetVerticalScrollBar() const;
bool GetVerticalScrollBarVisible() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
void InsertItem(uint, UIElement, UIElement = null);
const IntRect& GetClipBorder() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
const IntVector2& GetViewPosition() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsExpanded(uint) const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected(uint) const;
bool IsTemporary() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllItems();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveItem(UIElement, uint = 0);
void RemoveItem(uint);
void RemoveObjectAnimation();
void RemoveSelection(uint);
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
operator ScrollView() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAutoDisableChildren(bool);
void SetAutoDisableThreshold(float);
void SetBaseIndent(int);
void SetBlockEvents(bool);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClearSelectionOnDefocus(bool);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetContentElement(UIElement);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHierarchyMode(bool);
void SetHighlightMode(HighlightMode);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHorizontalScrollBarVisible(bool);
void SetHovering(bool);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetMultiselect(bool);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetPageStep(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetScrollBarsAutoVisible(bool);
void SetScrollBarsVisible(bool, bool);
void SetScrollDeceleration(float);
void SetScrollSnapEpsilon(float);
void SetScrollStep(float);
void SetSelectOnClickEnd(bool);
void SetSelected(bool);
void SetSelection(uint);
void SetSelections(Array<uint>);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVerticalScrollBarVisible(bool);
void SetViewPosition(const IntVector2&);
void SetViewPosition(int, int);
void SetViewPositionAttr(const IntVector2&);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void ToggleExpand(uint, bool = false);
void ToggleSelection(uint);
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateInternalLayout();
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Object() const;
operator const RefCounted() const;
operator const ScrollView() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool autoDisableChildren;
float autoDisableThreshold;
int baseIndent;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
bool clearSelectionOnDefocus;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
UIElement contentElement;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
bool hierarchyMode;
HighlightMode highlightMode;
HorizontalAlignment horizontalAlignment;
/* readonly */
ScrollBar horizontalScrollBar;
bool horizontalScrollBarVisible;
/* readonly */
bool hovering;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
/* readonly */
Array<UIElement> items;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
bool multiselect;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
/* readonly */
uint numItems;
ObjectAnimation objectAnimation;
float opacity;
float pageStep;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool scrollBarsAutoVisible;
float scrollDeceleration;
/* readonly */
BorderImage scrollPanel;
float scrollSnapEpsilon;
float scrollStep;
bool selectOnClickEnd;
/* writeonly */
bool selected;
/* readonly */
UIElement selectedItem;
/* readonly */
Array<UIElement> selectedItems;
uint selection;
/* readonly */
Array<uint> selections;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
/* readonly */
ScrollBar verticalScrollBar;
bool verticalScrollBarVisible;
IntVector2 viewPosition;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class Localization
{
public:
Localization();
// Methods:
String Get(const String&);
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
String GetLanguage();
String GetLanguage(int);
int GetLanguageIndex() const;
int GetLanguageIndex(const String&);
int GetNumLanguages() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
void LoadJSONFile(const String&, const String& = String :: EMPTY);
void LoadMultipleLanguageJSON(const JSONValue&);
void LoadSingleLanguageJSON(const JSONValue&, const String& = String :: EMPTY);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void Reset();
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetLanguage(const String&);
void SetLanguage(int);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
String language;
/* readonly */
int languageIndex;
/* readonly */
int numLanguages;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class Log
{
public:
Log();
// Methods:
void Close();
void Debug(const String&);
void Error(const String&);
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
String GetLastMessage() const;
int GetLevel() const;
Object GetSubsystem(StringHash) const;
bool GetTimeStamp() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
void Info(const String&);
bool IsInstanceOf(StringHash) const;
bool IsQuiet() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void Open(const String&);
operator RefCounted() const;
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetLevel(int);
void SetQuiet(bool);
void SetTimeStamp(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void Trace(const String&);
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
void Warning(const String&);
int WeakRefs() const;
void Write(const String&, bool error = false);
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
String lastMessage;
int level;
bool quiet;
/* readonly */
int refs;
bool timeStamp;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class LogicComponent
{
public:
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void PrepareNetworkUpdate();
operator RaycastVehicle() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RaycastVehicle() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ManifoldPair
{
public:
~ManifoldPair();
ManifoldPair();
// Methods:
ManifoldPair&  operator=(const ManifoldPair&);
};

class Material
{
public:
Material();
// Methods:
bool BeginLoad(Deserializer&);
const BiasParameters& GetDepthBias() const;
Material Clone(const String& = String :: EMPTY) const;
bool EndLoad();
bool GetAlphaToCoverage() const;
AsyncLoadState GetAsyncLoadState() const;
uint GetAuxViewFrameNumber() const;
bool GetBlockEvents() const;
CullMode GetCullMode() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FillMode GetFillMode() const;
bool GetLineAntiAlias() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
uint GetNumTechniques() const;
bool GetOcclusion() const;
Pass GetPass(uint, const String&) const;
uint8 GetRenderOrder() const;
Scene GetScene() const;
ValueAnimation GetShaderParameterAnimation(const String&) const;
float GetShaderParameterAnimationSpeed(const String&) const;
WrapMode GetShaderParameterAnimationWrapMode(const String&) const;
uint GetShaderParameterHash() const;
CullMode GetShadowCullMode() const;
bool GetSpecular() const;
Object GetSubsystem(StringHash) const;
Technique GetTechnique(uint) const;
Texture GetTexture(TextureUnit) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const JSONValue&);
bool Load(const String&);
bool Load(const XMLElement&);
bool LoadFile(const String&);
void MarkForAuxView(uint);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ReleaseShaders();
void RemoveShaderParameter(const String&);
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(JSONValue&) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(XMLElement&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAlphaToCoverage(bool);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetCullMode(CullMode);
void SetDepthBias(const BiasParameters&);
void SetFillMode(FillMode);
void SetGlobalVar(StringHash, const Variant&);
void SetLineAntiAlias(bool);
void SetMemoryUse(uint);
void SetName(const String&);
void SetNumTechniques(uint);
void SetOcclusion(bool);
void SetPixelShaderDefines(const String&);
void SetRenderOrder(uint8);
void SetScene(Scene);
void SetShaderParameter(const String&, const Variant&);
void SetShaderParameterAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetShaderParameterAnimationSpeed(const String&, float);
void SetShaderParameterAnimationWrapMode(const String&, WrapMode);
void SetShadowCullMode(CullMode);
void SetTechnique(uint, Technique, uint = QUALITY_LOW, float = 0.0f);
void SetTexture(TextureUnit, Texture);
void SetUVTransform(const Vector2&, float, const Vector2&);
void SetUVTransform(const Vector2&, float, float);
void SetVertexShaderDefines(const String&);
void SortTechniques();
const String& GetCategory() const;
const String& GetName() const;
const String& GetPixelShaderDefines() const;
const String& GetTypeName() const;
const String& GetVertexShaderDefines() const;
const TechniqueEntry& GetTechniqueEntry(uint) const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetShaderParameter(const String&) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
bool alphaToCoverage;
/* readonly */
String category;
CullMode cullMode;
BiasParameters depthBias;
FillMode fillMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
bool lineAntiAlias;
/* readonly */
uint memoryUse;
String name;
uint numTechniques;
bool occlusion;
String pixelShaderDefines;
/* readonly */
int refs;
uint8 renderOrder;
Scene scene;
/* readonly */
Array<String> shaderParameterNames;
Array<Variant> shaderParameters;
CullMode shadowCullMode;
/* readonly */
Array<TechniqueEntry> techniqueEntries;
/* readonly */
Array<Technique> techniques;
Array<Texture> textures;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
String vertexShaderDefines;
/* readonly */
int weakRefs;
};

class MaterialShaderParameter
{
public:
~MaterialShaderParameter();
MaterialShaderParameter();
// Methods:
MaterialShaderParameter&  operator=(const MaterialShaderParameter&);

// Properties:
String name;
Variant value;
};

class Matrix2
{
public:
Matrix2();
Matrix2(const Matrix2&in);
Matrix2(float, float, float, float);
// Methods:
Matrix2  operator+(const Matrix2&) const;
Matrix2&  operator=(const Matrix2&);
bool  operator==(const Matrix2&) const;
bool Equals(const Matrix2&) const;
Matrix2 Inverse() const;
bool IsInf() const;
bool IsNaN() const;
Vector2 Scale() const;
Matrix2 Scaled(const Vector2&) const;
void SetScale(const Vector2&);
void SetScale(float);
String ToString() const;
Matrix2 Transpose() const;

// Properties:
float m00;
float m01;
float m10;
float m11;

// Constants:
static const Matrix2 IDENTITY;
static const Matrix2 ZERO;
};

class Matrix3
{
public:
Matrix3();
Matrix3(const Matrix3&in);
Matrix3(float, float, float, float, float, float, float, float, float);
// Methods:
Matrix3  operator+(const Matrix3&) const;
Matrix3&  operator=(const Matrix3&);
bool  operator==(const Matrix3&) const;
Vector3 Column(uint) const;
float Element(uint, uint) const;
bool Equals(const Matrix3&) const;
Matrix3 Inverse() const;
bool IsInf() const;
bool IsNaN() const;
Vector3 Row(uint) const;
Vector3 Scale() const;
Matrix3 Scaled(const Vector3&) const;
void SetScale(const Vector3&);
void SetScale(float);
Vector3 SignedScale(const Matrix3&) const;
String ToString() const;
Matrix3 Transpose() const;

// Properties:
float m00;
float m01;
float m02;
float m10;
float m11;
float m12;
float m20;
float m21;
float m22;

// Constants:
static const Matrix3 IDENTITY;
static const Matrix3 ZERO;
};

class Matrix3x4
{
public:
Matrix3x4();
Matrix3x4(const Matrix3x4&in);
Matrix3x4(const Matrix3&in);
Matrix3x4(const Matrix4&in);
Matrix3x4(float, float, float, float, float, float, float, float, float, float, float, float);
Matrix3x4(const Vector3&in, const Quaternion&in, float);
Matrix3x4(const Vector3&in, const Quaternion&in, const Vector3&in);
// Methods:
Matrix3x4  operator+(const Matrix3x4&) const;
Matrix3x4&  operator=(const Matrix3&);
Matrix3x4&  operator=(const Matrix3x4&);
Matrix3x4&  operator=(const Matrix4&);
bool  operator==(const Matrix3x4&) const;
Vector3 Column(uint) const;
void Decompose(Vector3&, Quaternion&, Vector3&) const;
float Element(uint, uint) const;
bool Equals(const Matrix3x4&) const;
Matrix3x4 Inverse() const;
bool IsInf() const;
bool IsNaN() const;
Quaternion Rotation() const;
Matrix3 RotationMatrix() const;
Vector4 Row(uint) const;
Vector3 Scale() const;
void SetRotation(const Matrix3&);
void SetScale(const Vector3&);
void SetScale(float);
void SetTranslation(const Vector3&);
Vector3 SignedScale(const Matrix3&) const;
Matrix3 ToMatrix3() const;
Matrix4 ToMatrix4() const;
String ToString() const;
Vector3 Translation() const;

// Properties:
float m00;
float m01;
float m02;
float m03;
float m10;
float m11;
float m12;
float m13;
float m20;
float m21;
float m22;
float m23;

// Constants:
static const Matrix3x4 IDENTITY;
static const Matrix3x4 ZERO;
};

class Matrix4
{
public:
Matrix4();
Matrix4(const Matrix4&in);
Matrix4(const Matrix3&in);
Matrix4(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float);
// Methods:
Matrix4  operator+(const Matrix4&) const;
Matrix4&  operator=(const Matrix3&);
Matrix4&  operator=(const Matrix4&);
bool  operator==(const Matrix4&) const;
Vector4 Column(uint) const;
void Decompose(Vector3&, Quaternion&, Vector3&) const;
float Element(uint, uint) const;
bool Equals(const Matrix4&) const;
Matrix4 Inverse() const;
bool IsInf() const;
bool IsNaN() const;
Quaternion Rotation() const;
Matrix3 RotationMatrix() const;
Vector4 Row(uint) const;
Vector3 Scale() const;
void SetRotation(const Matrix3&);
void SetScale(const Vector3&);
void SetScale(float);
void SetTranslation(const Vector3&);
Vector3 SignedScale(const Matrix3&) const;
Matrix3 ToMatrix3() const;
String ToString() const;
Vector3 Translation() const;
Matrix4 Transpose() const;

// Properties:
float m00;
float m01;
float m02;
float m03;
float m10;
float m11;
float m12;
float m13;
float m20;
float m21;
float m22;
float m23;
float m30;
float m31;
float m32;
float m33;

// Constants:
static const Matrix4 IDENTITY;
static const Matrix4 ZERO;
};

class Menu
{
public:
Menu();
Menu(const String&in);
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
operator Button() const;
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
operator DropDownList() const;
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
int GetAcceleratorKey() const;
int GetAcceleratorQualifiers() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
UIElement GetPopup() const;
int GetPriority() const;
float GetRepeatDelay() const;
float GetRepeatRate() const;
UIElement GetRoot() const;
bool GetShowPopup() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPopupOffset() const;
const IntVector2& GetPosition() const;
const IntVector2& GetPressedChildOffset() const;
const IntVector2& GetPressedOffset() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsPressed() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHidePopup();
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnShowPopup();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAccelerator(int, int);
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPopup(UIElement);
void SetPopupOffset(const IntVector2&);
void SetPopupOffset(int, int);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPressedChildOffset(const IntVector2&);
void SetPressedChildOffset(int, int);
void SetPressedOffset(const IntVector2&);
void SetPressedOffset(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetRepeat(float, float);
void SetRepeatDelay(float);
void SetRepeatRate(float);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void ShowPopup(bool);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Button() const;
operator const DropDownList() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
/* readonly */
int acceleratorKey;
/* readonly */
int acceleratorQualifiers;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
UIElement popup;
IntVector2 popupOffset;
IntVector2 position;
/* readonly */
bool pressed;
IntVector2 pressedChildOffset;
IntVector2 pressedOffset;
int priority;
/* readonly */
int refs;
float repeatDelay;
float repeatRate;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
bool showPopup;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class MessageBox
{
public:
MessageBox(const String&in = String :: EMPTY, const String&in = String :: EMPTY, XMLFile& = null, XMLFile& = null);
// Methods:
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UIElement GetWindow() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMessage(const String&);
void SetTitle(const String&);
const String& GetCategory() const;
const String& GetMessage() const;
const String& GetTitle() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
String message;
/* readonly */
int refs;
String title;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
/* readonly */
UIElement window;
};

class Model
{
public:
Model();
// Methods:
void AddMetadata(const String&, const Variant&);
bool BeginLoad(Deserializer&);
const BoundingBox& GetBoundingBox() const;
Model Clone(const String& = String :: EMPTY) const;
bool EndLoad();
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Geometry GetGeometry(uint, uint) const;
Array<Vector3> GetGeometryCenters() const;
Array<IndexBuffer> GetIndexBuffers() const;
uint GetMemoryUse() const;
uint GetMorphRangeCount(uint) const;
uint GetMorphRangeStart(uint) const;
StringHash GetNameHash() const;
uint GetNumGeometries() const;
uint GetNumGeometryLodLevels(uint) const;
uint GetNumMorphs() const;
Skeleton& GetSkeleton();
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
Array<VertexBuffer> GetVertexBuffers() const;
bool HasEventHandlers() const;
bool HasMetadata() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RemoveAllMetadata();
void RemoveMetadata(const String&);
void ResetUseTimer();
operator Resource() const;
operator ResourceWithMetadata() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetBoundingBox(const BoundingBox&);
bool SetGeometry(uint, uint, Geometry);
bool SetGeometryCenter(uint, const Vector3&);
void SetGlobalVar(StringHash, const Variant&);
bool SetIndexBuffers(Array<IndexBuffer>);
void SetMemoryUse(uint);
void SetName(const String&);
void SetNumGeometries(uint);
bool SetNumGeometryLodLevels(uint, uint);
void SetSkeleton(const Skeleton&);
bool SetVertexBuffers(Array<Array<Array<VertexBuffer>, uint>, uint>);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetMetadata(const String&) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetGeometryCenter(uint) const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;
operator const ResourceWithMetadata() const;

// Properties:
BoundingBox boundingBox;
/* readonly */
String category;
Array<Vector3> geometryCenters;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hasMetadata;
/* readonly */
uint memoryUse;
Array<Variant> metadata;
String name;
uint numGeometries;
Array<uint> numGeometryLodLevels;
/* readonly */
uint numMorphs;
/* readonly */
int refs;
/* readonly */
Skeleton skeleton;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class ModelMorph
{
public:
~ModelMorph();
ModelMorph();
// Methods:
ModelMorph&  operator=(const ModelMorph&);

// Properties:
String name;
StringHash nameHash;
float weight;
};

class Mutex
{
public:
~Mutex();
Mutex();
// Methods:
Mutex&  operator=(const Mutex&);
void Acquire();
void Release();
bool TryAcquire();
};

class MutexLock
{
public:
~MutexLock();
MutexLock(Mutex&inout);
};

class NamedPipe
{
public:
NamedPipe();
NamedPipe(const String&in, bool);
// Methods:
void Close();
operator Deserializer() const;
bool GetBlockEvents() const;
uint GetChecksum();
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetPosition() const;
uint GetSize() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEof() const;
bool IsInstanceOf(StringHash) const;
bool IsOpen() const;
bool IsServer() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
bool Open(const String&, bool);
Array<uint8> Read(uint);
bool ReadBool();
BoundingBox ReadBoundingBox();
int8 ReadByte();
Color ReadColor();
double ReadDouble();
String ReadFileID();
float ReadFloat();
int ReadInt();
int64 ReadInt64();
IntRect ReadIntRect();
IntVector2 ReadIntVector2();
IntVector3 ReadIntVector3();
String ReadLine();
Matrix3 ReadMatrix3();
Matrix3x4 ReadMatrix3x4();
Matrix4 ReadMatrix4();
uint ReadNetID();
Quaternion ReadPackedQuaternion();
Vector3 ReadPackedVector3(float);
Quaternion ReadQuaternion();
Rect ReadRect();
ResourceRef ReadResourceRef();
ResourceRefList ReadResourceRefList();
int16 ReadShort();
String ReadString();
StringHash ReadStringHash();
Array<String> ReadStringVector();
uint8 ReadUByte();
uint ReadUInt();
uint64 ReadUInt64();
uint16 ReadUShort();
uint ReadVLE();
Variant ReadVariant();
Variant ReadVariant(VariantType);
VariantMap ReadVariantMap();
Vector2 ReadVector2();
Vector3 ReadVector3();
Vector4 ReadVector4();
VectorBuffer ReadVectorBuffer(uint);
operator RefCounted() const;
int Refs() const;
uint Seek(uint);
uint SeekRelative(int);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializer() const;
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetName(const String&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
uint Tell() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
uint Write(Array<uint8>);
bool WriteBool(bool);
bool WriteBoundingBox(const BoundingBox&);
bool WriteByte(int8);
bool WriteColor(const Color&);
bool WriteDouble(double);
bool WriteFileID(const String&);
bool WriteFloat(float);
bool WriteInt(int);
bool WriteInt64(int64);
bool WriteIntRect(const IntRect&);
bool WriteIntVector2(const IntVector2&);
bool WriteIntVector3(const IntVector3&);
bool WriteLine(const String&);
bool WriteMatrix3(const Matrix3&);
bool WriteMatrix3x4(const Matrix3x4&);
bool WriteMatrix4(const Matrix4&);
bool WriteNetID(uint);
bool WritePackedQuaternion(const Quaternion&);
bool WritePackedVector3(const Vector3&, float);
bool WriteQuaternion(const Quaternion&);
bool WriteRect(const Rect&);
bool WriteResourceRef(const ResourceRef&);
bool WriteResourceRefList(const ResourceRefList&);
bool WriteShort(int16);
bool WriteString(const String&);
bool WriteStringHash(const StringHash&);
bool WriteStringVector(Array<String>);
bool WriteUByte(uint8);
bool WriteUInt(uint);
bool WriteUInt64(uint64);
bool WriteUShort(uint16);
bool WriteVLE(uint);
bool WriteVariant(const Variant&);
bool WriteVariantData(const Variant&);
bool WriteVariantMap(const VariantMap&);
bool WriteVector2(const Vector2&);
bool WriteVector3(const Vector3&);
bool WriteVector4(const Vector4&);
bool WriteVectorBuffer(const VectorBuffer&);
operator const Deserializer() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializer() const;

// Properties:
/* readonly */
String category;
/* readonly */
uint checksum;
/* readonly */
bool eof;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
String name;
/* readonly */
bool open;
/* readonly */
uint position;
/* readonly */
int refs;
/* readonly */
bool server;
/* readonly */
uint size;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class NavArea
{
public:
NavArea();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
uint GetAreaID() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
BoundingBox GetBoundingBox() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
BoundingBox GetWorldBoundingBox() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAreaID(uint);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetBoundingBox(const BoundingBox&);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
uint areaID;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BoundingBox boundingBox;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
};

class NavAreaStub
{
public:
~NavAreaStub();
NavAreaStub();
// Methods:
NavAreaStub&  operator=(const NavAreaStub&);

// Properties:
uint8 areaID;
BoundingBox bounds;
};

class NavBuildData
{
public:
~NavBuildData();
NavBuildData();
// Methods:
NavBuildData&  operator=(const NavBuildData&);

// Properties:
BoundingBox worldBoundingBox;
};

class Navigable
{
public:
Navigable();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsRecursive() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetRecursive(bool);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool recursive;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class NavigationGeometryInfo
{
public:
~NavigationGeometryInfo();
NavigationGeometryInfo();
// Methods:
NavigationGeometryInfo&  operator=(const NavigationGeometryInfo&);

// Properties:
BoundingBox boundingBox;
uint lodLevel;
Matrix3x4 transform;
};

class NavigationMesh
{
public:
NavigationMesh();
// Methods:
bool AddTile(const VectorBuffer&) const;
bool Allocate(const BoundingBox&, uint);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
bool Build();
bool Build(const BoundingBox&);
bool Build(const IntVector2&, const IntVector2&);
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
void DrawDebugGeometry(bool);
operator DynamicNavigationMesh() const;
Vector3 FindNearestPoint(const Vector3&, const Vector3& = Vector3 :: ONE);
Array<Vector3> FindPath(const Vector3&, const Vector3&, const Vector3& extents = Vector3 :: ONE);
float GetAgentHeight() const;
float GetAgentMaxClimb() const;
float GetAgentMaxSlope() const;
float GetAgentRadius() const;
bool GetAnimationEnabled() const;
float GetAreaCost(uint) const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
float GetCellHeight() const;
float GetCellSize() const;
Component GetComponent(StringHash) const;
float GetDetailSampleDistance() const;
float GetDetailSampleMaxError() const;
float GetDistanceToWall(const Vector3&, float, const Vector3& = Vector3 :: ONE);
bool GetDrawNavAreas() const;
bool GetDrawOffMeshConnections() const;
float GetEdgeMaxError() const;
float GetEdgeMaxLength() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
String GetMeshName() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
IntVector2 GetNumTiles() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
NavmeshPartitionType GetPartitionType() const;
Vector3 GetRandomPoint();
Vector3 GetRandomPointInCircle(const Vector3&, float, const Vector3& = Vector3 :: ONE);
float GetRegionMergeSize() const;
float GetRegionMinSize() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
BoundingBox GetTileBoundingBox(const IntVector2&) const;
VectorBuffer GetTileData(const IntVector2&) const;
IntVector2 GetTileIndex(const Vector3&) const;
int GetTileSize() const;
StringHash GetType() const;
BoundingBox GetWorldBoundingBox() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTile(const IntVector2&) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInitialized() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
Vector3 MoveAlongSurface(const Vector3&, const Vector3&, const Vector3& = Vector3 :: ONE, int = 3);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
Vector3 Raycast(const Vector3&, const Vector3&, const Vector3& = Vector3 :: ONE);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllTiles();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void RemoveTile(const IntVector2&);
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAgentHeight(float);
void SetAgentMaxClimb(float);
void SetAgentMaxSlope(float);
void SetAgentRadius(float);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAreaCost(uint, float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCellHeight(float);
void SetCellSize(float);
void SetDetailSampleDistance(float);
void SetDetailSampleMaxError(float);
void SetDrawNavAreas(bool);
void SetDrawOffMeshConnections(bool);
void SetEdgeMaxError(float);
void SetEdgeMaxLength(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMeshName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetPadding(const Vector3&);
void SetPartitionType(NavmeshPartitionType);
void SetRegionMergeSize(float);
void SetRegionMinSize(float);
void SetTemporary(bool);
void SetTileSize(int);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetPadding() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const DynamicNavigationMesh() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
float agentHeight;
float agentMaxClimb;
float agentMaxSlope;
float agentRadius;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
/* readonly */
String category;
float cellHeight;
float cellSize;
float detailSampleDistance;
float detailSampleMaxError;
bool drawNavAreas;
bool drawOffMeshConnections;
float edgeMaxError;
float edgeMaxLength;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool initialized;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
IntVector2 numTiles;
ObjectAnimation objectAnimation;
Vector3 padding;
NavmeshPartitionType partitionType;
/* readonly */
int refs;
float regionMergeSize;
float regionMinSize;
/* readonly */
bool replicated;
bool temporary;
int tileSize;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
};

class NavigationPathPoint
{
public:
~NavigationPathPoint();
NavigationPathPoint();
// Methods:
NavigationPathPoint&  operator=(const NavigationPathPoint&);

// Properties:
uint8 areaID;
NavigationPathPointFlag flag;
Vector3 position;
};

class Network
{
public:
Network();
// Methods:
void AttemptNATPunchtrough(const String&, Scene, const VariantMap& = VariantMap ( ));
void BanAddress(const String&);
void BroadcastMessage(int, bool, bool, const VectorBuffer&, uint = 0);
void BroadcastRemoteEvent(Node, StringHash, bool, const VariantMap& = VariantMap ( ));
void BroadcastRemoteEvent(Scene, StringHash, bool, const VariantMap& = VariantMap ( ));
void BroadcastRemoteEvent(StringHash, bool, const VariantMap& = VariantMap ( ));
bool CheckRemoteEvent(StringHash) const;
bool Connect(const String&, uint16, Scene, const VariantMap& = VariantMap ( ));
void Disconnect(int = 0);
void DiscoverHosts(uint);
bool GetBlockEvents() const;
Array<Connection> GetClientConnections() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Connection GetServerConnection() const;
int GetSimulatedLatency() const;
float GetSimulatedPacketLoss() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
int GetUpdateFps() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool IsServerRunning() const;
HttpRequest MakeHttpRequest(const String&, const String& = String :: EMPTY, Array<String> = null, const String& = String :: EMPTY);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void PostUpdate(float);
operator RefCounted() const;
int Refs() const;
void RegisterRemoteEvent(StringHash);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SendPackageToClients(Scene, PackageFile);
void SetBlockEvents(bool);
void SetDiscoveryBeacon(const VariantMap&);
void SetGlobalVar(StringHash, const Variant&);
void SetNATServerInfo(const String&, uint16);
void SetPackageCacheDir(const String&);
void SetPassword(const String&);
void SetSimulatedLatency(int);
void SetSimulatedPacketLoss(float);
void SetUpdateFps(int);
void StartNATClient();
bool StartServer(uint16, uint = 128);
void StopServer();
const String& GetCategory() const;
const String& GetGUID() const;
const String& GetPackageCacheDir() const;
const String& GetTypeName() const;
void UnregisterAllRemoteEvents();
void UnregisterRemoteEvent(StringHash);
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
/* readonly */
Array<Connection> clientConnections;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
String guid;
String packageCacheDir;
/* readonly */
int refs;
/* readonly */
Connection serverConnection;
/* readonly */
bool serverRunning;
int simulatedLatency;
float simulatedPacketLoss;
/* readonly */
StringHash type;
/* readonly */
String typeName;
int updateFps;
/* readonly */
int weakRefs;
};

class NetworkPriority
{
public:
NetworkPriority();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
bool CheckUpdate(float, float&);
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAlwaysUpdateOwner() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
float GetBasePriority() const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
float GetDistanceFactor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetMinPriority() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlwaysUpdateOwner(bool);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePriority(float);
void SetBlockEvents(bool);
void SetDistanceFactor(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMinPriority(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool alwaysUpdateOwner;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
float basePriority;
/* readonly */
String category;
float distanceFactor;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float minPriority;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class NetworkState
{
public:
~NetworkState();
NetworkState();
// Methods:
NetworkState&  operator=(const NetworkState&);

// Properties:
uint64 interceptMask;
VariantMap previousVars;
};

class Node
{
public:
Node();
Node(const String&in);
// Methods:
void AddChild(Node, uint = M_MAX_UNSIGNED);
void AddComponent(Component, uint, CreateMode);
void AddListener(Component);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
Node Clone(CreateMode = REPLICATED);
Component CloneComponent(Component, CreateMode, uint = 0);
Component CloneComponent(Component, uint = 0);
Node CreateChild(const String& = String :: EMPTY, CreateMode = REPLICATED, uint = 0, bool = false);
Node CreateChild(uint, CreateMode, bool = false);
Component CreateComponent(StringHash, CreateMode = REPLICATED, uint = 0);
ScriptObject CreateScriptObject(ScriptFile, const String&, CreateMode mode = REPLICATED);
ScriptObject CreateScriptObject(const String&, const String&, CreateMode mode = REPLICATED);
Node CreateTemporaryChild(const String& = String :: EMPTY, CreateMode = REPLICATED, uint = 0);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Node GetChild(StringHash, bool = false) const;
Node GetChild(const String&, bool = false) const;
Node GetChild(uint) const;
Array<Node> GetChildren() const;
Array<Node> GetChildren(bool) const;
Array<Node> GetChildrenWithComponent(StringHash, bool = false) const;
Array<Node> GetChildrenWithScript(bool = false) const;
Array<Node> GetChildrenWithScript(const String&, bool = false) const;
Array<Node> GetChildrenWithTag(const String&, bool = false) const;
Component GetComponent(StringHash, bool = false) const;
Array<Component> GetComponents() const;
Array<Component> GetComponents(const String&, bool = false) const;
Array<Node> GetDependencyNodes() const;
Vector3 GetDirection() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
StringHash GetNameHash() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumComponents() const;
uint GetNumNetworkAttributes() const;
uint GetNumNetworkComponents() const;
uint GetNumPersistentChildren() const;
uint GetNumPersistentComponents() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Component GetOrCreateComponent(StringHash, CreateMode = REPLICATED, uint = 0);
Connection GetOwner() const;
Node GetParent() const;
Component GetParentComponent(StringHash, bool = false) const;
Vector2 GetPosition2D() const;
Vector3 GetRight() const;
float GetRotation2D() const;
Vector2 GetScale2D() const;
Scene GetScene() const;
ScriptObject GetScriptObject() const;
ScriptObject GetScriptObject(const String&) const;
Vector3 GetSignedWorldScale() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Matrix3x4 GetTransform() const;
StringHash GetType() const;
Vector3 GetUp() const;
Vector3 GetWorldDirection() const;
Vector3 GetWorldPosition() const;
Vector2 GetWorldPosition2D() const;
Vector3 GetWorldRight() const;
Quaternion GetWorldRotation() const;
float GetWorldRotation2D() const;
Vector3 GetWorldScale() const;
Vector2 GetWorldScale2D() const;
Vector3 GetWorldUp() const;
bool HasComponent(StringHash) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
bool IsChildOf(Node) const;
bool IsDirty() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool Load(Deserializer&, SceneResolver&, bool = true, bool = false, CreateMode = REPLICATED);
bool LoadJSON(const JSONValue&);
bool LoadJSON(const JSONValue&, SceneResolver&, bool = true, bool = false, CreateMode = REPLICATED);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, SceneResolver&, bool = true, bool = false, CreateMode = REPLICATED);
Vector3 LocalToWorld(const Vector3&) const;
Vector3 LocalToWorld(const Vector4&) const;
Vector2 LocalToWorld2D(const Vector2&) const;
bool LookAt(const Vector3&, const Vector3& = Vector3 :: UP, TransformSpace = TS_WORLD);
void MarkDirty();
void MarkNetworkUpdate();
void MarkReplicationDirty();
const Matrix3x4& GetWorldTransform() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void Pitch(float, TransformSpace = TS_LOCAL);
void PrepareNetworkUpdate();
const Quaternion& GetRotation() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllComponents();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(Node);
void RemoveChildren(bool, bool, bool);
void RemoveComponent(Component);
void RemoveComponent(StringHash);
void RemoveComponents(StringHash);
void RemoveComponents(bool, bool);
void RemoveInstanceDefault();
void RemoveListener(Component);
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ReorderComponent(Component, uint);
void ResetDeepEnabled();
void ResetScene();
void ResetToDefault();
void Roll(float, TransformSpace = TS_LOCAL);
void Rotate(const Quaternion&, TransformSpace = TS_LOCAL);
void Rotate2D(float, TransformSpace = TS_LOCAL);
void RotateAround(const Vector3&, const Quaternion&, TransformSpace = TS_LOCAL);
void RotateAround2D(const Vector2&, float, TransformSpace = TS_LOCAL);
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(File);
bool SaveJSON(JSONValue&) const;
bool SaveJSON(Serializer&, const String& = "\t") const;
bool SaveJSON(VectorBuffer&);
bool SaveXML(File, const String& = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& = "\t");
bool SaveXML(XMLElement&) const;
void Scale(const Vector3&);
void Scale(float);
void Scale2D(const Vector2&);
operator Scene() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetDeepEnabled(bool);
void SetDirection(const Vector3&);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetID(uint);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetName(const String&);
void SetNetPositionAttr(const Vector3&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOwner(Connection);
void SetParent(Node);
void SetPosition(const Vector3&);
void SetPosition2D(const Vector2&);
void SetPosition2D(float, float);
void SetPositionSilent(const Vector3&);
void SetRotation(const Quaternion&);
void SetRotation2D(float);
void SetRotationSilent(const Quaternion&);
void SetScale(const Vector3&);
void SetScale(float);
void SetScale2D(const Vector2&);
void SetScale2D(float, float);
void SetScaleSilent(const Vector3&);
void SetScene(Scene);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTransform(const Matrix3x4&);
void SetTransform(const Vector3&, const Quaternion&);
void SetTransform(const Vector3&, const Quaternion&, const Vector3&);
void SetTransform(const Vector3&, const Quaternion&, float);
void SetTransform2D(const Vector2&, float);
void SetTransform2D(const Vector2&, float, const Vector2&);
void SetTransform2D(const Vector2&, float, float);
void SetTransformSilent(const Vector3&, const Quaternion&, const Vector3&);
void SetVar(StringHash, const Variant&);
void SetWorldDirection(const Vector3&);
void SetWorldPosition(const Vector3&);
void SetWorldPosition2D(const Vector2&);
void SetWorldPosition2D(float, float);
void SetWorldRotation(const Quaternion&);
void SetWorldRotation2D(float);
void SetWorldScale(const Vector3&);
void SetWorldScale(float);
void SetWorldScale2D(const Vector2&);
void SetWorldScale2D(float, float);
void SetWorldTransform(const Matrix3x4&);
void SetWorldTransform(const Vector3&, const Quaternion&);
void SetWorldTransform(const Vector3&, const Quaternion&, const Vector3&);
void SetWorldTransform(const Vector3&, const Quaternion&, float);
void SetWorldTransform2D(const Vector2&, float);
void SetWorldTransform2D(const Vector2&, float, const Vector2&);
void SetWorldTransform2D(const Vector2&, float, float);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void Translate(const Vector3&, TransformSpace = TS_LOCAL);
void Translate2D(const Vector2&, TransformSpace = TS_LOCAL);
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector3& GetNetPositionAttr() const;
const Vector3& GetPosition() const;
const Vector3& GetScale() const;
int WeakRefs() const;
Vector3 WorldToLocal(const Vector3&) const;
Vector3 WorldToLocal(const Vector4&) const;
Vector2 WorldToLocal2D(const Vector2&) const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
void Yaw(float, TransformSpace = TS_LOCAL);
operator const Animatable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Scene() const;
operator const Serializable() const;

// Properties:
/* readonly */
Array<Node> allChildrenByName;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
/* readonly */
Array<Node> children;
/* readonly */
Array<Node> childrenByName;
/* readonly */
Array<Component> components;
Vector3 direction;
bool enabled;
/* readonly */
bool enabledSelf;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
uint id;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
/* readonly */
uint numComponents;
ObjectAnimation objectAnimation;
Connection owner;
Node parent;
Vector3 position;
Vector2 position2D;
/* readonly */
int refs;
/* readonly */
bool replicated;
/* readonly */
Vector3 right;
Quaternion rotation;
float rotation2D;
Vector3 scale;
Vector2 scale2D;
/* readonly */
Scene scene;
/* readonly */
ScriptObject scriptObject;
/* readonly */
Vector3 signedWorldScale;
/* readonly */
Array<String> tags;
bool temporary;
/* readonly */
Matrix3x4 transform;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
Vector3 up;
/* readonly */
VariantMap vars;
/* readonly */
int weakRefs;
Vector3 worldDirection;
Vector3 worldPosition;
Vector2 worldPosition2D;
/* readonly */
Vector3 worldRight;
Quaternion worldRotation;
float worldRotation2D;
Vector3 worldScale;
Vector2 worldScale2D;
/* readonly */
Matrix3x4 worldTransform;
/* readonly */
Vector3 worldUp;
};

class NodeImpl
{
public:
~NodeImpl();
NodeImpl();
// Methods:
NodeImpl&  operator=(const NodeImpl&);

// Properties:
VectorBuffer attrBuffer;
String name;
StringHash nameHash;
};

class NodeReplicationState
{
public:
~NodeReplicationState();
NodeReplicationState();
// Methods:
NodeReplicationState&  operator=(const NodeReplicationState&);

// Properties:
DirtyBits dirtyAttributes;
bool markedDirty;
float priorityAcc;
};

class Object
{
public:
// Methods:
operator Animatable() const;
operator AnimatedModel() const;
operator AnimatedSprite2D() const;
operator Animation() const;
operator AnimationController() const;
operator AnimationSet2D() const;
operator Audio() const;
operator BillboardSet() const;
operator BorderImage() const;
operator Button() const;
operator Camera() const;
operator CheckBox() const;
operator CollisionBox2D() const;
operator CollisionChain2D() const;
operator CollisionCircle2D() const;
operator CollisionEdge2D() const;
operator CollisionPolygon2D() const;
operator CollisionShape2D() const;
operator CollisionShape() const;
operator Component() const;
operator Connection() const;
operator Console() const;
operator ConstantBuffer() const;
operator Constraint2D() const;
operator Constraint() const;
operator ConstraintDistance2D() const;
operator ConstraintFriction2D() const;
operator ConstraintGear2D() const;
operator ConstraintMotor2D() const;
operator ConstraintMouse2D() const;
operator ConstraintPrismatic2D() const;
operator ConstraintPulley2D() const;
operator ConstraintRevolute2D() const;
operator ConstraintRope2D() const;
operator ConstraintWeld2D() const;
operator ConstraintWheel2D() const;
operator CrowdAgent() const;
operator CrowdManager() const;
operator Cursor() const;
operator CustomGeometry() const;
operator Database() const;
operator DebugHud() const;
operator DebugRenderer() const;
operator DecalSet() const;
operator Drawable2D() const;
operator Drawable() const;
operator DropDownList() const;
operator DynamicNavigationMesh() const;
operator Engine() const;
operator EventProfiler() const;
operator File() const;
operator FileSelector() const;
operator FileSystem() const;
operator FileWatcher() const;
operator Font() const;
operator Geometry() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
operator Graphics() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
operator IKConstraint() const;
operator IKEffector() const;
operator IKSolver() const;
operator Image() const;
operator IndexBuffer() const;
operator Input() const;
bool IsInstanceOf(StringHash) const;
operator JSONFile() const;
operator Light() const;
operator LineEdit() const;
operator ListView() const;
operator Localization() const;
operator Log() const;
operator LogicComponent() const;
operator Material() const;
operator Menu() const;
operator MessageBox() const;
operator Model() const;
operator NamedPipe() const;
operator NavArea() const;
operator Navigable() const;
operator NavigationMesh() const;
operator Network() const;
operator NetworkPriority() const;
operator Node() const;
operator ObjectAnimation() const;
operator Obstacle() const;
operator OcclusionBuffer() const;
operator Octree() const;
operator OffMeshConnection() const;
void OnEvent(Object, StringHash, VariantMap&);
operator PackageFile() const;
operator ParticleEffect2D() const;
operator ParticleEffect() const;
operator ParticleEmitter2D() const;
operator ParticleEmitter() const;
operator PhysicsWorld2D() const;
operator PhysicsWorld() const;
operator Profiler() const;
operator ProgressBar() const;
operator RaycastVehicle() const;
operator RefCounted() const;
int Refs() const;
operator Renderer2D() const;
operator Renderer() const;
operator Resource() const;
operator ResourceCache() const;
operator ResourceWithMetadata() const;
operator RibbonTrail() const;
operator RigidBody2D() const;
operator RigidBody() const;
operator Scene() const;
operator ScriptInstance() const;
operator ScrollBar() const;
operator ScrollView() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
operator Shader() const;
operator ShaderPrecache() const;
operator Skybox() const;
operator Slider() const;
operator SmoothedTransform() const;
operator Sound() const;
operator SoundListener() const;
operator SoundSource3D() const;
operator SoundSource() const;
operator SplinePath() const;
operator Sprite2D() const;
operator Sprite() const;
operator SpriteSheet2D() const;
operator StaticModel() const;
operator StaticModelGroup() const;
operator StaticSprite2D() const;
operator StretchableSprite2D() const;
const String& GetCategory() const;
const String& GetTypeName() const;
operator Technique() const;
operator Terrain() const;
operator TerrainPatch() const;
operator Text3D() const;
operator Text() const;
operator Texture2D() const;
operator Texture2DArray() const;
operator Texture3D() const;
operator Texture() const;
operator TextureCube() const;
operator TileMap2D() const;
operator TileMapLayer2D() const;
operator Time() const;
operator TmxFile2D() const;
operator ToolTip() const;
operator UI() const;
operator UIComponent() const;
operator UIElement() const;
operator UISelectable() const;
operator UnknownComponent() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
operator ValueAnimation() const;
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
operator VertexBuffer() const;
operator View3D() const;
operator View() const;
operator Viewport() const;
int WeakRefs() const;
operator Window() const;
operator WorkQueue() const;
operator XMLFile() const;
operator Zone() const;
operator const Animatable() const;
operator const AnimatedModel() const;
operator const AnimatedSprite2D() const;
operator const Animation() const;
operator const AnimationController() const;
operator const AnimationSet2D() const;
operator const Audio() const;
operator const BillboardSet() const;
operator const BorderImage() const;
operator const Button() const;
operator const Camera() const;
operator const CheckBox() const;
operator const CollisionBox2D() const;
operator const CollisionChain2D() const;
operator const CollisionCircle2D() const;
operator const CollisionEdge2D() const;
operator const CollisionPolygon2D() const;
operator const CollisionShape2D() const;
operator const CollisionShape() const;
operator const Component() const;
operator const Connection() const;
operator const Console() const;
operator const ConstantBuffer() const;
operator const Constraint2D() const;
operator const Constraint() const;
operator const ConstraintDistance2D() const;
operator const ConstraintFriction2D() const;
operator const ConstraintGear2D() const;
operator const ConstraintMotor2D() const;
operator const ConstraintMouse2D() const;
operator const ConstraintPrismatic2D() const;
operator const ConstraintPulley2D() const;
operator const ConstraintRevolute2D() const;
operator const ConstraintRope2D() const;
operator const ConstraintWeld2D() const;
operator const ConstraintWheel2D() const;
operator const CrowdAgent() const;
operator const CrowdManager() const;
operator const Cursor() const;
operator const CustomGeometry() const;
operator const Database() const;
operator const DebugHud() const;
operator const DebugRenderer() const;
operator const DecalSet() const;
operator const Drawable2D() const;
operator const Drawable() const;
operator const DropDownList() const;
operator const DynamicNavigationMesh() const;
operator const Engine() const;
operator const EventProfiler() const;
operator const File() const;
operator const FileSelector() const;
operator const FileSystem() const;
operator const FileWatcher() const;
operator const Font() const;
operator const Geometry() const;
operator const Graphics() const;
operator const IKConstraint() const;
operator const IKEffector() const;
operator const IKSolver() const;
operator const Image() const;
operator const IndexBuffer() const;
operator const Input() const;
operator const JSONFile() const;
operator const Light() const;
operator const LineEdit() const;
operator const ListView() const;
operator const Localization() const;
operator const Log() const;
operator const LogicComponent() const;
operator const Material() const;
operator const Menu() const;
operator const MessageBox() const;
operator const Model() const;
operator const NamedPipe() const;
operator const NavArea() const;
operator const Navigable() const;
operator const NavigationMesh() const;
operator const Network() const;
operator const NetworkPriority() const;
operator const Node() const;
operator const ObjectAnimation() const;
operator const Obstacle() const;
operator const OcclusionBuffer() const;
operator const Octree() const;
operator const OffMeshConnection() const;
operator const PackageFile() const;
operator const ParticleEffect2D() const;
operator const ParticleEffect() const;
operator const ParticleEmitter2D() const;
operator const ParticleEmitter() const;
operator const PhysicsWorld2D() const;
operator const PhysicsWorld() const;
operator const Profiler() const;
operator const ProgressBar() const;
operator const RaycastVehicle() const;
operator const RefCounted() const;
operator const Renderer2D() const;
operator const Renderer() const;
operator const Resource() const;
operator const ResourceCache() const;
operator const ResourceWithMetadata() const;
operator const RibbonTrail() const;
operator const RigidBody2D() const;
operator const RigidBody() const;
operator const Scene() const;
operator const ScriptInstance() const;
operator const ScrollBar() const;
operator const ScrollView() const;
operator const Serializable() const;
operator const Shader() const;
operator const ShaderPrecache() const;
operator const Skybox() const;
operator const Slider() const;
operator const SmoothedTransform() const;
operator const Sound() const;
operator const SoundListener() const;
operator const SoundSource3D() const;
operator const SoundSource() const;
operator const SplinePath() const;
operator const Sprite2D() const;
operator const Sprite() const;
operator const SpriteSheet2D() const;
operator const StaticModel() const;
operator const StaticModelGroup() const;
operator const StaticSprite2D() const;
operator const StretchableSprite2D() const;
operator const Technique() const;
operator const Terrain() const;
operator const TerrainPatch() const;
operator const Text3D() const;
operator const Text() const;
operator const Texture2D() const;
operator const Texture2DArray() const;
operator const Texture3D() const;
operator const Texture() const;
operator const TextureCube() const;
operator const TileMap2D() const;
operator const TileMapLayer2D() const;
operator const Time() const;
operator const TmxFile2D() const;
operator const ToolTip() const;
operator const UI() const;
operator const UIComponent() const;
operator const UIElement() const;
operator const UISelectable() const;
operator const UnknownComponent() const;
operator const ValueAnimation() const;
operator const VertexBuffer() const;
operator const View3D() const;
operator const View() const;
operator const Viewport() const;
operator const Window() const;
operator const WorkQueue() const;
operator const XMLFile() const;
operator const Zone() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ObjectAnimation
{
public:
ObjectAnimation();
// Methods:
void AddAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
bool BeginLoad(Deserializer&);
bool EndLoad();
AsyncLoadState GetAsyncLoadState() const;
ValueAnimation GetAttributeAnimation(const String&) const;
ValueAnimationInfo GetAttributeAnimationInfo(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RemoveAttributeAnimation(ValueAnimation);
void RemoveAttributeAnimation(const String&);
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
Array<ValueAnimation> attributeAnimations;
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
/* readonly */
Array<float> speeds;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
/* readonly */
Array<WrapMode> wrapModes;
};

class ObjectFactory
{
public:
// Methods:
Object CreateObject();
StringHash GetType() const;
operator RefCounted() const;
int Refs() const;
const String& GetTypeName() const;
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class Obstacle
{
public:
Obstacle();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
void DrawDebugGeometry(bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetHeight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
uint GetObstacleID() const;
float GetRadius() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(float);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetRadius(float);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
float height;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
uint obstacleId;
float radius;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class OcclusionBatch
{
public:
~OcclusionBatch();
OcclusionBatch();
// Methods:
OcclusionBatch&  operator=(const OcclusionBatch&);

// Properties:
uint drawCount;
uint drawStart;
uint indexSize;
Matrix3x4 model;
uint vertexSize;
};

class OcclusionBuffer
{
public:
OcclusionBuffer();
// Methods:
void BuildDepthHierarchy();
void Clear();
void DrawBatch(const OcclusionBatch&, uint);
void DrawTriangles();
bool GetBlockEvents() const;
CullMode GetCullMode() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
int GetHeight() const;
uint GetMaxTriangles() const;
uint GetNumTriangles() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
int GetWidth() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool IsThreaded() const;
bool IsVisible(const BoundingBox&) const;
const Matrix3x4& GetView() const;
const Matrix4& GetProjection() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void Reset();
void ResetUseTimer();
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetCullMode(CullMode);
void SetGlobalVar(StringHash, const Variant&);
void SetMaxTriangles(uint);
bool SetSize(int, int, bool);
void SetView(Camera);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class OcclusionBufferData
{
public:
~OcclusionBufferData();
OcclusionBufferData();
// Methods:
OcclusionBufferData&  operator=(const OcclusionBufferData&);

// Properties:
bool used;
};

class Octree
{
public:
Octree();
// Methods:
void AddDrawable(Drawable);
void AddManualDrawable(Drawable);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetCullingBox() const;
const BoundingBox& GetWorldBoundingBox() const;
void CancelUpdate(Drawable);
bool CheckDrawableFit(const BoundingBox&) const;
void CleanupConnection(Connection);
operator Component() const;
void DeleteChild(uint);
void DrawDebugGeometry(DebugRenderer, bool);
void DrawDebugGeometry(bool);
Array<Drawable> GetAllDrawables(uint8 = DRAWABLE_ANY, uint = DEFAULT_VIEWMASK);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
Array<Drawable> GetDrawables(const BoundingBox&, uint8 = DRAWABLE_ANY, uint = DEFAULT_VIEWMASK);
Array<Drawable> GetDrawables(const Frustum&, uint8 = DRAWABLE_ANY, uint = DEFAULT_VIEWMASK);
Array<Drawable> GetDrawables(const Sphere&, uint8 = DRAWABLE_ANY, uint = DEFAULT_VIEWMASK);
Array<Drawable> GetDrawables(const Vector3&, uint8 = DRAWABLE_ANY, uint = DEFAULT_VIEWMASK);
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLevel() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumDrawables() const;
uint GetNumLevels() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Octree GetRoot() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
void InsertDrawable(Drawable);
bool IsEmpty();
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
void QueueUpdate(Drawable);
Array<RayQueryResult> Raycast(const Ray&, RayQueryLevel = RAY_TRIANGLE, float = M_INFINITY, uint8 = DRAWABLE_ANY, uint = DEFAULT_VIEWMASK) const;
RayQueryResult RaycastSingle(const Ray&, RayQueryLevel = RAY_TRIANGLE, float = M_INFINITY, uint8 = DRAWABLE_ANY, uint = DEFAULT_VIEWMASK) const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveDrawable(Drawable, bool = true);
void RemoveInstanceDefault();
void RemoveManualDrawable(Drawable);
void RemoveObjectAnimation();
void ResetRoot();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetSize(const BoundingBox&, uint);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
uint numLevels;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
};

class OctreeQueryResult
{
public:
~OctreeQueryResult();
OctreeQueryResult();
// Methods:
OctreeQueryResult&  operator=(const OctreeQueryResult&);
};

class OffMeshConnection
{
public:
OffMeshConnection();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
uint GetAreaID() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
Node GetEndPoint() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetMask() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetRadius() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsBidirectional() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAreaID(uint);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBidirectional(bool);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetEndPoint(Node);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMask(uint);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetRadius(float);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
uint areaID;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool bidirectional;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Node endPoint;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
uint mask;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
float radius;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class OggVorbisSoundStream
{
public:
OggVorbisSoundStream(Sound&);
// Methods:
float GetFrequency() const;
uint GetIntFrequency() const;
uint GetSampleSize() const;
bool GetStopAtEnd() const;
bool IsSixteenBit() const;
bool IsStereo() const;
operator RefCounted() const;
int Refs() const;
bool Seek(uint);
void SetFormat(uint, bool, bool);
void SetStopAtEnd(bool);
operator SoundStream() const;
int WeakRefs() const;
operator const RefCounted() const;
operator const SoundStream() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class PackageDownload
{
public:
~PackageDownload();
PackageDownload();
// Methods:
PackageDownload&  operator=(const PackageDownload&);

// Properties:
uint checksum;
bool initiated;
String name;
uint totalFragments;
};

class PackageEntry
{
public:
// Methods:
PackageEntry&  operator=(const PackageEntry&);

// Properties:
uint checksum;
uint offset;
uint size;
};

class PackageFile
{
public:
PackageFile();
PackageFile(const String&in, uint = 0);
// Methods:
bool Exists(const String&) const;
bool GetBlockEvents() const;
uint GetChecksum() const;
Array<String> GetEntryNames() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
StringHash GetNameHash() const;
uint GetNumFiles() const;
Object GetSubsystem(StringHash) const;
uint GetTotalDataSize() const;
uint GetTotalSize() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsCompressed() const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
bool Open(const String&, uint = 0);
operator RefCounted() const;
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
/* readonly */
uint checksum;
/* readonly */
bool compressed;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
String name;
/* readonly */
uint numFiles;
/* readonly */
int refs;
/* readonly */
uint totalDataSize;
/* readonly */
uint totalSize;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class PackageUpload
{
public:
~PackageUpload();
PackageUpload();
// Methods:
PackageUpload&  operator=(const PackageUpload&);

// Properties:
uint fragment;
uint totalFragments;
};

class Particle
{
public:
~Particle();
Particle();
// Methods:
Particle&  operator=(const Particle&);

// Properties:
uint colorIndex;
float rotationSpeed;
float scale;
Vector2 size;
uint texIndex;
float timeToLive;
float timer;
Vector3 velocity;
};

class Particle2D
{
public:
~Particle2D();
Particle2D();
// Methods:
Particle2D&  operator=(const Particle2D&);

// Properties:
Color color;
Color colorDelta;
float emitRadius;
float emitRadiusDelta;
float emitRotation;
float emitRotationDelta;
Vector3 position;
float radialAcceleration;
float rotation;
float rotationDelta;
float size;
float sizeDelta;
Vector2 startPos;
float tangentialAcceleration;
float timeToLive;
Vector2 velocity;
};

class ParticleEffect
{
public:
ParticleEffect();
// Methods:
void AddColorFrame(const ColorFrame&);
void AddColorTime(const Color&, float);
void AddTextureFrame(const TextureFrame&);
void AddTextureTime(const Rect&, float);
bool BeginLoad(Deserializer&);
ParticleEffect Clone(const String& = String :: EMPTY) const;
bool EndLoad();
float GetActiveTime() const;
float GetAnimationLodBias() const;
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
ColorFrame GetColorFrame(uint) const;
float GetDampingForce() const;
EmitterType GetEmitterType() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FaceCameraMode GetFaceCameraMode() const;
float GetInactiveTime() const;
Material GetMaterial() const;
float GetMaxEmissionRate() const;
float GetMaxRotation() const;
float GetMaxRotationSpeed() const;
float GetMaxTimeToLive() const;
float GetMaxVelocity() const;
uint GetMemoryUse() const;
float GetMinEmissionRate() const;
float GetMinRotation() const;
float GetMinRotationSpeed() const;
float GetMinTimeToLive() const;
float GetMinVelocity() const;
StringHash GetNameHash() const;
uint GetNumColorFrames() const;
uint GetNumParticles() const;
uint GetNumTextureFrames() const;
Vector3 GetRandomDirection() const;
float GetRandomRotation() const;
float GetRandomRotationSpeed() const;
Vector2 GetRandomSize() const;
float GetRandomTimeToLive() const;
float GetRandomVelocity() const;
float GetSizeAdd() const;
float GetSizeMul() const;
Object GetSubsystem(StringHash) const;
TextureFrame GetTextureFrame(uint) const;
StringHash GetType() const;
bool GetUpdateInvisible() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsFixedScreenSize() const;
bool IsInstanceOf(StringHash) const;
bool IsRelative() const;
bool IsScaled() const;
bool IsSorted() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool Load(const XMLElement&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RemoveColorFrame(uint);
void RemoveTextureFrame(uint);
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(XMLElement&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetActiveTime(float);
void SetAnimationLodBias(float);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetColorFrame(uint, const ColorFrame&);
void SetConstantForce(const Vector3&);
void SetDampingForce(float);
void SetEmitterSize(const Vector3&);
void SetEmitterType(EmitterType);
void SetFaceCameraMode(FaceCameraMode);
void SetFixedScreenSize(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInactiveTime(float);
void SetMaterial(Material);
void SetMaxDirection(const Vector3&);
void SetMaxEmissionRate(float);
void SetMaxParticleSize(const Vector2&);
void SetMaxRotation(float);
void SetMaxRotationSpeed(float);
void SetMaxTimeToLive(float);
void SetMaxVelocity(float);
void SetMemoryUse(uint);
void SetMinDirection(const Vector3&);
void SetMinEmissionRate(float);
void SetMinParticleSize(const Vector2&);
void SetMinRotation(float);
void SetMinRotationSpeed(float);
void SetMinTimeToLive(float);
void SetMinVelocity(float);
void SetName(const String&);
void SetNumColorFrames(uint);
void SetNumParticles(uint);
void SetNumTextureFrames(uint);
void SetRelative(bool);
void SetScaled(bool);
void SetSizeAdd(float);
void SetSizeMul(float);
void SetSorted(bool);
void SetTextureFrame(uint, const TextureFrame&);
void SetUpdateInvisible(bool);
void SortColorFrames();
void SortTextureFrames();
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetMaxParticleSize() const;
const Vector2& GetMinParticleSize() const;
const Vector3& GetConstantForce() const;
const Vector3& GetEmitterSize() const;
const Vector3& GetMaxDirection() const;
const Vector3& GetMinDirection() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
float activeTime;
float animationLodBias;
/* readonly */
String category;
Vector3 constantForce;
float dampingForce;
Vector3 emitterSize;
EmitterType emitterType;
FaceCameraMode faceCameraMode;
bool fixedScreenSize;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
float inactiveTime;
Material material;
Vector3 maxDirection;
float maxEmissionRate;
Vector2 maxParticleSize;
float maxRotation;
float maxRotationSpeed;
float maxTimeToLive;
float maxVelocity;
/* readonly */
uint memoryUse;
Vector3 minDirection;
float minEmissionRate;
Vector2 minParticleSize;
float minRotation;
float minRotationSpeed;
float minTimeToLive;
float minVelocity;
String name;
uint numColorFrames;
uint numParticles;
uint numTextureFrames;
/* readonly */
int refs;
bool relative;
bool scaled;
float sizeAdd;
float sizeMul;
bool sorted;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool updateInvisible;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class ParticleEffect2D
{
public:
ParticleEffect2D();
// Methods:
bool BeginLoad(Deserializer&);
ParticleEffect2D Clone(const String& = String :: EMPTY) const;
const Color& GetFinishColor() const;
const Color& GetFinishColorVariance() const;
const Color& GetStartColor() const;
const Color& GetStartColorVariance() const;
bool EndLoad();
float GetAngle() const;
float GetAngleVariance() const;
AsyncLoadState GetAsyncLoadState() const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
float GetDuration() const;
EmitterType2D GetEmitterType() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFinishParticleSize() const;
float GetFinishParticleSizeVariance() const;
int GetMaxParticles() const;
float GetMaxRadius() const;
float GetMaxRadiusVariance() const;
uint GetMemoryUse() const;
float GetMinRadius() const;
float GetMinRadiusVariance() const;
StringHash GetNameHash() const;
float GetParticleLifeSpan() const;
float GetParticleLifespanVariance() const;
float GetRadialAccelVariance() const;
float GetRadialAcceleration() const;
float GetRotatePerSecond() const;
float GetRotatePerSecondVariance() const;
float GetRotationEnd() const;
float GetRotationEndVariance() const;
float GetRotationStart() const;
float GetRotationStartVariance() const;
float GetSpeed() const;
float GetSpeedVariance() const;
Sprite2D GetSprite() const;
float GetStartParticleSize() const;
float GetStartParticleSizeVariance() const;
Object GetSubsystem(StringHash) const;
float GetTangentialAccelVariance() const;
float GetTangentialAcceleration() const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAngle(float);
void SetAngleVariance(float);
void SetAsyncLoadState(AsyncLoadState);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetDuration(float);
void SetEmitterType(EmitterType2D);
void SetFinishColor(const Color&);
void SetFinishColorVariance(const Color&);
void SetFinishParticleSize(float);
void SetFinishParticleSizeVariance(float);
void SetGlobalVar(StringHash, const Variant&);
void SetGravity(const Vector2&);
void SetMaxParticles(int);
void SetMaxRadius(float);
void SetMaxRadiusVariance(float);
void SetMemoryUse(uint);
void SetMinRadius(float);
void SetMinRadiusVariance(float);
void SetName(const String&);
void SetParticleLifeSpan(float);
void SetParticleLifespanVariance(float);
void SetRadialAccelVariance(float);
void SetRadialAcceleration(float);
void SetRotatePerSecond(float);
void SetRotatePerSecondVariance(float);
void SetRotationEnd(float);
void SetRotationEndVariance(float);
void SetRotationStart(float);
void SetRotationStartVariance(float);
void SetSourcePositionVariance(const Vector2&);
void SetSpeed(float);
void SetSpeedVariance(float);
void SetSprite(Sprite2D);
void SetStartColor(const Color&);
void SetStartColorVariance(const Color&);
void SetStartParticleSize(float);
void SetStartParticleSizeVariance(float);
void SetTangentialAccelVariance(float);
void SetTangentialAcceleration(float);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetGravity() const;
const Vector2& GetSourcePositionVariance() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class ParticleEmitter
{
public:
ParticleEmitter();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void ApplyEffect();
operator BillboardSet() const;
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
void Commit();
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
float GetAnimationLodBias() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
AutoRemoveMode GetAutoRemoveMode() const;
Billboard GetBillboard(uint);
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
ParticleEffect GetEffect() const;
ResourceRef GetEffectAttr() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FaceCameraMode GetFaceCameraMode() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinAngle() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumBillboards() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
uint GetNumParticles() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
bool GetSerializeParticles() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEmitting() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsFixedScreenSize() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsRelative() const;
bool IsReplicated() const;
bool IsScaled() const;
bool IsSorted() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllParticles();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void Reset();
void ResetEmissionTimer();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationLodBias(float);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAutoRemoveMode(AutoRemoveMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEffect(ParticleEffect);
void SetEffectAttr(const ResourceRef&);
void SetEmitting(bool);
void SetEnabled(bool);
void SetFaceCameraMode(FaceCameraMode);
void SetFixedScreenSize(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxLights(uint);
void SetMinAngle(float);
void SetMinMaxZ(float, float);
void SetNumBillboards(uint);
void SetNumParticles(uint);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetRelative(bool);
void SetScaled(bool);
void SetSerializeParticles(bool);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetSorted(bool);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BillboardSet() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
float animationLodBias;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
AutoRemoveMode autoRemoveMode;
/* readonly */
Array<Billboard> billboards;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
ParticleEffect effect;
bool emitting;
bool enabled;
/* readonly */
bool enabledEffective;
FaceCameraMode faceCameraMode;
bool fixedScreenSize;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
Material material;
uint maxLights;
float minAngle;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
uint numBillboards;
uint numParticles;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
/* readonly */
int refs;
bool relative;
/* readonly */
bool replicated;
bool scaled;
bool serializeParticles;
float shadowDistance;
uint shadowMask;
bool sorted;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class ParticleEmitter2D
{
public:
ParticleEmitter2D();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable2D() const;
operator Drawable() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
ParticleEffect2D GetEffect() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayer() const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
uint GetMaxLights() const;
uint GetMaxParticles() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
int GetOrderInLayer() const;
ResourceRef GetParticleEffectAttr() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Sprite2D GetSprite() const;
ResourceRef GetSpriteAttr() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEmitting() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEffect(ParticleEffect2D);
void SetEmitting(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLayer(int);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaxLights(uint);
void SetMaxParticles(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOrderInLayer(int);
void SetParticleEffectAttr(const ResourceRef&);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetSprite(Sprite2D);
void SetSpriteAttr(const ResourceRef&);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable2D() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
ParticleEffect2D effect;
bool emitting;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
int layer;
uint lightMask;
float lodBias;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
int orderInLayer;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
Sprite2D sprite;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class Pass
{
public:
Pass(const String&in);
// Methods:
bool GetAlphaToCoverage() const;
BlendMode GetBlendMode() const;
CullMode GetCullMode() const;
CompareMode GetDepthTestMode() const;
bool GetDepthWrite() const;
String GetEffectivePixelShaderDefines() const;
String GetEffectiveVertexShaderDefines() const;
uint GetIndex() const;
PassLightingMode GetLightingMode() const;
Array<ShaderVariation> GetPixelShaders();
Array<ShaderVariation> GetPixelShaders(const StringHash&);
uint GetShadersLoadedFrameNumber() const;
Array<ShaderVariation> GetVertexShaders();
Array<ShaderVariation> GetVertexShaders(const StringHash&);
bool IsDesktop() const;
void MarkShadersLoaded(uint);
operator RefCounted() const;
int Refs() const;
void ReleaseShaders();
void SetAlphaToCoverage(bool);
void SetBlendMode(BlendMode);
void SetCullMode(CullMode);
void SetDepthTestMode(CompareMode);
void SetDepthWrite(bool);
void SetIsDesktop(bool);
void SetLightingMode(PassLightingMode);
void SetPixelShader(const String&);
void SetPixelShaderDefineExcludes(const String&);
void SetPixelShaderDefines(const String&);
void SetVertexShader(const String&);
void SetVertexShaderDefineExcludes(const String&);
void SetVertexShaderDefines(const String&);
const String& GetName() const;
const String& GetPixelShader() const;
const String& GetPixelShaderDefineExcludes() const;
const String& GetPixelShaderDefines() const;
const String& GetVertexShader() const;
const String& GetVertexShaderDefineExcludes() const;
const String& GetVertexShaderDefines() const;
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
bool alphaToCoverage;
BlendMode blendMode;
CullMode cullMode;
CompareMode depthTestMode;
bool depthWrite;
bool desktop;
PassLightingMode lightingMode;
String pixelShader;
String pixelShaderDefineExcludes;
String pixelShaderDefines;
/* readonly */
int refs;
String vertexShader;
String vertexShaderDefineExcludes;
String vertexShaderDefines;
/* readonly */
int weakRefs;
};

class PerThreadSceneResult
{
public:
~PerThreadSceneResult();
PerThreadSceneResult();
// Methods:
PerThreadSceneResult&  operator=(const PerThreadSceneResult&);

// Properties:
float maxZ;
float minZ;
};

class PhysicsRaycastResult
{
public:
~PhysicsRaycastResult();
PhysicsRaycastResult();
// Methods:
PhysicsRaycastResult&  operator=(const PhysicsRaycastResult&);

// Properties:
/* readonly */
RigidBody body;
float distance;
float hitFraction;
Vector3 normal;
Vector3 position;
};

class PhysicsRaycastResult2D
{
public:
~PhysicsRaycastResult2D();
PhysicsRaycastResult2D();
// Methods:
PhysicsRaycastResult2D&  operator=(const PhysicsRaycastResult2D&);

// Properties:
/* readonly */
RigidBody2D body;
float distance;
Vector2 normal;
Vector2 position;
};

class PhysicsWorld
{
public:
PhysicsWorld();
// Methods:
void AddCollisionShape(CollisionShape);
void AddConstraint(Constraint);
void AddDelayedWorldTransform(const DelayedWorldTransform&);
void AddRigidBody(RigidBody);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
void CleanupGeometryCache();
operator Component() const;
PhysicsRaycastResult ConvexCast(CollisionShape, const Vector3&, const Quaternion&, const Vector3&, const Quaternion&, uint = 0xffff);
void ConvexCast(PhysicsRaycastResult&, CollisionShape, const Vector3&, const Quaternion&, const Vector3&, const Quaternion&, uint = M_MAX_UNSIGNED);
void DrawDebugGeometry(DebugRenderer, bool);
void DrawDebugGeometry(bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Array<RigidBody> GetCollidingBodies(RigidBody);
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
int GetFps() const;
Vector3 GetGravity() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
bool GetInternalEdge() const;
bool GetInterpolation() const;
float GetMaxNetworkAngularVelocity() const;
int GetMaxSubSteps() const;
Node GetNode() const;
uint GetNumAttributes() const;
int GetNumIterations() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Array<RigidBody> GetRigidBodies(RigidBody);
Array<RigidBody> GetRigidBodies(const BoundingBox&, uint collisionMask = 0xffff);
Array<RigidBody> GetRigidBodies(const Sphere&, uint = 0xffff);
Scene GetScene() const;
bool GetSplitImpulse() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsApplyingTransforms() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsSimulating() const;
bool IsTemporary() const;
bool IsUpdateEnabled() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
Array<PhysicsRaycastResult> Raycast(const Ray&, float, uint = 0xffff);
void RaycastSingle(PhysicsRaycastResult&, const Ray&, float, uint = M_MAX_UNSIGNED);
PhysicsRaycastResult RaycastSingle(const Ray&, float, uint = 0xffff);
void RaycastSingleSegmented(PhysicsRaycastResult&, const Ray&, float, float, uint = M_MAX_UNSIGNED, float = 0.1f);
PhysicsRaycastResult RaycastSingleSegmented(const Ray&, float, float, uint collisionMask = 0xffff, float overlapDistance = 0.1f);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveCachedGeometry(Model);
void RemoveCollisionShape(CollisionShape);
void RemoveConstraint(Constraint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void RemoveRigidBody(RigidBody);
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetApplyingTransforms(bool);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetDebugDepthTest(bool);
void SetDebugRenderer(DebugRenderer);
void SetEnabled(bool);
void SetFps(int);
void SetGlobalVar(StringHash, const Variant&);
void SetGravity(const Vector3&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternalEdge(bool);
void SetInterpolation(bool);
void SetMaxNetworkAngularVelocity(float);
void SetMaxSubSteps(int);
void SetNumIterations(int);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetSplitImpulse(bool);
void SetTemporary(bool);
void SetUpdateEnabled(bool);
void SphereCast(PhysicsRaycastResult&, const Ray&, float, float, uint = M_MAX_UNSIGNED);
PhysicsRaycastResult SphereCast(const Ray&, float, float, uint collisionMask = 0xffff);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateCollisions();
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
int getDebugMode() const;
void setDebugMode(int);

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
int fps;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
Vector3 gravity;
/* readonly */
uint id;
bool internalEdge;
bool interpolation;
int maxSubSteps;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
int numIterations;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool splitImpulse;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool updateEnabled;
/* readonly */
int weakRefs;
};

class PhysicsWorld2D
{
public:
PhysicsWorld2D();
// Methods:
void AddDelayedWorldTransform(const DelayedWorldTransform2D&);
void AddRigidBody(RigidBody2D);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAllowSleeping() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetAutoClearForces() const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
bool GetContinuousPhysics() const;
bool GetDrawAabb() const;
bool GetDrawCenterOfMass() const;
bool GetDrawJoint() const;
bool GetDrawPair() const;
bool GetDrawShape() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
int GetPositionIterations() const;
Array<RigidBody2D> GetRigidBodies(const Rect&, uint = 0xffff);
RigidBody2D GetRigidBody(const Vector2&, uint = M_MAX_UNSIGNED);
RigidBody2D GetRigidBody(int, int, uint = M_MAX_UNSIGNED);
Scene GetScene() const;
bool GetSubStepping() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
int GetVelocityIterations() const;
bool GetWarmStarting() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsApplyingTransforms() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsUpdateEnabled() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
Array<PhysicsRaycastResult2D> Raycast(const Vector2&, const Vector2&, uint = 0xffff);
void RaycastSingle(PhysicsRaycastResult2D&, const Vector2&, const Vector2&, uint = M_MAX_UNSIGNED);
PhysicsRaycastResult2D RaycastSingle(const Vector2&, const Vector2&, uint = 0xffff);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void RemoveRigidBody(RigidBody2D);
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAllowSleeping(bool);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetApplyingTransforms(bool);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAutoClearForces(bool);
void SetBlockEvents(bool);
void SetContinuousPhysics(bool);
void SetDrawAabb(bool);
void SetDrawCenterOfMass(bool);
void SetDrawJoint(bool);
void SetDrawPair(bool);
void SetDrawShape(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetGravity(const Vector2&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetPositionIterations(int);
void SetSubStepping(bool);
void SetTemporary(bool);
void SetUpdateEnabled(bool);
void SetVelocityIterations(int);
void SetWarmStarting(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetGravity() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool allowSleeping;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool autoClearForces;
/* readonly */
String category;
bool continuousPhysics;
bool drawAabb;
bool drawCenterOfMass;
bool drawJoint;
bool drawPair;
bool drawShape;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
Vector2 gravity;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
int positionIterations;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool subStepping;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool updateEnabled;
int velocityIterations;
bool warmStarting;
/* readonly */
int weakRefs;
};

class PhysicsWorldConfig
{
public:
~PhysicsWorldConfig();
PhysicsWorldConfig();
// Methods:
PhysicsWorldConfig&  operator=(const PhysicsWorldConfig&);
};

class Plane
{
public:
Plane();
Plane(const Plane&in);
Plane(const Vector3&in, const Vector3&in, const Vector3&in);
Plane(const Vector3&in, const Vector3&in);
Plane(const Vector4&in);
// Methods:
Plane&  operator=(const Plane&);
void Define(const Vector3&, const Vector3&);
void Define(const Vector3&, const Vector3&, const Vector3&);
void Define(const Vector4&);
float Distance(const Vector3&) const;
Vector3 Project(const Vector3&) const;
Vector3 Reflect(const Vector3&) const;
Matrix3x4 ReflectionMatrix() const;
Vector4 ToVector4() const;
void Transform(const Matrix3&);
void Transform(const Matrix3x4&);
void Transform(const Matrix4&);
Plane Transformed(const Matrix3&) const;
Plane Transformed(const Matrix3x4&) const;
Plane Transformed(const Matrix4&) const;

// Properties:
Vector3 absNormal;
float d;
Vector3 normal;
/* readonly */
Matrix3x4 reflectionMatrix;

// Constants:
static const Plane UP;
};

class Polyhedron
{
public:
~Polyhedron();
Polyhedron();
Polyhedron(const Polyhedron&in);
Polyhedron(const BoundingBox&in);
Polyhedron(const Frustum&in);
// Methods:
Polyhedron&  operator=(const Polyhedron&);
void AddFace(Array<Vector3>);
void AddFace(const Vector3&, const Vector3&, const Vector3&);
void AddFace(const Vector3&, const Vector3&, const Vector3&, const Vector3&);
void Clear();
void Clip(const BoundingBox&);
void Clip(const Frustum&);
void Clip(const Plane&);
void Define(const BoundingBox&);
void Define(const Frustum&);
bool Empty() const;
void Transform(const Matrix3&);
void Transform(const Matrix3x4&);
Polyhedron Transformed(const Matrix3&) const;
Polyhedron Transformed(const Matrix3x4&) const;

// Properties:
/* readonly */
Array<Array<Vector3>> face;
/* readonly */
uint numFaces;
};

class Profiler
{
public:
Profiler();
// Methods:
void BeginFrame();
void BeginInterval();
void EndBlock();
void EndFrame();
operator EventProfiler() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
const String& GetCategory() const;
const String& GetTypeName() const;
const String& PrintData(bool = false, bool = false, uint = M_MAX_UNSIGNED) const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const EventProfiler() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ProgressBar
{
public:
ProgressBar();
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
void ChangeValue(float);
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
BorderImage GetKnob() const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
Orientation GetOrientation() const;
UIElement GetParent() const;
int GetPriority() const;
float GetRange() const;
UIElement GetRoot() const;
bool GetShowPercentText() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
float GetValue() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetLoadingPercentStyle(const String&);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetOrientation(Orientation);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRange(float);
void SetRenderTexture(Texture2D);
void SetSelected(bool);
void SetShowPercentText(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetValue(float);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetLoadingPercentStyle() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
/* readonly */
BorderImage knob;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
Orientation orientation;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
float range;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
bool showPercentText;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
float value;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class PropertySet2D
{
public:
PropertySet2D();
// Methods:
bool HasProperty(const String&) const;
void Load(const XMLElement&);
operator RefCounted() const;
int Refs() const;
const String& GetProperty(const String&) const;
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class Quaternion
{
public:
Quaternion();
Quaternion(const Quaternion&in);
Quaternion(float, float, float, float);
Quaternion(float, const Vector3&in);
Quaternion(float);
Quaternion(float, float, float);
Quaternion(const Vector3&in);
Quaternion(const Vector3&in, const Vector3&in);
Quaternion(const Vector3&in, const Vector3&in, const Vector3&in);
Quaternion(const Matrix3&in);
// Methods:
Quaternion  operator+(const Quaternion&) const;
Quaternion&  operator+=(const Quaternion&);
Quaternion&  operator=(const Quaternion&);
bool  operator==(const Quaternion&) const;
float Angle() const;
Vector3 Axis() const;
Quaternion Conjugate() const;
float DotProduct(const Quaternion&) const;
bool Equals(const Quaternion&) const;
Vector3 EulerAngles() const;
void FromAngleAxis(float, const Vector3&);
void FromAxes(const Vector3&, const Vector3&, const Vector3&);
void FromEulerAngles(float, float, float);
bool FromLookRotation(const Vector3&, const Vector3& = Vector3 :: UP);
void FromRotationMatrix(const Matrix3&);
void FromRotationTo(const Vector3&, const Vector3&);
Quaternion Inverse() const;
bool IsInf() const;
bool IsNaN() const;
float LengthSquared() const;
Quaternion Nlerp(const Quaternion&, float, bool = false) const;
void Normalize();
Quaternion Normalized() const;
float PitchAngle() const;
float RollAngle() const;
Matrix3 RotationMatrix() const;
Quaternion Slerp(const Quaternion&, float) const;
String ToString() const;
float YawAngle() const;

// Properties:
/* readonly */
float angle;
/* readonly */
Vector3 axis;
/* readonly */
Vector3 eulerAngles;
/* readonly */
float pitch;
/* readonly */
float roll;
/* readonly */
Matrix3 rotationMatrix;
float w;
float x;
float y;
/* readonly */
float yaw;
float z;

// Constants:
static const Quaternion IDENTITY;
};

class Ray
{
public:
Ray();
Ray(const Vector3&in, const Vector3&in);
Ray(const Ray&in);
// Methods:
Ray&  operator=(const Ray&);
bool  operator==(const Ray&) const;
Vector3 ClosestPoint(const Ray&) const;
void Define(const Vector3&, const Vector3&);
float Distance(const Vector3&) const;
float HitDistance(const BoundingBox&) const;
float HitDistance(const Frustum&, bool = true) const;
float HitDistance(const Plane&) const;
float HitDistance(const Sphere&) const;
float HitDistance(const Vector3&, const Vector3&, const Vector3&) const;
Vector3 Project(const Vector3&) const;
Ray Transformed(const Matrix3x4&) const;

// Properties:
Vector3 direction;
Vector3 origin;
};

class RayQueryResult
{
public:
~RayQueryResult();
RayQueryResult();
// Methods:
RayQueryResult&  operator=(const RayQueryResult&);

// Properties:
float distance;
/* readonly */
Drawable drawable;
/* readonly */
Node node;
Vector3 normal;
Vector3 position;
uint subObject;
Vector2 textureUV;
};

class RaycastVehicle
{
public:
// Methods:
void AddWheel(Node, Vector3, Vector3, float, float, bool);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
void FixedPostUpdate(float);
void FixedUpdate(float);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
float GetBrake(int) const;
Component GetComponent(StringHash) const;
Vector3 GetContactNormal(int) const;
Vector3 GetContactPosition(int) const;
IntVector3 GetCoordinateSystem() const;
float GetEngineForce(int) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
float GetInAirRPM() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetMaxSideSlipSpeed() const;
float GetMaxSuspensionTravel(int);
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
int GetNumWheels() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
float GetSteeringValue(int) const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
Vector3 GetWheelAxle(int) const;
Vector3 GetWheelConnectionPoint(int) const;
float GetWheelDampingCompression(int) const;
float GetWheelDampingRelaxation(int) const;
Vector3 GetWheelDirection(int) const;
float GetWheelFrictionSlip(int) const;
float GetWheelMaxSuspensionForce(int) const;
Node GetWheelNode(int) const;
Vector3 GetWheelPosition(int);
float GetWheelRadius(int) const;
float GetWheelRestLength(int) const;
float GetWheelRollInfluence(int) const;
Quaternion GetWheelRotation(int);
float GetWheelSideSlipSpeed(int) const;
float GetWheelSkidInfo(int) const;
float GetWheelSkidInfoCumulative(int) const;
float GetWheelSuspensionStiffness(int) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
void Init();
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsFrontWheel(int) const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
operator LogicComponent() const;
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PostUpdate(float);
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetSuspension();
void ResetToDefault();
void ResetWheels();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetBrake(int, float);
void SetCoordinateSystem(const IntVector3& = RIGHT_FORWARD_UP);
void SetEnabled(bool);
void SetEngineForce(int, float);
void SetGlobalVar(StringHash, const Variant&);
void SetInAirRPM(float);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetMaxSideSlipSpeed(float);
void SetMaxSuspensionTravel(int, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetSteeringValue(int, float);
void SetTemporary(bool);
void SetWheelAxle(int, Vector3);
void SetWheelDampingCompression(int, float);
void SetWheelDampingRelaxation(int, float);
void SetWheelDirection(int, Vector3);
void SetWheelFrictionSlip(int, float);
void SetWheelMaxSuspensionForce(int, float);
void SetWheelRadius(int, float);
void SetWheelRestLength(int, float);
void SetWheelRollInfluence(int, float);
void SetWheelSkidInfo(int, float);
void SetWheelSkidInfoCumulative(int, float);
void SetWheelSuspensionStiffness(int, float);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdateWheelTransform(int, bool);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
bool WheelIsGrounded(int) const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const LogicComponent() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
IntVector3 coordinateSystem;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float inAirRPM;
float maxSideSlipSpeed;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
int numWheels;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;

// Constants:
static const IntVector3 FORWARD_RIGHT_UP;
static const IntVector3 FORWARD_UP_RIGHT;
static const IntVector3 RIGHT_FORWARD_UP;
static const IntVector3 RIGHT_UP_FORWARD;
static const IntVector3 UP_FORWARD_RIGHT;
static const IntVector3 UP_RIGHT_FORWARD;
};

class Rect
{
public:
Rect();
Rect(const Vector2&in, const Vector2&in);
Rect(float, float, float, float);
Rect(const Vector4&in);
Rect(const Rect&in);
// Methods:
Rect  operator+(const Rect&) const;
Rect&  operator+=(const Rect&);
Rect&  operator=(const Rect&);
bool  operator==(const Rect&) const;
float Bottom() const;
Vector2 Center() const;
void Clear();
void Clip(const Rect&);
void Define(const Rect&);
void Define(const Vector2&);
void Define(const Vector2&, const Vector2&);
bool Defined() const;
bool Equals(const Rect&) const;
Vector2 HalfSize() const;
Intersection IsInside(const Rect&) const;
Intersection IsInside(const Vector2&) const;
float Left() const;
Vector2 Max() const;
void Merge(const Rect&);
void Merge(const Vector2&);
Vector2 Min() const;
float Right() const;
Vector2 Size() const;
String ToString() const;
Vector4 ToVector4() const;
float Top() const;

// Properties:
/* readonly */
float bottom;
/* readonly */
Vector2 center;
/* readonly */
Vector2 halfSize;
/* readonly */
float left;
Vector2 max;
Vector2 min;
/* readonly */
float right;
/* readonly */
Vector2 size;
/* readonly */
float top;

// Constants:
static const Rect FULL;
static const Rect POSITIVE;
static const Rect ZERO;
};

class RefCount
{
public:
~RefCount();
RefCount();
// Methods:
RefCount&  operator=(const RefCount&);

// Properties:
int refs;
int weakRefs;
};

class RefCounted
{
public:
RefCounted();
// Methods:
operator Animatable() const;
operator AnimatedModel() const;
operator AnimatedSprite2D() const;
operator Animation() const;
operator AnimationController() const;
operator AnimationSet2D() const;
operator AnimationState() const;
operator AttributeAccessor() const;
operator AttributeAnimationInfo() const;
operator Audio() const;
operator BillboardSet() const;
operator BorderImage() const;
operator BufferedSoundStream() const;
operator Button() const;
operator Camera() const;
operator CheckBox() const;
operator CollisionBox2D() const;
operator CollisionChain2D() const;
operator CollisionCircle2D() const;
operator CollisionEdge2D() const;
operator CollisionGeometryData() const;
operator CollisionPolygon2D() const;
operator CollisionShape2D() const;
operator CollisionShape() const;
operator Component() const;
operator Connection() const;
operator Console() const;
operator ConstantBuffer() const;
operator Constraint2D() const;
operator Constraint() const;
operator ConstraintDistance2D() const;
operator ConstraintFriction2D() const;
operator ConstraintGear2D() const;
operator ConstraintMotor2D() const;
operator ConstraintMouse2D() const;
operator ConstraintPrismatic2D() const;
operator ConstraintPulley2D() const;
operator ConstraintRevolute2D() const;
operator ConstraintRope2D() const;
operator ConstraintWeld2D() const;
operator ConstraintWheel2D() const;
operator Context() const;
operator ConvexData() const;
operator CrowdAgent() const;
operator CrowdManager() const;
operator Cursor() const;
operator CustomGeometry() const;
operator Database() const;
operator DebugHud() const;
operator DebugRenderer() const;
operator DecalSet() const;
operator Drawable2D() const;
operator Drawable() const;
operator DropDownList() const;
operator DynamicNavigationMesh() const;
operator Engine() const;
operator EventProfiler() const;
operator EventReceiverGroup() const;
operator File() const;
operator FileSelector() const;
operator FileSystem() const;
operator FileWatcher() const;
operator Font() const;
operator FontFace() const;
operator FontFaceBitmap() const;
operator FontFaceFreeType() const;
operator GImpactMeshData() const;
operator Geometry() const;
operator Graphics() const;
operator HeightfieldData() const;
operator HttpRequest() const;
operator IKConstraint() const;
operator IKEffector() const;
operator IKSolver() const;
operator Image() const;
operator IndexBuffer() const;
operator Input() const;
operator JSONFile() const;
operator Light() const;
operator LineEdit() const;
operator ListView() const;
operator Localization() const;
operator Log() const;
operator LogicComponent() const;
operator Material() const;
operator Menu() const;
operator MessageBox() const;
operator Model() const;
operator NamedPipe() const;
operator NavArea() const;
operator Navigable() const;
operator NavigationMesh() const;
operator Network() const;
operator NetworkPriority() const;
operator Node() const;
operator Object() const;
operator ObjectAnimation() const;
operator ObjectFactory() const;
operator Obstacle() const;
operator OcclusionBuffer() const;
operator Octree() const;
operator OffMeshConnection() const;
operator OggVorbisSoundStream() const;
operator PackageFile() const;
operator ParticleEffect2D() const;
operator ParticleEffect() const;
operator ParticleEmitter2D() const;
operator ParticleEmitter() const;
operator Pass() const;
operator PhysicsWorld2D() const;
operator PhysicsWorld() const;
operator Profiler() const;
operator ProgressBar() const;
operator PropertySet2D() const;
operator RaycastVehicle() const;
int Refs() const;
operator RenderPath() const;
operator RenderSurface() const;
operator Renderer2D() const;
operator Renderer() const;
operator Resource() const;
operator ResourceCache() const;
operator ResourceWithMetadata() const;
operator RibbonTrail() const;
operator RigidBody2D() const;
operator RigidBody() const;
operator Scene() const;
operator ScriptInstance() const;
operator ScrollBar() const;
operator ScrollView() const;
operator Serializable() const;
operator Shader() const;
operator ShaderParameterAnimationInfo() const;
operator ShaderPrecache() const;
operator ShaderVariation() const;
operator Skybox() const;
operator Slider() const;
operator SmoothedTransform() const;
operator Sound() const;
operator SoundListener() const;
operator SoundSource3D() const;
operator SoundSource() const;
operator SoundStream() const;
operator SplinePath() const;
operator Sprite2D() const;
operator Sprite() const;
operator SpriteSheet2D() const;
operator StaticModel() const;
operator StaticModelGroup() const;
operator StaticSprite2D() const;
operator StretchableSprite2D() const;
operator Technique() const;
operator Terrain() const;
operator TerrainPatch() const;
operator Text3D() const;
operator Text() const;
operator Texture2D() const;
operator Texture2DArray() const;
operator Texture3D() const;
operator Texture() const;
operator TextureCube() const;
operator Tile2D() const;
operator TileMap2D() const;
operator TileMapLayer2D() const;
operator TileMapObject2D() const;
operator Time() const;
operator TmxFile2D() const;
operator TmxImageLayer2D() const;
operator TmxLayer2D() const;
operator TmxObjectGroup2D() const;
operator TmxTileLayer2D() const;
operator ToolTip() const;
operator TriangleMeshData() const;
operator UI() const;
operator UIComponent() const;
operator UIElement() const;
operator UISelectable() const;
operator UnknownComponent() const;
operator ValueAnimation() const;
operator ValueAnimationInfo() const;
operator VertexBuffer() const;
operator View3D() const;
operator View() const;
operator Viewport() const;
int WeakRefs() const;
operator Window() const;
operator WorkQueue() const;
operator XMLFile() const;
operator Zone() const;
operator const Animatable() const;
operator const AnimatedModel() const;
operator const AnimatedSprite2D() const;
operator const Animation() const;
operator const AnimationController() const;
operator const AnimationSet2D() const;
operator const AnimationState() const;
operator const AttributeAccessor() const;
operator const AttributeAnimationInfo() const;
operator const Audio() const;
operator const BillboardSet() const;
operator const BorderImage() const;
operator const BufferedSoundStream() const;
operator const Button() const;
operator const Camera() const;
operator const CheckBox() const;
operator const CollisionBox2D() const;
operator const CollisionChain2D() const;
operator const CollisionCircle2D() const;
operator const CollisionEdge2D() const;
operator const CollisionGeometryData() const;
operator const CollisionPolygon2D() const;
operator const CollisionShape2D() const;
operator const CollisionShape() const;
operator const Component() const;
operator const Connection() const;
operator const Console() const;
operator const ConstantBuffer() const;
operator const Constraint2D() const;
operator const Constraint() const;
operator const ConstraintDistance2D() const;
operator const ConstraintFriction2D() const;
operator const ConstraintGear2D() const;
operator const ConstraintMotor2D() const;
operator const ConstraintMouse2D() const;
operator const ConstraintPrismatic2D() const;
operator const ConstraintPulley2D() const;
operator const ConstraintRevolute2D() const;
operator const ConstraintRope2D() const;
operator const ConstraintWeld2D() const;
operator const ConstraintWheel2D() const;
operator const Context() const;
operator const ConvexData() const;
operator const CrowdAgent() const;
operator const CrowdManager() const;
operator const Cursor() const;
operator const CustomGeometry() const;
operator const Database() const;
operator const DebugHud() const;
operator const DebugRenderer() const;
operator const DecalSet() const;
operator const Drawable2D() const;
operator const Drawable() const;
operator const DropDownList() const;
operator const DynamicNavigationMesh() const;
operator const Engine() const;
operator const EventProfiler() const;
operator const EventReceiverGroup() const;
operator const File() const;
operator const FileSelector() const;
operator const FileSystem() const;
operator const FileWatcher() const;
operator const Font() const;
operator const FontFace() const;
operator const FontFaceBitmap() const;
operator const FontFaceFreeType() const;
operator const GImpactMeshData() const;
operator const Geometry() const;
operator const Graphics() const;
operator const HeightfieldData() const;
operator const HttpRequest() const;
operator const IKConstraint() const;
operator const IKEffector() const;
operator const IKSolver() const;
operator const Image() const;
operator const IndexBuffer() const;
operator const Input() const;
operator const JSONFile() const;
operator const Light() const;
operator const LineEdit() const;
operator const ListView() const;
operator const Localization() const;
operator const Log() const;
operator const LogicComponent() const;
operator const Material() const;
operator const Menu() const;
operator const MessageBox() const;
operator const Model() const;
operator const NamedPipe() const;
operator const NavArea() const;
operator const Navigable() const;
operator const NavigationMesh() const;
operator const Network() const;
operator const NetworkPriority() const;
operator const Node() const;
operator const Object() const;
operator const ObjectAnimation() const;
operator const ObjectFactory() const;
operator const Obstacle() const;
operator const OcclusionBuffer() const;
operator const Octree() const;
operator const OffMeshConnection() const;
operator const OggVorbisSoundStream() const;
operator const PackageFile() const;
operator const ParticleEffect2D() const;
operator const ParticleEffect() const;
operator const ParticleEmitter2D() const;
operator const ParticleEmitter() const;
operator const Pass() const;
operator const PhysicsWorld2D() const;
operator const PhysicsWorld() const;
operator const Profiler() const;
operator const ProgressBar() const;
operator const PropertySet2D() const;
operator const RaycastVehicle() const;
operator const RenderPath() const;
operator const RenderSurface() const;
operator const Renderer2D() const;
operator const Renderer() const;
operator const Resource() const;
operator const ResourceCache() const;
operator const ResourceWithMetadata() const;
operator const RibbonTrail() const;
operator const RigidBody2D() const;
operator const RigidBody() const;
operator const Scene() const;
operator const ScriptInstance() const;
operator const ScrollBar() const;
operator const ScrollView() const;
operator const Serializable() const;
operator const Shader() const;
operator const ShaderParameterAnimationInfo() const;
operator const ShaderPrecache() const;
operator const ShaderVariation() const;
operator const Skybox() const;
operator const Slider() const;
operator const SmoothedTransform() const;
operator const Sound() const;
operator const SoundListener() const;
operator const SoundSource3D() const;
operator const SoundSource() const;
operator const SoundStream() const;
operator const SplinePath() const;
operator const Sprite2D() const;
operator const Sprite() const;
operator const SpriteSheet2D() const;
operator const StaticModel() const;
operator const StaticModelGroup() const;
operator const StaticSprite2D() const;
operator const StretchableSprite2D() const;
operator const Technique() const;
operator const Terrain() const;
operator const TerrainPatch() const;
operator const Text3D() const;
operator const Text() const;
operator const Texture2D() const;
operator const Texture2DArray() const;
operator const Texture3D() const;
operator const Texture() const;
operator const TextureCube() const;
operator const Tile2D() const;
operator const TileMap2D() const;
operator const TileMapLayer2D() const;
operator const TileMapObject2D() const;
operator const Time() const;
operator const TmxFile2D() const;
operator const TmxImageLayer2D() const;
operator const TmxLayer2D() const;
operator const TmxObjectGroup2D() const;
operator const TmxTileLayer2D() const;
operator const ToolTip() const;
operator const TriangleMeshData() const;
operator const UI() const;
operator const UIComponent() const;
operator const UIElement() const;
operator const UISelectable() const;
operator const UnknownComponent() const;
operator const ValueAnimation() const;
operator const ValueAnimationInfo() const;
operator const VertexBuffer() const;
operator const View3D() const;
operator const View() const;
operator const Viewport() const;
operator const Window() const;
operator const WorkQueue() const;
operator const XMLFile() const;
operator const Zone() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class RemoteEvent
{
public:
~RemoteEvent();
RemoteEvent();
// Methods:
RemoteEvent&  operator=(const RemoteEvent&);

// Properties:
VariantMap eventData;
StringHash eventType;
bool inOrder;
uint senderID;
};

class RenderPath
{
public:
RenderPath();
// Methods:
void AddCommand(const RenderPathCommand&);
void AddRenderTarget(const RenderTargetInfo&);
bool Append(XMLFile);
RenderPath Clone();
uint GetNumCommands() const;
uint GetNumRenderTargets() const;
void InsertCommand(uint, const RenderPathCommand&);
bool IsAdded(const String&) const;
bool IsEnabled(const String&) const;
bool Load(XMLFile);
operator RefCounted() const;
int Refs() const;
void RemoveCommand(uint);
void RemoveCommands(const String&);
void RemoveRenderTarget(const String&);
void RemoveRenderTarget(uint);
void RemoveRenderTargets(const String&);
void SetCommand(uint, const RenderPathCommand&);
void SetEnabled(const String&, bool);
void SetRenderTarget(uint, const RenderTargetInfo&);
void SetShaderParameter(const String&, const Variant&);
void ToggleEnabled(const String&);
const Variant& GetShaderParameter(const String&) const;
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
Array<bool> added;
Array<RenderPathCommand> commands;
/* readonly */
Array<bool> enabled;
/* readonly */
uint numCommands;
/* readonly */
uint numRenderTargets;
/* readonly */
int refs;
Array<RenderTargetInfo> renderTargets;
Array<Variant> shaderParameters;
/* readonly */
int weakRefs;
};

class RenderPathCommand
{
public:
~RenderPathCommand();
RenderPathCommand();
// Methods:
RenderPathCommand&  operator=(const RenderPathCommand&);
uint GetNumOutputs() const;
CubeMapFace GetOutputFace(uint) const;
void Load(const XMLElement&);
void RemoveShaderParameter(const String&);
void SetDepthStencilName(const String&);
void SetNumOutputs(uint);
void SetOutput(uint, const String&, CubeMapFace = FACE_POSITIVE_X);
void SetOutputFace(uint, CubeMapFace);
void SetOutputName(uint, const String&);
void SetShaderParameter(const String&, const Variant&);
void SetTextureName(TextureUnit, const String&);
const String& GetDepthStencilName() const;
const String& GetOutputName(uint) const;
const String& GetTextureName(TextureUnit) const;
const Variant& GetShaderParameter(const String&) const;

// Properties:
BlendMode blendMode;
Color clearColor;
float clearDepth;
uint clearFlags;
uint clearStencil;
String depthStencilName;
String depthStencilName;
bool enabled;
String eventName;
bool markToStencil;
String metadata;
uint numOutputs;
Array<CubeMapFace> outputFaces;
Array<String> outputNames;
String pass;
uint passIndex;
String pixelShaderDefines;
String pixelShaderName;
Array<Variant> shaderParameters;
RenderCommandSortMode sortMode;
String tag;
Array<String> textureNames;
RenderCommandType type;
bool useFogColor;
bool useLitBase;
bool vertexLights;
String vertexShaderDefines;
String vertexShaderName;
};

class RenderSurface
{
public:
RenderSurface(Texture&);
// Methods:
bool CreateRenderBuffer(uint, uint, uint, int);
bool GetAutoResolve() const;
int GetHeight() const;
RenderSurface GetLinkedDepthStencil() const;
RenderSurface GetLinkedRenderTarget() const;
int GetMultiSample() const;
uint GetNumViewports() const;
Texture GetParentTexture() const;
uint GetRenderBuffer() const;
uint GetTarget() const;
RenderSurfaceUpdateMode GetUpdateMode() const;
TextureUsage GetUsage() const;
Viewport GetViewport(uint) const;
int GetWidth() const;
bool IsResolveDirty() const;
bool IsUpdateQueued() const;
void OnDeviceLost();
void QueueUpdate();
operator RefCounted() const;
int Refs() const;
void Release();
void ResetUpdateQueued();
void SetLinkedDepthStencil(RenderSurface);
void SetLinkedRenderTarget(RenderSurface);
void SetNumViewports(uint);
void SetResolveDirty(bool);
void SetUpdateMode(RenderSurfaceUpdateMode);
void SetViewport(uint, Viewport);
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int height;
RenderSurface linkedDepthStencil;
RenderSurface linkedRenderTarget;
uint numViewports;
/* readonly */
Texture parentTexture;
/* readonly */
int refs;
/* readonly */
bool resolveDirty;
RenderSurfaceUpdateMode updateMode;
/* readonly */
TextureUsage usage;
Array<Viewport> viewports;
/* readonly */
int weakRefs;
/* readonly */
int width;
};

class RenderTargetInfo
{
public:
~RenderTargetInfo();
RenderTargetInfo();
// Methods:
RenderTargetInfo&  operator=(const RenderTargetInfo&);
void Load(const XMLElement&);

// Properties:
bool autoResolve;
bool cubemap;
bool enabled;
bool filtered;
uint format;
int multiSample;
String name;
bool persistent;
bool sRGB;
Vector2 size;
RenderTargetSizeMode sizeMode;
String tag;
};

class Renderer
{
public:
Renderer();
// Methods:
void ApplyShadowMapFilter(View, Texture2D, float);
void DrawDebugGeometry(bool);
const FrameInfo& GetFrameInfo() const;
bool GetBlockEvents() const;
Texture2D GetDefaultLightRamp() const;
Texture2D GetDefaultLightSpot() const;
Material GetDefaultMaterial() const;
RenderPath GetDefaultRenderPath() const;
Technique GetDefaultTechnique() const;
Zone GetDefaultZone() const;
RenderSurface GetDepthStencil(int, int, int, bool);
bool GetDrawShadows() const;
bool GetDynamicInstancing() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
TextureCube GetFaceSelectCubeMap() const;
bool GetHDRRendering() const;
TextureCube GetIndirectionCubeMap() const;
VertexBuffer GetInstancingBuffer() const;
Geometry GetLightGeometry(Light);
uint GetMaterialQuality() const;
int GetMaxOccluderTriangles() const;
int GetMaxShadowMaps() const;
int GetMaxSortedInstances() const;
int GetMinInstances() const;
float GetMobileNormalOffsetMul() const;
float GetMobileShadowBiasAdd() const;
float GetMobileShadowBiasMul() const;
uint GetNumBatches() const;
int GetNumExtraInstancingBufferElements() const;
uint GetNumGeometries(bool = false) const;
uint GetNumLights(bool = false) const;
uint GetNumOccluders(bool = false) const;
uint GetNumPrimitives() const;
uint GetNumShadowMaps(bool = false) const;
uint GetNumViewports() const;
uint GetNumViews() const;
float GetOccluderSizeThreshold() const;
OcclusionBuffer GetOcclusionBuffer(Camera);
int GetOcclusionBufferSize() const;
View GetPreparedView(Camera);
Geometry GetQuadGeometry();
bool GetReuseShadowMaps() const;
Texture GetScreenBuffer(int, int, uint, int, bool, bool, bool, bool, uint = 0);
Camera GetShadowCamera();
Texture2D GetShadowMap(Light, Camera, uint, uint);
int GetShadowMapSize() const;
ShadowQuality GetShadowQuality() const;
float GetShadowSoftness() const;
bool GetSpecularLighting() const;
Object GetSubsystem(StringHash) const;
int GetTextureAnisotropy() const;
TextureFilterMode GetTextureFilterMode() const;
uint GetTextureQuality() const;
bool GetThreadedOcclusion() const;
StringHash GetType() const;
int GetVSMMultiSample() const;
Vector2 GetVSMShadowParameters() const;
Viewport GetViewport(uint) const;
Viewport GetViewportForScene(Scene, uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OptimizeLightByScissor(Light, Camera);
void OptimizeLightByStencil(Light, Camera);
void QueueRenderSurface(RenderSurface);
void QueueViewport(RenderSurface, Viewport);
const Rect& GetLightScissor(Light, Camera);
operator RefCounted() const;
int Refs() const;
void ReloadShaders();
void Render();
bool ResizeInstancingBuffer(uint);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBatchShaders(Batch&, Technique, bool, const BatchQueue&);
void SetBlockEvents(bool);
void SetCullMode(CullMode, Camera);
void SetDefaultRenderPath(RenderPath);
void SetDefaultRenderPath(XMLFile);
void SetDefaultTechnique(Technique);
void SetDrawShadows(bool);
void SetDynamicInstancing(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetHDRRendering(bool);
void SetLightVolumeBatchShaders(Batch&, Camera, const String&, const String&, const String&, const String&);
void SetMaterialQuality(uint);
void SetMaxOccluderTriangles(int);
void SetMaxShadowMaps(int);
void SetMaxSortedInstances(int);
void SetMinInstances(int);
void SetMobileNormalOffsetMul(float);
void SetMobileShadowBiasAdd(float);
void SetMobileShadowBiasMul(float);
void SetNumExtraInstancingBufferElements(int);
void SetNumViewports(uint);
void SetOccluderSizeThreshold(float);
void SetOcclusionBufferSize(int);
void SetReuseShadowMaps(bool);
void SetShadowMapSize(int);
void SetShadowQuality(ShadowQuality);
void SetShadowSoftness(float);
void SetSpecularLighting(bool);
void SetTextureAnisotropy(int);
void SetTextureFilterMode(TextureFilterMode);
void SetTextureQuality(uint);
void SetThreadedOcclusion(bool);
void SetVSMMultiSample(int);
void SetVSMShadowParameters(float, float);
void SetViewport(uint, Viewport);
void StorePreparedView(View, Camera);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
/* readonly */
Texture2D defaultLightRamp;
/* readonly */
Texture2D defaultLightSpot;
/* readonly */
Material defaultMaterial;
RenderPath defaultRenderPath;
Technique defaultTechnique;
/* readonly */
Zone defaultZone;
bool drawShadows;
bool dynamicInstancing;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
bool hdrRendering;
uint materialQuality;
int maxOccluderTriangles;
int maxShadowMaps;
int maxSortedInstances;
int minInstances;
float mobileNormalOffsetMul;
float mobileShadowBiasAdd;
float mobileShadowBiasMul;
/* readonly */
uint numBatches;
int numExtraInstancingBufferElements;
/* readonly */
Array<uint> numGeometries;
/* readonly */
Array<uint> numLights;
/* readonly */
Array<uint> numOccluders;
/* readonly */
uint numPrimitives;
/* readonly */
Array<uint> numShadowMaps;
uint numViewports;
/* readonly */
uint numViews;
float occluderSizeThreshold;
int occlusionBufferSize;
/* readonly */
int refs;
bool reuseShadowMaps;
int shadowMapSize;
ShadowQuality shadowQuality;
float shadowSoftness;
bool specularLighting;
int textureAnisotropy;
TextureFilterMode textureFilterMode;
uint textureQuality;
bool threadedOcclusion;
/* readonly */
StringHash type;
/* readonly */
String typeName;
Array<Viewport> viewports;
int vsmMultiSample;
Vector2 vsmShadowParameters;
/* readonly */
int weakRefs;
};

class Renderer2D
{
public:
Renderer2D();
// Methods:
void AddDrawable(Drawable2D);
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
bool CheckVisibility(Drawable2D) const;
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial(Texture2D, BlendMode);
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveDrawable(Drawable2D);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class ReplicationState
{
public:
~ReplicationState();
ReplicationState();
// Methods:
ReplicationState&  operator=(const ReplicationState&);
};

class Resource
{
public:
Resource();
// Methods:
operator Animation() const;
operator AnimationSet2D() const;
bool BeginLoad(Deserializer&);
bool EndLoad();
operator Font() const;
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
operator Image() const;
bool IsInstanceOf(StringHash) const;
operator JSONFile() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Material() const;
operator Model() const;
operator Object() const;
operator ObjectAnimation() const;
void OnEvent(Object, StringHash, VariantMap&);
operator ParticleEffect2D() const;
operator ParticleEffect() const;
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
operator ResourceWithMetadata() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
operator Shader() const;
operator Sound() const;
operator Sprite2D() const;
operator SpriteSheet2D() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator Technique() const;
operator Texture2D() const;
operator Texture2DArray() const;
operator Texture3D() const;
operator Texture() const;
operator TextureCube() const;
operator TmxFile2D() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
operator ValueAnimation() const;
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator XMLFile() const;
operator const Animation() const;
operator const AnimationSet2D() const;
operator const Font() const;
operator const Image() const;
operator const JSONFile() const;
operator const Material() const;
operator const Model() const;
operator const Object() const;
operator const ObjectAnimation() const;
operator const ParticleEffect2D() const;
operator const ParticleEffect() const;
operator const RefCounted() const;
operator const ResourceWithMetadata() const;
operator const Shader() const;
operator const Sound() const;
operator const Sprite2D() const;
operator const SpriteSheet2D() const;
operator const Technique() const;
operator const Texture2D() const;
operator const Texture2DArray() const;
operator const Texture3D() const;
operator const Texture() const;
operator const TextureCube() const;
operator const TmxFile2D() const;
operator const ValueAnimation() const;
operator const XMLFile() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class ResourceCache
{
public:
ResourceCache();
// Methods:
bool AddManualResource(Resource);
bool AddPackageFile(PackageFile, uint = PRIORITY_LAST);
bool AddPackageFile(const String&, uint = PRIORITY_LAST);
bool AddResourceDir(const String&, uint = PRIORITY_LAST);
bool BackgroundLoadResource(StringHash, const String&, bool = true, Resource = null);
bool Exists(const String&) const;
bool GetAutoReloadResources() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Resource GetExistingResource(StringHash, const String&);
File GetFile(const String&, bool = true);
int GetFinishBackgroundResourcesMs() const;
uint64 GetMemoryBudget(StringHash) const;
uint64 GetMemoryUse(StringHash) const;
uint GetNumBackgroundLoadResources() const;
Array<PackageFile> GetPackageFiles() const;
String GetPreferredResourceDir(const String&) const;
Resource GetResource(StringHash, const String&, bool = true);
Array<String> GetResourceDirs() const;
String GetResourceFileName(const String&) const;
Array<Resource> GetResources(StringHash);
bool GetReturnFailedResources() const;
bool GetSearchPackagesFirst() const;
Object GetSubsystem(StringHash) const;
Resource GetTempResource(StringHash, const String&, bool = true);
uint64 GetTotalMemoryUse() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
String PrintMemoryUsage() const;
operator RefCounted() const;
int Refs() const;
void ReleaseAllResources(bool = false);
void ReleaseResource(StringHash, const String&, bool = false);
void ReleaseResources(StringHash, bool = false);
void ReleaseResources(StringHash, const String&, bool = false);
void ReleaseResources(const String&, bool = false);
bool ReloadResource(Resource);
void ReloadResourceWithDependencies(const String&);
void RemovePackageFile(PackageFile, bool = true, bool = false);
void RemovePackageFile(const String&, bool = true, bool = false);
void RemoveResourceDir(const String&);
void ResetDependencies(Resource);
String SanitateResourceDirName(const String&) const;
String SanitateResourceName(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAutoReloadResources(bool);
void SetBlockEvents(bool);
void SetFinishBackgroundResourcesMs(int);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryBudget(StringHash, uint64);
void SetReturnFailedResources(bool);
void SetSearchPackagesFirst(bool);
void StoreResourceDependency(Resource, const String&);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
bool autoReloadResources;
/* readonly */
String category;
int finishBackgroundResourcesMs;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
Array<uint64> memoryBudget;
/* readonly */
Array<uint64> memoryUse;
/* readonly */
uint numBackgroundLoadResources;
/* readonly */
Array<PackageFile> packageFiles;
/* readonly */
int refs;
/* readonly */
Array<String> resourceDirs;
bool returnFailedResources;
bool searchPackagesFirst;
/* readonly */
uint64 totalMemoryUse;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ResourceGroup
{
public:
~ResourceGroup();
ResourceGroup();
// Methods:
ResourceGroup&  operator=(const ResourceGroup&);

// Properties:
uint64 memoryBudget;
uint64 memoryUse;
};

class ResourceRef
{
public:
~ResourceRef();
ResourceRef();
ResourceRef(StringHash);
ResourceRef(StringHash, const String&in);
ResourceRef(const String&in, const String&in);
ResourceRef(const ResourceRef&in);
// Methods:
ResourceRef&  operator=(const ResourceRef&);
bool  operator==(const ResourceRef&) const;

// Properties:
String name;
StringHash type;
};

class ResourceRefList
{
public:
~ResourceRefList();
ResourceRefList();
ResourceRefList(StringHash);
ResourceRefList(StringHash, String[]@);
// Methods:
ResourceRefList&  operator=(const ResourceRefList&);
bool  operator==(const ResourceRefList&) const;
void Resize(uint);

// Properties:
/* readonly */
bool empty;
/* readonly */
uint length;
Array<String> names;
StringHash type;
};

class ResourceWithMetadata
{
public:
ResourceWithMetadata();
// Methods:
void AddMetadata(const String&, const Variant&);
operator Animation() const;
bool BeginLoad(Deserializer&);
bool EndLoad();
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasMetadata() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Model() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RemoveAllMetadata();
void RemoveMetadata(const String&);
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
operator Sound() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator Texture2D() const;
operator Texture2DArray() const;
operator Texture3D() const;
operator Texture() const;
operator TextureCube() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetMetadata(const String&) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Animation() const;
operator const Model() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;
operator const Sound() const;
operator const Texture2D() const;
operator const Texture2DArray() const;
operator const Texture3D() const;
operator const Texture() const;
operator const TextureCube() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hasMetadata;
/* readonly */
uint memoryUse;
Array<Variant> metadata;
String name;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class RibbonTrail
{
public:
RibbonTrail();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
const Color& GetEndColor() const;
const Color& GetStartColor() const;
void Commit();
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
float GetAnimationLodBias() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
float GetEndScale() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetLifetime() const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
float GetStartScale() const;
Object GetSubsystem(StringHash) const;
uint GetTailColumn() const;
TrailType GetTrailType() const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
bool GetUpdateInvisible() const;
float GetVertexDistance() const;
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
float GetWidth() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEmitting() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsSorted() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationLodBias(float);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBaseVelocity(const Vector3&);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEmitting(bool);
void SetEnabled(bool);
void SetEndColor(const Color&);
void SetEndScale(float);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLifetime(float);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetSorted(bool);
void SetStartColor(const Color&);
void SetStartScale(float);
void SetTailColumn(uint);
void SetTemporary(bool);
void SetTrailType(TrailType);
void SetUpdateInvisible(bool);
void SetVertexDistance(float);
void SetViewMask(uint);
void SetWidth(float);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetBaseVelocity() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
float animationLodBias;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
Vector3 baseVelocity;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool emitting;
bool enabled;
/* readonly */
bool enabledEffective;
Color endColor;
float endScale;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
float lifetime;
uint lightMask;
float lodBias;
Material material;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool sorted;
Color startColor;
float startScale;
uint tailColumn;
bool temporary;
TrailType trailType;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool updateInvisible;
float vertexDistance;
uint viewMask;
/* readonly */
int weakRefs;
float width;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class RigidBody
{
public:
RigidBody();
// Methods:
void Activate();
void AddConstraint(Constraint);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void ApplyForce(const Vector3&);
void ApplyForce(const Vector3&, const Vector3&);
void ApplyImpulse(const Vector3&);
void ApplyImpulse(const Vector3&, const Vector3&);
void ApplyTorque(const Vector3&);
void ApplyTorqueImpulse(const Vector3&);
void ApplyWorldTransform(const Vector3&, const Quaternion&);
void CleanupConnection(Connection);
operator Component() const;
void DisableMassUpdate();
void DrawDebugGeometry(DebugRenderer, bool);
void EnableMassUpdate();
float GetAngularDamping() const;
Vector3 GetAngularFactor() const;
float GetAngularRestThreshold() const;
Vector3 GetAngularVelocity() const;
bool GetAnimationEnabled() const;
Vector3 GetAnisotropicFriction() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
float GetCcdMotionThreshold() const;
float GetCcdRadius() const;
CollisionEventMode GetCollisionEventMode() const;
uint GetCollisionLayer() const;
uint GetCollisionMask() const;
Component GetComponent(StringHash) const;
float GetContactProcessingThreshold() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFriction() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetLinearDamping() const;
Vector3 GetLinearFactor() const;
float GetLinearRestThreshold() const;
Vector3 GetLinearVelocity() const;
float GetMass() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
PhysicsWorld GetPhysicsWorld() const;
Vector3 GetPosition() const;
float GetRestitution() const;
float GetRollingFriction() const;
Quaternion GetRotation() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool GetUseGravity() const;
Vector3 GetVelocityAtPoint(const Vector3&) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsActive() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsKinematic() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsTrigger() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
void ReAddBodyToWorld();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseBody();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveConstraint(Constraint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetForces();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAngularDamping(float);
void SetAngularFactor(const Vector3&);
void SetAngularRestThreshold(float);
void SetAngularVelocity(const Vector3&);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAnisotropicFriction(const Vector3&);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCcdMotionThreshold(float);
void SetCcdRadius(float);
void SetCollisionEventMode(CollisionEventMode);
void SetCollisionLayer(uint);
void SetCollisionLayerAndMask(uint, uint);
void SetCollisionMask(uint);
void SetContactProcessingThreshold(float);
void SetEnabled(bool);
void SetFriction(float);
void SetGlobalVar(StringHash, const Variant&);
void SetGravityOverride(const Vector3&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetKinematic(bool);
void SetLinearDamping(float);
void SetLinearFactor(const Vector3&);
void SetLinearRestThreshold(float);
void SetLinearVelocity(const Vector3&);
void SetMass(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetPosition(const Vector3&);
void SetRestitution(float);
void SetRollingFriction(float);
void SetRotation(const Quaternion&);
void SetTemporary(bool);
void SetTransform(const Vector3&, const Quaternion&);
void SetTrigger(bool);
void SetUseGravity(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdateGravity();
void UpdateMass();
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetCenterOfMass() const;
const Vector3& GetGravityOverride() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
/* readonly */
bool active;
float angularDamping;
Vector3 angularFactor;
float angularRestThreshold;
Vector3 angularVelocity;
bool animationEnabled;
Vector3 anisotropicFriction;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
float ccdMotionThreshold;
float ccdRadius;
/* readonly */
Vector3 centerOfMass;
/* readonly */
Array<RigidBody> collidingBodies;
CollisionEventMode collisionEventMode;
uint collisionLayer;
uint collisionMask;
float contactProcessingThreshold;
bool enabled;
/* readonly */
bool enabledEffective;
float friction;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
Vector3 gravityOverride;
/* readonly */
uint id;
bool kinematic;
float linearDamping;
Vector3 linearFactor;
float linearRestThreshold;
Vector3 linearVelocity;
float mass;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
Vector3 position;
/* readonly */
int refs;
/* readonly */
bool replicated;
float restitution;
float rollingFriction;
Quaternion rotation;
bool temporary;
bool trigger;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useGravity;
/* readonly */
int weakRefs;
};

class RigidBody2D
{
public:
RigidBody2D();
// Methods:
void AddCollisionShape2D(CollisionShape2D);
void AddConstraint2D(Constraint2D);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAngularImpulse(float, bool);
void ApplyAttributes();
void ApplyForce(const Vector2&, const Vector2&, bool);
void ApplyForceToCenter(const Vector2&, bool);
void ApplyLinearImpulse(const Vector2&, const Vector2&, bool);
void ApplyLinearImpulseToCenter(const Vector2&, bool);
void ApplyTorque(float, bool);
void ApplyWorldTransform();
void ApplyWorldTransform(const Vector3&, const Quaternion&);
void CleanupConnection(Connection);
operator Component() const;
void CreateBody();
void DrawDebugGeometry(DebugRenderer, bool);
float GetAngularDamping() const;
float GetAngularVelocity() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
BodyType2D GetBodyType() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetGravityScale() const;
uint GetID() const;
float GetInertia() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetLinearDamping() const;
Vector2 GetLinearVelocity() const;
float GetMass() const;
Vector2 GetMassCenter() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool GetUseFixtureMass() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsAllowSleep() const;
bool IsAwake() const;
bool IsBullet() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsFixedRotation() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void ReleaseBody();
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveCollisionShape2D(CollisionShape2D);
void RemoveConstraint2D(Constraint2D);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAllowSleep(bool);
void SetAngularDamping(float);
void SetAngularVelocity(float);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAwake(bool);
void SetBlockEvents(bool);
void SetBodyType(BodyType2D);
void SetBullet(bool);
void SetEnabled(bool);
void SetFixedRotation(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetGravityScale(float);
void SetInertia(float);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLinearDamping(float);
void SetLinearVelocity(const Vector2&);
void SetMass(float);
void SetMassCenter(const Vector2&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
void SetUseFixtureMass(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool allowSleep;
float angularDamping;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool awake;
BodyType2D bodyType;
bool bullet;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
bool fixedRotation;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
float gravityScale;
/* readonly */
uint id;
float inertia;
float linearDamping;
Vector2 linearVelocity;
float mass;
Vector2 massCenter;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useFixtureMass;
/* readonly */
int weakRefs;
};

class Scene
{
public:
Scene();
Scene(const String&in);
// Methods:
void AddChild(Node, uint = M_MAX_UNSIGNED);
void AddComponent(Component, uint, CreateMode);
void AddListener(Component);
void AddRequiredPackageFile(PackageFile);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void BeginThreadedUpdate();
void CleanupConnection(Connection);
void Clear(bool = true, bool = true);
void ClearRequiredPackageFiles();
Node Clone(CreateMode = REPLICATED);
Component CloneComponent(Component, CreateMode, uint = 0);
Component CloneComponent(Component, uint = 0);
void ComponentAdded(Component);
void ComponentRemoved(Component);
Node CreateChild(const String& = String :: EMPTY, CreateMode = REPLICATED, uint = 0, bool = false);
Node CreateChild(uint, CreateMode, bool = false);
Component CreateComponent(StringHash, CreateMode = REPLICATED, uint = 0);
ScriptObject CreateScriptObject(ScriptFile, const String&, CreateMode mode = REPLICATED);
ScriptObject CreateScriptObject(const String&, const String&, CreateMode mode = REPLICATED);
Node CreateTemporaryChild(const String& = String :: EMPTY, CreateMode = REPLICATED, uint = 0);
void DelayedMarkedDirty(Component);
void EndThreadedUpdate();
bool GetAnimationEnabled() const;
LoadMode GetAsyncLoadMode() const;
int GetAsyncLoadingMs() const;
float GetAsyncProgress() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
uint GetChecksum() const;
Node GetChild(StringHash, bool = false) const;
Node GetChild(const String&, bool = false) const;
Node GetChild(uint) const;
Array<Node> GetChildren() const;
Array<Node> GetChildren(bool) const;
Array<Node> GetChildrenWithComponent(StringHash, bool = false) const;
Array<Node> GetChildrenWithScript(bool = false) const;
Array<Node> GetChildrenWithScript(const String&, bool = false) const;
Array<Node> GetChildrenWithTag(const String&, bool = false) const;
Component GetComponent(StringHash, bool = false) const;
Component GetComponent(uint) const;
Array<Component> GetComponents() const;
Array<Component> GetComponents(const String&, bool = false) const;
Array<Node> GetDependencyNodes() const;
Vector3 GetDirection() const;
float GetElapsedTime() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetFreeComponentID(CreateMode);
uint GetFreeNodeID(CreateMode);
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
StringHash GetNameHash() const;
Node GetNode(uint) const;
Array<Node> GetNodesWithTag(const String&) const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumComponents() const;
uint GetNumNetworkAttributes() const;
uint GetNumNetworkComponents() const;
uint GetNumPersistentChildren() const;
uint GetNumPersistentComponents() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Component GetOrCreateComponent(StringHash, CreateMode = REPLICATED, uint = 0);
Connection GetOwner() const;
Node GetParent() const;
Component GetParentComponent(StringHash, bool = false) const;
Vector2 GetPosition2D() const;
Array<PackageFile> GetRequiredPackageFiles() const;
Vector3 GetRight() const;
float GetRotation2D() const;
Vector2 GetScale2D() const;
Scene GetScene() const;
ScriptObject GetScriptObject() const;
ScriptObject GetScriptObject(const String&) const;
Vector3 GetSignedWorldScale() const;
float GetSmoothingConstant() const;
float GetSnapThreshold() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
float GetTimeScale() const;
Matrix3x4 GetTransform() const;
StringHash GetType() const;
Vector3 GetUp() const;
String GetVarNamesAttr() const;
Vector3 GetWorldDirection() const;
Vector3 GetWorldPosition() const;
Vector2 GetWorldPosition2D() const;
Vector3 GetWorldRight() const;
Quaternion GetWorldRotation() const;
float GetWorldRotation2D() const;
Vector3 GetWorldScale() const;
Vector2 GetWorldScale2D() const;
Vector3 GetWorldUp() const;
bool HasComponent(StringHash) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
Node Instantiate(Deserializer&, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node Instantiate(File, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node Instantiate(VectorBuffer&, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node InstantiateJSON(Deserializer&, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node InstantiateJSON(File, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node InstantiateJSON(JSONFile, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node InstantiateJSON(VectorBuffer&, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node InstantiateJSON(const JSONValue&, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node InstantiateXML(Deserializer&, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node InstantiateXML(File, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node InstantiateXML(VectorBuffer&, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node InstantiateXML(XMLFile, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
Node InstantiateXML(const XMLElement&, const Vector3&, const Quaternion&, CreateMode = REPLICATED);
bool IsAsyncLoading() const;
bool IsChildOf(Node) const;
bool IsDirty() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsThreadedUpdate() const;
bool IsUpdateEnabled() const;
bool Load(Deserializer&);
bool LoadAsync(File, LoadMode = LOAD_SCENE_AND_RESOURCES);
bool LoadAsyncJSON(File, LoadMode = LOAD_SCENE_AND_RESOURCES);
bool LoadAsyncXML(File, LoadMode = LOAD_SCENE_AND_RESOURCES);
bool LoadJSON(Deserializer&);
bool LoadJSON(File);
bool LoadJSON(VectorBuffer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(const XMLElement&);
Vector3 LocalToWorld(const Vector3&) const;
Vector3 LocalToWorld(const Vector4&) const;
Vector2 LocalToWorld2D(const Vector2&) const;
bool LookAt(const Vector3&, const Vector3& = Vector3 :: UP, TransformSpace = TS_WORLD);
void MarkDirty();
void MarkNetworkUpdate();
void MarkNetworkUpdate(Component);
void MarkNetworkUpdate(Node);
void MarkReplicationDirty(Node);
const Matrix3x4& GetWorldTransform() const;
operator Node() const;
void NodeAdded(Node);
void NodeRemoved(Node);
void NodeTagAdded(Node, const String&);
void NodeTagRemoved(Node, const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void Pitch(float, TransformSpace = TS_LOCAL);
void PrepareNetworkUpdate();
const Quaternion& GetRotation() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void RegisterVar(const String&);
void Remove();
void RemoveAllChildren();
void RemoveAllComponents();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(Node);
void RemoveChildren(bool, bool, bool);
void RemoveComponent(Component);
void RemoveComponent(StringHash);
void RemoveComponents(StringHash);
void RemoveComponents(bool, bool);
void RemoveInstanceDefault();
void RemoveListener(Component);
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ReorderComponent(Component, uint);
void ResetDeepEnabled();
void ResetScene();
void ResetToDefault();
void Roll(float, TransformSpace = TS_LOCAL);
void Rotate(const Quaternion&, TransformSpace = TS_LOCAL);
void Rotate2D(float, TransformSpace = TS_LOCAL);
void RotateAround(const Vector3&, const Quaternion&, TransformSpace = TS_LOCAL);
void RotateAround2D(const Vector2&, float, TransformSpace = TS_LOCAL);
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(File);
bool SaveJSON(JSONValue&) const;
bool SaveJSON(Serializer&, const String& = "\t") const;
bool SaveJSON(VectorBuffer&);
bool SaveXML(File, const String& = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& = "\t");
bool SaveXML(XMLElement&) const;
void Scale(const Vector3&);
void Scale(float);
void Scale2D(const Vector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAsyncLoadingMs(int);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetDeepEnabled(bool);
void SetDirection(const Vector3&);
void SetElapsedTime(float);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetID(uint);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetName(const String&);
void SetNetPositionAttr(const Vector3&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOwner(Connection);
void SetParent(Node);
void SetPosition(const Vector3&);
void SetPosition2D(const Vector2&);
void SetPosition2D(float, float);
void SetPositionSilent(const Vector3&);
void SetRotation(const Quaternion&);
void SetRotation2D(float);
void SetRotationSilent(const Quaternion&);
void SetScale(const Vector3&);
void SetScale(float);
void SetScale2D(const Vector2&);
void SetScale2D(float, float);
void SetScaleSilent(const Vector3&);
void SetScene(Scene);
void SetSmoothingConstant(float);
void SetSnapThreshold(float);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTimeScale(float);
void SetTransform(const Matrix3x4&);
void SetTransform(const Vector3&, const Quaternion&);
void SetTransform(const Vector3&, const Quaternion&, const Vector3&);
void SetTransform(const Vector3&, const Quaternion&, float);
void SetTransform2D(const Vector2&, float);
void SetTransform2D(const Vector2&, float, const Vector2&);
void SetTransform2D(const Vector2&, float, float);
void SetTransformSilent(const Vector3&, const Quaternion&, const Vector3&);
void SetUpdateEnabled(bool);
void SetVar(StringHash, const Variant&);
void SetVarNamesAttr(const String&);
void SetWorldDirection(const Vector3&);
void SetWorldPosition(const Vector3&);
void SetWorldPosition2D(const Vector2&);
void SetWorldPosition2D(float, float);
void SetWorldRotation(const Quaternion&);
void SetWorldRotation2D(float);
void SetWorldScale(const Vector3&);
void SetWorldScale(float);
void SetWorldScale2D(const Vector2&);
void SetWorldScale2D(float, float);
void SetWorldTransform(const Matrix3x4&);
void SetWorldTransform(const Vector3&, const Quaternion&);
void SetWorldTransform(const Vector3&, const Quaternion&, const Vector3&);
void SetWorldTransform(const Vector3&, const Quaternion&, float);
void SetWorldTransform2D(const Vector2&, float);
void SetWorldTransform2D(const Vector2&, float, const Vector2&);
void SetWorldTransform2D(const Vector2&, float, float);
void StopAsyncLoading();
const String& GetCategory() const;
const String& GetFileName() const;
const String& GetName() const;
const String& GetTypeName() const;
const String& GetVarName(StringHash) const;
void Translate(const Vector3&, TransformSpace = TS_LOCAL);
void Translate2D(const Vector2&, TransformSpace = TS_LOCAL);
void UnregisterAllVars();
void UnregisterVar(const String&);
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector3& GetNetPositionAttr() const;
const Vector3& GetPosition() const;
const Vector3& GetScale() const;
int WeakRefs() const;
Vector3 WorldToLocal(const Vector3&) const;
Vector3 WorldToLocal(const Vector4&) const;
Vector2 WorldToLocal2D(const Vector2&) const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
void Yaw(float, TransformSpace = TS_LOCAL);
operator const Animatable() const;
operator const Node() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
/* readonly */
Array<Node> allChildrenByName;
bool animationEnabled;
/* readonly */
LoadMode asyncLoadMode;
/* readonly */
bool asyncLoading;
int asyncLoadingMs;
/* readonly */
float asyncProgress;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
/* readonly */
uint checksum;
/* readonly */
Array<Node> children;
/* readonly */
Array<Node> childrenByName;
/* readonly */
Array<Component> components;
/* readonly */
DebugRenderer debugRenderer;
Vector3 direction;
float elapsedTime;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
String fileName;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
uint id;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
/* readonly */
uint numComponents;
ObjectAnimation objectAnimation;
/* readonly */
Octree octree;
Connection owner;
Node parent;
/* readonly */
PhysicsWorld physicsWorld;
/* readonly */
PhysicsWorld2D physicsWorld2D;
Vector3 position;
Vector2 position2D;
/* readonly */
int refs;
/* readonly */
bool replicated;
/* readonly */
Array<PackageFile> requiredPackageFiles;
/* readonly */
Vector3 right;
Quaternion rotation;
float rotation2D;
Vector3 scale;
Vector2 scale2D;
/* readonly */
Scene scene;
/* readonly */
ScriptObject scriptObject;
/* readonly */
Vector3 signedWorldScale;
float smoothingConstant;
float snapThreshold;
/* readonly */
Array<String> tags;
bool temporary;
float timeScale;
/* readonly */
Matrix3x4 transform;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
Vector3 up;
bool updateEnabled;
/* readonly */
VariantMap vars;
/* readonly */
int weakRefs;
Vector3 worldDirection;
Vector3 worldPosition;
Vector2 worldPosition2D;
/* readonly */
Vector3 worldRight;
Quaternion worldRotation;
float worldRotation2D;
Vector3 worldScale;
Vector2 worldScale2D;
/* readonly */
Matrix3x4 worldTransform;
/* readonly */
Vector3 worldUp;
};

class ScenePassInfo
{
public:
~ScenePassInfo();
ScenePassInfo();
// Methods:
ScenePassInfo&  operator=(const ScenePassInfo&);

// Properties:
bool allowInstancing;
bool markToStencil;
uint passIndex;
bool vertexLights;
};

class SceneReplicationState
{
public:
~SceneReplicationState();
SceneReplicationState();
// Methods:
SceneReplicationState&  operator=(const SceneReplicationState&);
void Clear();
};

class SceneResolver
{
public:
~SceneResolver();
SceneResolver();
// Methods:
SceneResolver&  operator=(const SceneResolver&);
void AddComponent(uint, Component);
void AddNode(uint, Node);
void Reset();
void Resolve();
};

class ScratchBuffer
{
public:
~ScratchBuffer();
ScratchBuffer();
// Methods:
ScratchBuffer&  operator=(const ScratchBuffer&);

// Properties:
bool reserved;
uint size;
};

class ScreenModeParams
{
public:
~ScreenModeParams();
ScreenModeParams();
// Methods:
ScreenModeParams&  operator=(const ScreenModeParams&);
bool  operator==(const ScreenModeParams&) const;
bool EqualsExceptVSync(const ScreenModeParams&) const;

// Properties:
bool borderless;
bool fullscreen;
bool highDPI;
int monitor;
int multiSample;
int refreshRate;
bool resizable;
bool tripleBuffer;
bool vsync;
};

class Script
{
public:
Script();
// Methods:
void DumpAPI(DumpMode mode = DOXYGEN, const String& sourceTree = String ( ));
bool Execute(const String&);
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
void OnEvent(Object, StringHash, VariantMap&);
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;

// Properties:
/* readonly */
String category;
Scene defaultScene;
ScriptFile defaultScriptFile;
bool executeConsoleCommands;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ScriptFile
{
public:
ScriptFile();
// Methods:
bool BeginLoad(Deserializer&);
void ClearDelayedExecute(const String& declaration = String ( ));
void DelayedExecute(float, bool, const String&, const Array<Variant> params = null);
bool EndLoad();
bool Execute(const String&, const Array<Variant> params = null);
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
void OnEvent(Object, StringHash, VariantMap&);
int Refs() const;
void ResetUseTimer();
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;

// Properties:
/* readonly */
String category;
/* readonly */
bool compiled;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class ScriptInstance
{
public:
ScriptInstance();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
void ClearDelayedExecute(const String& declaration = String ( ));
operator Component() const;
bool CreateObject(ScriptFile, const String&);
void DelayedExecute(float, bool, const String&, const Array<Variant> params = null);
bool Execute(const String&, const Array<Variant> params = null);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasMethod(const String& declaration) const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsA(const String& declaration) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
String className;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
ScriptFile scriptFile;
/* readonly */
ScriptObject scriptObject;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ScriptObject
{
public:
};

class ScrollBar
{
public:
ScrollBar();
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
void ChangeValue(float);
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
Button GetBackButton() const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
float GetEffectiveScrollStep() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
Button GetForwardButton() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
Orientation GetOrientation() const;
UIElement GetParent() const;
int GetPriority() const;
float GetRange() const;
UIElement GetRoot() const;
float GetScrollStep() const;
Slider GetSlider() const;
bool GetSortChildren() const;
float GetStepFactor() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
float GetValue() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetOrientation(Orientation);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRange(float);
void SetRenderTexture(Texture2D);
void SetScrollStep(float);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
void SetStepFactor(float);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetValue(float);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
void StepBack();
void StepForward();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
Button backButton;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
/* readonly */
float effectiveScrollStep;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
/* readonly */
Button forwardButton;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
Orientation orientation;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
float range;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
float scrollStep;
bool selected;
IntVector2 size;
/* readonly */
Slider slider;
bool sortChildren;
float stepFactor;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
float value;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class ScrollView
{
public:
ScrollView();
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void BringToFront();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetAutoDisableChildren() const;
float GetAutoDisableThreshold() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
UIElement GetContentElement() const;
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
ScrollBar GetHorizontalScrollBar() const;
bool GetHorizontalScrollBarVisible() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
float GetPageStep() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
bool GetScrollBarsAutoVisible() const;
float GetScrollDeceleration() const;
BorderImage GetScrollPanel() const;
float GetScrollSnapEpsilon() const;
float GetScrollStep() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
ScrollBar GetVerticalScrollBar() const;
bool GetVerticalScrollBarVisible() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetClipBorder() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
const IntVector2& GetViewPosition() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
operator ListView() const;
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAutoDisableChildren(bool);
void SetAutoDisableThreshold(float);
void SetBlockEvents(bool);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetContentElement(UIElement);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHorizontalScrollBarVisible(bool);
void SetHovering(bool);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetPageStep(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetScrollBarsAutoVisible(bool);
void SetScrollBarsVisible(bool, bool);
void SetScrollDeceleration(float);
void SetScrollSnapEpsilon(float);
void SetScrollStep(float);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVerticalScrollBarVisible(bool);
void SetViewPosition(const IntVector2&);
void SetViewPosition(int, int);
void SetViewPositionAttr(const IntVector2&);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const ListView() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool autoDisableChildren;
float autoDisableThreshold;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
UIElement contentElement;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
/* readonly */
ScrollBar horizontalScrollBar;
bool horizontalScrollBarVisible;
/* readonly */
bool hovering;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
float pageStep;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool scrollBarsAutoVisible;
float scrollDeceleration;
/* readonly */
BorderImage scrollPanel;
float scrollSnapEpsilon;
float scrollStep;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
/* readonly */
ScrollBar verticalScrollBar;
bool verticalScrollBarVisible;
IntVector2 viewPosition;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class Serializable
{
public:
Serializable();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
operator AnimatedModel() const;
operator AnimatedSprite2D() const;
operator AnimationController() const;
void ApplyAttributes();
operator BillboardSet() const;
operator BorderImage() const;
operator Button() const;
operator Camera() const;
operator CheckBox() const;
operator CollisionBox2D() const;
operator CollisionChain2D() const;
operator CollisionCircle2D() const;
operator CollisionEdge2D() const;
operator CollisionPolygon2D() const;
operator CollisionShape2D() const;
operator CollisionShape() const;
operator Component() const;
operator Constraint2D() const;
operator Constraint() const;
operator ConstraintDistance2D() const;
operator ConstraintFriction2D() const;
operator ConstraintGear2D() const;
operator ConstraintMotor2D() const;
operator ConstraintMouse2D() const;
operator ConstraintPrismatic2D() const;
operator ConstraintPulley2D() const;
operator ConstraintRevolute2D() const;
operator ConstraintRope2D() const;
operator ConstraintWeld2D() const;
operator ConstraintWheel2D() const;
operator CrowdAgent() const;
operator CrowdManager() const;
operator Cursor() const;
operator CustomGeometry() const;
operator DebugRenderer() const;
operator DecalSet() const;
operator Drawable2D() const;
operator Drawable() const;
operator DropDownList() const;
operator DynamicNavigationMesh() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
operator IKConstraint() const;
operator IKEffector() const;
operator IKSolver() const;
bool IsInstanceOf(StringHash) const;
bool IsTemporary() const;
operator Light() const;
operator LineEdit() const;
operator ListView() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
operator LogicComponent() const;
void MarkNetworkUpdate();
operator Menu() const;
operator NavArea() const;
operator Navigable() const;
operator NavigationMesh() const;
operator NetworkPriority() const;
operator Node() const;
operator Object() const;
operator Obstacle() const;
operator Octree() const;
operator OffMeshConnection() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
operator ParticleEmitter2D() const;
operator ParticleEmitter() const;
operator PhysicsWorld2D() const;
operator PhysicsWorld() const;
operator ProgressBar() const;
operator RaycastVehicle() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void RemoveInstanceDefault();
operator Renderer2D() const;
void ResetToDefault();
operator RibbonTrail() const;
operator RigidBody2D() const;
operator RigidBody() const;
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
operator Scene() const;
operator ScriptInstance() const;
operator ScrollBar() const;
operator ScrollView() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetTemporary(bool);
operator Skybox() const;
operator Slider() const;
operator SmoothedTransform() const;
operator SoundListener() const;
operator SoundSource3D() const;
operator SoundSource() const;
operator SplinePath() const;
operator Sprite() const;
operator StaticModel() const;
operator StaticModelGroup() const;
operator StaticSprite2D() const;
operator StretchableSprite2D() const;
const String& GetCategory() const;
const String& GetTypeName() const;
operator Terrain() const;
operator TerrainPatch() const;
operator Text3D() const;
operator Text() const;
operator TileMap2D() const;
operator TileMapLayer2D() const;
operator ToolTip() const;
operator UIComponent() const;
operator UIElement() const;
operator UISelectable() const;
operator UnknownComponent() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
operator View3D() const;
int WeakRefs() const;
operator Window() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator Zone() const;
operator const Animatable() const;
operator const AnimatedModel() const;
operator const AnimatedSprite2D() const;
operator const AnimationController() const;
operator const BillboardSet() const;
operator const BorderImage() const;
operator const Button() const;
operator const Camera() const;
operator const CheckBox() const;
operator const CollisionBox2D() const;
operator const CollisionChain2D() const;
operator const CollisionCircle2D() const;
operator const CollisionEdge2D() const;
operator const CollisionPolygon2D() const;
operator const CollisionShape2D() const;
operator const CollisionShape() const;
operator const Component() const;
operator const Constraint2D() const;
operator const Constraint() const;
operator const ConstraintDistance2D() const;
operator const ConstraintFriction2D() const;
operator const ConstraintGear2D() const;
operator const ConstraintMotor2D() const;
operator const ConstraintMouse2D() const;
operator const ConstraintPrismatic2D() const;
operator const ConstraintPulley2D() const;
operator const ConstraintRevolute2D() const;
operator const ConstraintRope2D() const;
operator const ConstraintWeld2D() const;
operator const ConstraintWheel2D() const;
operator const CrowdAgent() const;
operator const CrowdManager() const;
operator const Cursor() const;
operator const CustomGeometry() const;
operator const DebugRenderer() const;
operator const DecalSet() const;
operator const Drawable2D() const;
operator const Drawable() const;
operator const DropDownList() const;
operator const DynamicNavigationMesh() const;
operator const IKConstraint() const;
operator const IKEffector() const;
operator const IKSolver() const;
operator const Light() const;
operator const LineEdit() const;
operator const ListView() const;
operator const LogicComponent() const;
operator const Menu() const;
operator const NavArea() const;
operator const Navigable() const;
operator const NavigationMesh() const;
operator const NetworkPriority() const;
operator const Node() const;
operator const Object() const;
operator const Obstacle() const;
operator const Octree() const;
operator const OffMeshConnection() const;
operator const ParticleEmitter2D() const;
operator const ParticleEmitter() const;
operator const PhysicsWorld2D() const;
operator const PhysicsWorld() const;
operator const ProgressBar() const;
operator const RaycastVehicle() const;
operator const RefCounted() const;
operator const Renderer2D() const;
operator const RibbonTrail() const;
operator const RigidBody2D() const;
operator const RigidBody() const;
operator const Scene() const;
operator const ScriptInstance() const;
operator const ScrollBar() const;
operator const ScrollView() const;
operator const Skybox() const;
operator const Slider() const;
operator const SmoothedTransform() const;
operator const SoundListener() const;
operator const SoundSource3D() const;
operator const SoundSource() const;
operator const SplinePath() const;
operator const Sprite() const;
operator const StaticModel() const;
operator const StaticModelGroup() const;
operator const StaticSprite2D() const;
operator const StretchableSprite2D() const;
operator const Terrain() const;
operator const TerrainPatch() const;
operator const Text3D() const;
operator const Text() const;
operator const TileMap2D() const;
operator const TileMapLayer2D() const;
operator const ToolTip() const;
operator const UIComponent() const;
operator const UIElement() const;
operator const UISelectable() const;
operator const UnknownComponent() const;
operator const View3D() const;
operator const Window() const;
operator const Zone() const;

// Properties:
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint numAttributes;
/* readonly */
int refs;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class Serializer
{
public:
// Methods:
Serializer&  operator=(const Serializer&);
operator File() const;
operator NamedPipe() const;
uint Write(Array<uint8>);
bool WriteBool(bool);
bool WriteBoundingBox(const BoundingBox&);
bool WriteByte(int8);
bool WriteColor(const Color&);
bool WriteDouble(double);
bool WriteFileID(const String&);
bool WriteFloat(float);
bool WriteInt(int);
bool WriteInt64(int64);
bool WriteIntRect(const IntRect&);
bool WriteIntVector2(const IntVector2&);
bool WriteIntVector3(const IntVector3&);
bool WriteLine(const String&);
bool WriteMatrix3(const Matrix3&);
bool WriteMatrix3x4(const Matrix3x4&);
bool WriteMatrix4(const Matrix4&);
bool WriteNetID(uint);
bool WritePackedQuaternion(const Quaternion&);
bool WritePackedVector3(const Vector3&, float);
bool WriteQuaternion(const Quaternion&);
bool WriteRect(const Rect&);
bool WriteResourceRef(const ResourceRef&);
bool WriteResourceRefList(const ResourceRefList&);
bool WriteShort(int16);
bool WriteString(const String&);
bool WriteStringHash(const StringHash&);
bool WriteStringVector(Array<String>);
bool WriteUByte(uint8);
bool WriteUInt(uint);
bool WriteUInt64(uint64);
bool WriteUShort(uint16);
bool WriteVLE(uint);
bool WriteVariant(const Variant&);
bool WriteVariantData(const Variant&);
bool WriteVariantMap(const VariantMap&);
bool WriteVector2(const Vector2&);
bool WriteVector3(const Vector3&);
bool WriteVector4(const Vector4&);
bool WriteVectorBuffer(const VectorBuffer&);
operator const File() const;
operator const NamedPipe() const;
};

class Shader
{
public:
Shader();
// Methods:
bool BeginLoad(Deserializer&);
bool EndLoad();
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
Object GetSubsystem(StringHash) const;
uint GetTimeStamp() const;
StringHash GetType() const;
uint GetUseTimer();
ShaderVariation GetVariation(ShaderType, const String&);
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetSourceCode(ShaderType) const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class ShaderParameter
{
public:
~ShaderParameter();
ShaderParameter();
ShaderParameter(const String&in, uint, int);
ShaderParameter(ShaderType, const String&in, uint, uint, uint);
ShaderParameter(ShaderType, const String&in, uint, uint);
// Methods:
ShaderParameter&  operator=(const ShaderParameter&);

// Properties:
uint buffer;
uint glType;
int location;
String name;
uint offset;
uint regCount;
uint register;
uint size;
ShaderType type;
};

class ShaderParameterAnimationInfo
{
public:
ShaderParameterAnimationInfo(Material&, const String&in, ValueAnimation&, WrapMode, float);
ShaderParameterAnimationInfo(const ShaderParameterAnimationInfo&in);
// Methods:
ValueAnimation GetAnimation() const;
float GetSpeed() const;
Object GetTarget() const;
float GetTime() const;
WrapMode GetWrapMode() const;
operator RefCounted() const;
int Refs() const;
void SetSpeed(float);
bool SetTime(float);
void SetWrapMode(WrapMode);
const String& GetName() const;
bool Update(float);
operator ValueAnimationInfo() const;
int WeakRefs() const;
operator const RefCounted() const;
operator const ValueAnimationInfo() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class ShaderPrecache
{
public:
ShaderPrecache(const String&in);
// Methods:
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void StoreShaders(ShaderVariation, ShaderVariation);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class ShaderVariation
{
public:
ShaderVariation(Shader&, ShaderType);
// Methods:
void ClearDataLost();
bool Create();
uint64 GetElementHash() const;
String GetFullName() const;
uint GetGPUObjectName() const;
Graphics GetGraphics() const;
Shader GetOwner() const;
ShaderType GetShaderType() const;
bool HasParameter(StringHash) const;
bool HasPendingData() const;
bool HasTextureUnit(TextureUnit) const;
bool IsDataLost() const;
void OnDeviceLost();
void OnDeviceReset();
operator RefCounted() const;
int Refs() const;
void Release();
void SetDefines(const String&);
void SetName(const String&);
const String& GetCompilerOutput() const;
const String& GetDefines() const;
const String& GetDefinesClipPlane();
const String& GetName() const;
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
bool dataLost;
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class ShadowBatchQueue
{
public:
~ShadowBatchQueue();
ShadowBatchQueue();
// Methods:
ShadowBatchQueue&  operator=(const ShadowBatchQueue&);

// Properties:
float farSplit;
float nearSplit;
BatchQueue shadowBatches;
IntRect shadowViewport;
};

class SimpleNavBuildData
{
public:
~SimpleNavBuildData();
SimpleNavBuildData();
// Methods:
SimpleNavBuildData&  operator=(const SimpleNavBuildData&);

// Properties:
BoundingBox worldBoundingBox;
};

class Skeleton
{
public:
// Methods:
Skeleton&  operator=(const Skeleton&);
void ClearBones();
void Define(const Skeleton&);
Bone GetBone(const String&);
Bone GetBone(const StringHash&);
Bone GetBone(uint);
uint GetBoneIndex(Bone) const;
uint GetBoneIndex(const String&) const;
uint GetBoneIndex(const StringHash&) const;
Bone GetBoneParent(Bone);
uint GetNumBones() const;
Bone GetRootBone();
bool Load(Deserializer&);
void Reset();
void ResetSilent();
bool Save(Serializer&) const;
void SetRootBoneIndex(uint);

// Properties:
/* readonly */
Array<Bone> bones;
/* readonly */
uint numBones;
/* readonly */
Bone rootBone;
};

class Skybox
{
public:
Skybox();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void ApplyMaterialList(const String& = String :: EMPTY);
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial() const;
Material GetMaterial(uint) const;
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Model GetModel() const;
ResourceRef GetModelAttr() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumGeometries() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
uint GetOcclusionLodLevel() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInside(const Vector3&) const;
bool IsInsideLocal(const Vector3&) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
const ResourceRefList& GetMaterialsAttr() const;
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
bool SetMaterial(uint, Material);
void SetMaterialsAttr(const ResourceRefList&);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetModel(Model);
void SetModelAttr(const ResourceRef&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOcclusionLodLevel(uint);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
operator StaticModel() const;
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const StaticModel() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
Material material;
Array<Material> materials;
uint maxLights;
Model model;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
uint numGeometries;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
uint occlusionLodLevel;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class Slider
{
public:
Slider();
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
void ChangeValue(float);
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
BorderImage GetKnob() const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
Orientation GetOrientation() const;
UIElement GetParent() const;
int GetPriority() const;
float GetRange() const;
float GetRepeatRate() const;
UIElement GetRoot() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
float GetValue() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetOrientation(Orientation);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRange(float);
void SetRenderTexture(Texture2D);
void SetRepeatRate(float);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetValue(float);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
/* readonly */
BorderImage knob;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
Orientation orientation;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
float range;
/* readonly */
int refs;
float repeatRate;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
float value;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class SmoothedTransform
{
public:
SmoothedTransform();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
Vector3 GetTargetWorldPosition() const;
Quaternion GetTargetWorldRotation() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInProgress() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
const Quaternion& GetTargetRotation() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTargetPosition(const Vector3&);
void SetTargetRotation(const Quaternion&);
void SetTargetWorldPosition(const Vector3&);
void SetTargetWorldRotation(const Quaternion&);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float, float);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetTargetPosition() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inProgress;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
Vector3 targetPosition;
Quaternion targetRotation;
Vector3 targetWorldPosition;
Quaternion targetWorldRotation;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class Sound
{
public:
Sound();
// Methods:
void AddMetadata(const String&, const Variant&);
bool BeginLoad(Deserializer&);
bool EndLoad();
void FixInterpolation();
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
uint GetDataSize() const;
SoundStream GetDecoderStream() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFrequency() const;
uint GetIntFrequency() const;
float GetLength() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
uint GetSampleSize() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasMetadata() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsCompressed() const;
bool IsInstanceOf(StringHash) const;
bool IsLooped() const;
bool IsSixteenBit() const;
bool IsStereo() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
bool LoadOggVorbis(Deserializer&);
bool LoadRaw(Deserializer&);
bool LoadWav(Deserializer&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RemoveAllMetadata();
void RemoveMetadata(const String&);
void ResetUseTimer();
operator Resource() const;
operator ResourceWithMetadata() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetFormat(uint, bool, bool);
void SetGlobalVar(StringHash, const Variant&);
void SetLoop(uint, uint);
void SetLooped(bool);
void SetMemoryUse(uint);
void SetName(const String&);
void SetSize(uint);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetMetadata(const String&) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;
operator const ResourceWithMetadata() const;

// Properties:
/* readonly */
String category;
/* readonly */
bool compressed;
/* readonly */
float frequency;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hasMetadata;
/* readonly */
float length;
bool looped;
/* readonly */
uint memoryUse;
Array<Variant> metadata;
String name;
/* readonly */
int refs;
/* readonly */
uint sampleSize;
/* readonly */
bool sixteenBit;
/* readonly */
bool stereo;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class SoundListener
{
public:
SoundListener();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class SoundSource
{
public:
SoundSource();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
float GetAttenuation() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
AutoRemoveMode GetAutoRemoveMode() const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFrequency() const;
float GetGain() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetPanning() const;
int GetPositionAttr() const;
Scene GetScene() const;
Sound GetSound() const;
ResourceRef GetSoundAttr() const;
String GetSoundType() const;
Object GetSubsystem(StringHash) const;
float GetTimePosition() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsPlaying() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void Play(Sound);
void Play(Sound, float);
void Play(Sound, float, float);
void Play(Sound, float, float, float);
void Play(SoundStream);
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void Seek(float);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttenuation(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAutoRemoveMode(AutoRemoveMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetFrequency(float);
void SetGain(float);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetPanning(float);
void SetPlayingAttr(bool);
void SetPositionAttr(int);
void SetSoundAttr(const ResourceRef&);
void SetSoundType(const String&);
void SetTemporary(bool);
operator SoundSource3D() const;
void Stop();
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateMasterGain();
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const SoundSource3D() const;

// Properties:
bool animationEnabled;
/* readonly */
float attenuation;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
AutoRemoveMode autoRemoveMode;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
float frequency;
float gain;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
float panning;
/* readonly */
bool playing;
/* readonly */
int refs;
/* readonly */
bool replicated;
/* readonly */
Sound sound;
String soundType;
bool temporary;
/* readonly */
float timePosition;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class SoundSource3D
{
public:
SoundSource3D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CalculateAttenuation();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
float GetAttenuation() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
AutoRemoveMode GetAutoRemoveMode() const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetFarDistance() const;
float GetFrequency() const;
float GetGain() const;
uint GetID() const;
float GetInnerAngle() const;
bool GetInterceptNetworkUpdate(const String&) const;
float GetNearDistance() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOuterAngle() const;
float GetPanning() const;
int GetPositionAttr() const;
Scene GetScene() const;
Sound GetSound() const;
ResourceRef GetSoundAttr() const;
String GetSoundType() const;
Object GetSubsystem(StringHash) const;
float GetTimePosition() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsPlaying() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void Play(Sound);
void Play(Sound, float);
void Play(Sound, float, float);
void Play(Sound, float, float, float);
void Play(SoundStream);
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
float RollAngleoffFactor() const;
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void Seek(float);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAngleAttenuation(float, float);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
void SetAttenuation(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAutoRemoveMode(AutoRemoveMode);
void SetBlockEvents(bool);
void SetDistanceAttenuation(float, float, float);
void SetEnabled(bool);
void SetFarDistance(float);
void SetFrequency(float);
void SetGain(float);
void SetGlobalVar(StringHash, const Variant&);
void SetInnerAngle(float);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetNearDistance(float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOuterAngle(float);
void SetPanning(float);
void SetPlayingAttr(bool);
void SetPositionAttr(int);
void SetRolloffFactor(float);
void SetSoundAttr(const ResourceRef&);
void SetSoundType(const String&);
void SetTemporary(bool);
operator SoundSource() const;
void Stop();
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateMasterGain();
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const SoundSource() const;

// Properties:
bool animationEnabled;
/* readonly */
float attenuation;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
AutoRemoveMode autoRemoveMode;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
float farDistance;
float frequency;
float gain;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
float innerAngle;
float nearDistance;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
float outerAngle;
float panning;
/* readonly */
bool playing;
/* readonly */
int refs;
/* readonly */
bool replicated;
float rolloffFactor;
/* readonly */
Sound sound;
String soundType;
bool temporary;
/* readonly */
float timePosition;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class SoundStream
{
public:
// Methods:
operator BufferedSoundStream() const;
float GetFrequency() const;
uint GetIntFrequency() const;
uint GetSampleSize() const;
bool GetStopAtEnd() const;
bool IsSixteenBit() const;
bool IsStereo() const;
operator OggVorbisSoundStream() const;
operator RefCounted() const;
int Refs() const;
bool Seek(uint);
void SetFormat(uint, bool, bool);
void SetStopAtEnd(bool);
int WeakRefs() const;
operator const BufferedSoundStream() const;
operator const OggVorbisSoundStream() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class SourceBatch
{
public:
~SourceBatch();
SourceBatch();
SourceBatch(const SourceBatch&in);
// Methods:
SourceBatch&  operator=(const SourceBatch&);

// Properties:
float distance;
GeometryType geometryType;
uint numWorldTransforms;
};

class SourceBatch2D
{
public:
~SourceBatch2D();
SourceBatch2D();
// Methods:
SourceBatch2D&  operator=(const SourceBatch2D&);

// Properties:
float distance;
int drawOrder;
};

class Sphere
{
public:
Sphere();
Sphere(const Sphere&in);
Sphere(const Vector3&in, float);
Sphere(const BoundingBox&in);
Sphere(const Frustum&in);
Sphere(const Polyhedron&in);
// Methods:
Sphere&  operator=(const Sphere&);
bool  operator==(const Sphere&) const;
void Clear();
void Define(const BoundingBox&);
void Define(const Frustum&);
void Define(const Polyhedron&);
void Define(const Sphere&);
void Define(const Vector3&, float);
bool Defined() const;
float Distance(const Vector3&) const;
Vector3 GetLocalPoint(float, float) const;
Vector3 GetPoint(float, float) const;
Intersection IsInside(const BoundingBox&) const;
Intersection IsInside(const Sphere&) const;
Intersection IsInside(const Vector3&) const;
Intersection IsInsideFast(const BoundingBox&) const;
Intersection IsInsideFast(const Sphere&) const;
void Merge(const BoundingBox&);
void Merge(const Frustum&);
void Merge(const Polyhedron&);
void Merge(const Sphere&);
void Merge(const Vector3&);

// Properties:
Vector3 center;
float radius;
};

class Spline
{
public:
~Spline();
Spline();
Spline(InterpolationMode);
Spline(const Spline&in);
Spline(Variant[]@, InterpolationMode = BEZIER_CURVE);
// Methods:
Spline&  operator=(const Spline&);
bool  operator==(const Spline&) const;
void AddKnot(const Variant&);
void AddKnot(const Variant&, uint);
void Clear();
InterpolationMode GetInterpolationMode() const;
Variant GetKnot(uint) const;
Variant GetPoint(float) const;
void RemoveKnot();
void RemoveKnot(uint);
void SetInterpolationMode(InterpolationMode);
void SetKnot(const Variant&, uint);

// Properties:
InterpolationMode interpolationMode;
Array<Variant> knot;
Array<Variant> knots;
};

class SplinePath
{
public:
SplinePath();
// Methods:
void AddControlPoint(Node, uint = M_MAX_UNSIGNED);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
void ClearControlPoints();
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
uint GetControlledIdAttr() const;
Node GetControlledNode() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
InterpolationMode GetInterpolationMode() const;
float GetLength() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Vector3 GetPoint(float) const;
Vector3 GetPosition() const;
Scene GetScene() const;
float GetSpeed() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsFinished() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
void Move(float);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveControlPoint(Node);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void Reset();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetControlledIdAttr(uint);
void SetControlledNode(Node);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInterpolationMode(InterpolationMode);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetPosition(float);
void SetSpeed(float);
void SetTemporary(bool);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
Node controlledNode;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
InterpolationMode interpolationMode;
/* readonly */
bool isFinished;
/* readonly */
float length;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
float speed;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class Sprite
{
public:
Sprite();
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void BringToFront();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
float GetRotation() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetClipBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetHotSpot() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
const Matrix3x4& GetTransform() const;
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHotSpot(const IntVector2&);
void SetHotSpot(int, int);
void SetHovering(bool);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const Vector2&);
void SetPosition(float, float);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetRotation(float);
void SetScale(const Vector2&);
void SetScale(float);
void SetScale(float, float);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
const Vector2& GetPosition() const;
const Vector2& GetScale() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hotSpot;
/* readonly */
bool hovering;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
Vector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
float rotation;
Vector2 scale;
/* readonly */
IntVector2 screenPosition;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class Sprite2D
{
public:
Sprite2D();
// Methods:
bool BeginLoad(Deserializer&);
bool EndLoad();
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
bool GetDrawRectangle(Rect&, bool = false, bool = false) const;
bool GetDrawRectangle(Rect&, const Vector2&, bool = false, bool = false) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
SpriteSheet2D GetSpriteSheet() const;
Object GetSubsystem(StringHash) const;
Texture2D GetTexture() const;
float GetTextureEdgeOffset() const;
bool GetTextureRectangle(Rect&, bool = false, bool = false) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
const IntRect& GetRectangle() const;
const IntVector2& GetOffset() const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetHotSpot(const Vector2&);
void SetMemoryUse(uint);
void SetName(const String&);
void SetOffset(const IntVector2&);
void SetRectangle(const IntRect&);
void SetSpriteSheet(SpriteSheet2D);
void SetTexture(Texture2D);
void SetTextureEdgeOffset(float);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetHotSpot() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
Vector2 hotSpot;
/* readonly */
uint memoryUse;
String name;
IntVector2 offset;
IntRect rectangle;
/* readonly */
int refs;
Texture2D texture;
float textureEdgeOffset;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class SpriteSheet2D
{
public:
SpriteSheet2D();
// Methods:
bool BeginLoad(Deserializer&);
void DefineSprite(const String&, const IntRect&, const Vector2& = Vector2 ( 0.5f , 0.5f ), const IntVector2& = IntVector2 :: ZERO);
bool EndLoad();
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
Sprite2D GetSprite(const String&) const;
Object GetSubsystem(StringHash) const;
Texture2D GetTexture() const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
void SetTexture(Texture2D);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
Texture2D texture;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class StaticModel
{
public:
StaticModel();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
operator AnimatedModel() const;
void ApplyAttributes();
void ApplyMaterialList(const String& = String :: EMPTY);
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial() const;
Material GetMaterial(uint) const;
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Model GetModel() const;
ResourceRef GetModelAttr() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumGeometries() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
uint GetOcclusionLodLevel() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInside(const Vector3&) const;
bool IsInsideLocal(const Vector3&) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
const ResourceRefList& GetMaterialsAttr() const;
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
bool SetMaterial(uint, Material);
void SetMaterialsAttr(const ResourceRefList&);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetModel(Model);
void SetModelAttr(const ResourceRef&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOcclusionLodLevel(uint);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
operator Skybox() const;
operator StaticModelGroup() const;
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const AnimatedModel() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const Skybox() const;
operator const StaticModelGroup() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
Material material;
Array<Material> materials;
uint maxLights;
Model model;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
uint numGeometries;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
uint occlusionLodLevel;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class StaticModelGeometryData
{
public:
~StaticModelGeometryData();
StaticModelGeometryData();
// Methods:
StaticModelGeometryData&  operator=(const StaticModelGeometryData&);

// Properties:
Vector3 center;
uint lodLevel;
};

class StaticModelGroup
{
public:
StaticModelGroup();
// Methods:
void AddInstanceNode(Node);
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void ApplyMaterialList(const String& = String :: EMPTY);
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
uint GetID() const;
Node GetInstanceNode(uint) const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial() const;
Material GetMaterial(uint) const;
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Model GetModel() const;
ResourceRef GetModelAttr() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumGeometries() const;
uint GetNumInstanceNodes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
uint GetOcclusionLodLevel() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInside(const Vector3&) const;
bool IsInsideLocal(const Vector3&) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllInstanceNodes();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveInstanceNode(Node);
void RemoveObjectAnimation();
void ResetToDefault();
const ResourceRefList& GetMaterialsAttr() const;
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
bool SetMaterial(uint, Material);
void SetMaterialsAttr(const ResourceRefList&);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetModel(Model);
void SetModelAttr(const ResourceRef&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOcclusionLodLevel(uint);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
operator StaticModel() const;
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const StaticModel() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
/* readonly */
Array<Node> instanceNodes;
uint lightMask;
float lodBias;
Material material;
Array<Material> materials;
uint maxLights;
Model model;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
uint numGeometries;
/* readonly */
uint numInstanceNodes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
uint occlusionLodLevel;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class StaticSprite2D
{
public:
StaticSprite2D();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
operator AnimatedSprite2D() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
const Color& GetColor() const;
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable2D() const;
operator Drawable() const;
float GetAlpha() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
Material GetCustomMaterial() const;
ResourceRef GetCustomMaterialAttr() const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
bool GetFlipX() const;
bool GetFlipY() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayer() const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
int GetOrderInLayer() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Sprite2D GetSprite() const;
ResourceRef GetSpriteAttr() const;
Object GetSubsystem(StringHash) const;
bool GetSwapXY() const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
bool GetUseDrawRect() const;
bool GetUseHotSpot() const;
bool GetUseTextureRect() const;
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
const Rect& GetDrawRect() const;
const Rect& GetTextureRect() const;
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlpha(float);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetColor(const Color&);
void SetCustomMaterial(Material);
void SetCustomMaterialAttr(const ResourceRef&);
void SetDrawDistance(float);
void SetDrawRect(const Rect&);
void SetEnabled(bool);
void SetFlip(bool, bool, bool = false);
void SetFlipX(bool);
void SetFlipY(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetHotSpot(const Vector2&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLayer(int);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOrderInLayer(int);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetSprite(Sprite2D);
void SetSpriteAttr(const ResourceRef&);
void SetSwapXY(bool);
void SetTemporary(bool);
void SetTextureRect(const Rect&);
void SetUseDrawRect(bool);
void SetUseHotSpot(bool);
void SetUseTextureRect(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
operator StretchableSprite2D() const;
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetHotSpot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const AnimatedSprite2D() const;
operator const Component() const;
operator const Drawable2D() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const StretchableSprite2D() const;

// Properties:
float alpha;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
Color color;
Material customMaterial;
float drawDistance;
Rect drawRect;
bool enabled;
/* readonly */
bool enabledEffective;
bool flipX;
bool flipY;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
Vector2 hotSpot;
/* readonly */
uint id;
/* readonly */
bool inView;
int layer;
uint lightMask;
float lodBias;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
int orderInLayer;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
Sprite2D sprite;
bool swapXY;
bool temporary;
Rect textureRect;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDrawRect;
bool useHotSpot;
bool useTextureRect;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class StoredLogMessage
{
public:
~StoredLogMessage();
StoredLogMessage();
StoredLogMessage(const String&in, int, bool);
// Methods:
StoredLogMessage&  operator=(const StoredLogMessage&);

// Properties:
bool error;
int level;
String message;
};

class StretchableSprite2D
{
public:
StretchableSprite2D();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
const Color& GetColor() const;
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable2D() const;
operator Drawable() const;
float GetAlpha() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
Material GetCustomMaterial() const;
ResourceRef GetCustomMaterialAttr() const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
bool GetFlipX() const;
bool GetFlipY() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayer() const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
int GetOrderInLayer() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Sprite2D GetSprite() const;
ResourceRef GetSpriteAttr() const;
Object GetSubsystem(StringHash) const;
bool GetSwapXY() const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
bool GetUseDrawRect() const;
bool GetUseHotSpot() const;
bool GetUseTextureRect() const;
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
const IntRect& GetBorder() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
const Rect& GetDrawRect() const;
const Rect& GetTextureRect() const;
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlpha(float);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetCastShadows(bool);
void SetColor(const Color&);
void SetCustomMaterial(Material);
void SetCustomMaterialAttr(const ResourceRef&);
void SetDrawDistance(float);
void SetDrawRect(const Rect&);
void SetEnabled(bool);
void SetFlip(bool, bool, bool = false);
void SetFlipX(bool);
void SetFlipY(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetHotSpot(const Vector2&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLayer(int);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOrderInLayer(int);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetSprite(Sprite2D);
void SetSpriteAttr(const ResourceRef&);
void SetSwapXY(bool);
void SetTemporary(bool);
void SetTextureRect(const Rect&);
void SetUseDrawRect(bool);
void SetUseHotSpot(bool);
void SetUseTextureRect(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
operator StaticSprite2D() const;
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector2& GetHotSpot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable2D() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const StaticSprite2D() const;

// Properties:
float alpha;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
Color color;
Material customMaterial;
float drawDistance;
Rect drawRect;
bool enabled;
/* readonly */
bool enabledEffective;
bool flipX;
bool flipY;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
Vector2 hotSpot;
/* readonly */
uint id;
/* readonly */
bool inView;
int layer;
uint lightMask;
float lodBias;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
int orderInLayer;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
Sprite2D sprite;
bool swapXY;
bool temporary;
Rect textureRect;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDrawRect;
bool useHotSpot;
bool useTextureRect;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class String
{
public:
~String();
String();
String(const String&in);
String(int);
String(int16);
String(int64);
String(uint);
String(uint16);
String(uint64);
String(float);
String(double);
String(bool);
String(int8);
String(int8, uint);
String(const char*);
// Methods:
String  operator+(bool) const;
String  operator+(const String&) const;
String  operator+(double) const;
String  operator+(float) const;
String  operator+(int) const;
String  operator+(uint) const;
String&  operator+=(bool);
String&  operator+=(const String&);
String&  operator+=(double);
String&  operator+=(float);
String&  operator+=(int);
String&  operator+=(int16);
String&  operator+=(int64);
String&  operator+=(int8);
String&  operator+=(uint);
String&  operator+=(uint16);
String&  operator+=(uint64);
int  operator<(const String&) const;
String&  operator=(bool);
String&  operator=(const String&);
String&  operator=(double);
String&  operator=(float);
String&  operator=(int);
String&  operator=(uint);
bool  operator==(const String&) const;
int8&  operator[](uint);
String& Append(const String&);
String& Append(int8);
String& AppendUTF8(uint);
int8& At(uint);
uint AtUTF8(uint) const;
int8 Back() const;
uint ByteOffsetUTF8(uint) const;
uint Capacity() const;
void Clear();
void Compact();
int Compare(const String&, bool = true) const;
bool Contains(const String&, bool = true) const;
bool Contains(int8, bool = true) const;
bool Empty() const;
bool EndsWith(const String&, bool = true) const;
void Erase(uint, uint = 1);
uint Find(const String&, uint = 0, bool = true) const;
uint Find(int8, uint = 0, bool = true) const;
uint FindLast(const String&, uint = String :: NPOS, bool = true) const;
uint FindLast(int8, uint = String :: NPOS, bool = true) const;
int8 Front() const;
void Insert(uint, const String&);
void Insert(uint, int8);
void Join(Array<String>, const String&);
uint Length() const;
uint LengthUTF8() const;
uint NextUTF8Char(uint&) const;
void Replace(const String&, const String&, bool = true);
void Replace(int8, int8, bool = true);
void Replace(uint, uint, const String&);
void ReplaceUTF8(uint, uint);
String Replaced(const String&, const String&, bool = true) const;
String Replaced(int8, int8, bool = true) const;
void Reserve(uint);
void Resize(uint);
Array<String> Split(int8, bool = false) const;
bool StartsWith(const String&, bool = true) const;
String Substring(uint) const;
String Substring(uint, uint) const;
String SubstringUTF8(uint) const;
String SubstringUTF8(uint, uint) const;
void Swap(String&);
bool ToBool() const;
Color ToColor() const;
double ToDouble() const;
float ToFloat() const;
uint ToHash() const;
int ToInt(int base = 10) const;
int64 ToInt64(int base = 10) const;
IntRect ToIntRect() const;
IntVector2 ToIntVector2() const;
IntVector3 ToIntVector3() const;
String ToLower() const;
Matrix3 ToMatrix3() const;
Matrix3x4 ToMatrix3x4() const;
Matrix4 ToMatrix4() const;
Quaternion ToQuaternion() const;
uint ToUInt(int base = 10) const;
uint64 ToUInt64(int base = 10) const;
String ToUpper() const;
Vector2 ToVector2() const;
Vector3 ToVector3() const;
Vector4 ToVector4(bool allowMissingCoords = false) const;
Variant ToVectorVariant() const;
String Trimmed() const;
const int8&  operator[](uint) const;
const int8& At(uint) const;

// Properties:
/* readonly */
bool empty;
/* readonly */
uint length;
/* readonly */
uint utf8Length;

// Constants:
static const String EMPTY;
static const uint MIN_CAPACITY;
static const uint NPOS;
};

class StringHash
{
public:
StringHash();
StringHash(const StringHash&in);
StringHash(uint);
StringHash(const String&in);
// Methods:
StringHash  operator+(const StringHash&) const;
StringHash&  operator+=(const StringHash&);
int  operator<(const StringHash&) const;
StringHash&  operator=(const StringHash&);
bool  operator==(const StringHash&) const;
String Reverse() const;
uint ToHash() const;
String ToString() const;
uint Value() const;

// Properties:
/* readonly */
uint value;

// Constants:
static const StringHash ZERO;
};

class StringHashRegister
{
public:
~StringHashRegister();
StringHashRegister(bool);
// Methods:
bool Contains(const StringHash&) const;
String GetStringCopy(const StringHash&) const;
const String& GetString(const StringHash&) const;
};

class Technique
{
public:
Technique();
// Methods:
bool BeginLoad(Deserializer&);
Technique Clone(const String& = String :: EMPTY) const;
Technique CloneWithDefines(const String&, const String&);
Pass CreatePass(const String&);
bool EndLoad();
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
uint GetNumPasses() const;
Pass GetPass(const String&) const;
Pass GetPass(uint) const;
Array<String> GetPassNames() const;
Array<Pass> GetPasses() const;
Object GetSubsystem(StringHash) const;
Pass GetSupportedPass(const String&) const;
Pass GetSupportedPass(uint) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasPass(const String&) const;
bool HasPass(uint) const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsDesktop() const;
bool IsInstanceOf(StringHash) const;
bool IsSupported() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ReleaseShaders();
void RemovePass(const String&);
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetIsDesktop(bool);
void SetMemoryUse(uint);
void SetName(const String&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
String category;
bool desktop;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
uint numPasses;
/* readonly */
Array<String> passNames;
/* readonly */
Array<Pass> passes;
/* readonly */
int refs;
/* readonly */
bool supported;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;

// Constants:
static const uint alphaPassIndex;
static const uint basePassIndex;
static const uint deferredPassIndex;
static const uint lightPassIndex;
static const uint litAlphaPassIndex;
static const uint litBasePassIndex;
static const uint materialPassIndex;
static const uint shadowPassIndex;
};

class TechniqueEntry
{
public:
~TechniqueEntry();
TechniqueEntry();
TechniqueEntry(Technique@, uint, float);
// Methods:
TechniqueEntry&  operator=(const TechniqueEntry&);

// Properties:
float lodDistance;
uint qualityLevel;
Technique technique;
};

class Terrain
{
public:
Terrain();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void ApplyHeightMap();
void CleanupConnection(Connection);
operator Component() const;
void CreatePatchGeometry(TerrainPatch);
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDrawDistance() const;
Terrain GetEastNeighbor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
float GetHeight(const Vector3&) const;
Image GetHeightMap() const;
ResourceRef GetHeightMapAttr() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
float GetLodBias() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
uint GetMaxLights() const;
uint GetMaxLodLevels() const;
TerrainPatch GetNeighborPatch(int, int) const;
Node GetNode() const;
Vector3 GetNormal(const Vector3&) const;
Terrain GetNorthNeighbor() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
uint GetOcclusionLodLevel() const;
TerrainPatch GetPatch(int, int) const;
TerrainPatch GetPatch(uint) const;
int GetPatchSize() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
bool GetSmoothing() const;
Terrain GetSouthNeighbor() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetViewMask() const;
Terrain GetWestNeighbor() const;
uint GetZoneMask() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
Vector3 HeightMapToWorld(const IntVector2&) const;
const IntVector2& GetNumPatches() const;
const IntVector2& GetNumVertices() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsVisible() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEastNeighbor(Terrain);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
bool SetHeightMap(Image);
void SetHeightMapAttr(const ResourceRef&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxLights(uint);
void SetMaxLodLevels(uint);
void SetMaxLodLevelsAttr(uint);
void SetNeighbors(Terrain, Terrain, Terrain, Terrain);
void SetNorthNeighbor(Terrain);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOcclusionLodLevel(uint);
void SetOcclusionLodLevelAttr(uint);
void SetPatchSize(int);
void SetPatchSizeAttr(int);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSmoothing(bool);
void SetSouthNeighbor(Terrain);
void SetSpacing(const Vector3&);
void SetTemporary(bool);
void SetViewMask(uint);
void SetWestNeighbor(Terrain);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdatePatchLod(TerrainPatch);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
const Vector3& GetSpacing() const;
int WeakRefs() const;
IntVector2 WorldToHeightMap(const Vector3&) const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool castShadows;
/* readonly */
String category;
float drawDistance;
Terrain eastNeighbor;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
Image heightMap;
/* readonly */
uint id;
uint lightMask;
float lodBias;
Material material;
uint maxLights;
uint maxLodLevels;
/* readonly */
Node node;
Terrain northNeighbor;
/* readonly */
uint numAttributes;
/* readonly */
IntVector2 numPatches;
/* readonly */
IntVector2 numVertices;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
uint occlusionLodLevel;
int patchSize;
/* readonly */
Array<TerrainPatch> patches;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool smoothing;
Terrain southNeighbor;
Vector3 spacing;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
Terrain westNeighbor;
uint zoneMask;
};

class TerrainPatch
{
public:
TerrainPatch();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
TerrainPatch GetEastPatch() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
Geometry GetGeometry() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
uint GetLodLevel() const;
uint GetMaxLights() const;
Geometry GetMaxLodGeometry() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
TerrainPatch GetNorthPatch() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Geometry GetOcclusionGeometry() const;
Terrain GetOwner() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
TerrainPatch GetSouthPatch() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
VertexBuffer GetVertexBuffer() const;
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
TerrainPatch GetWestPatch() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
const IntVector2& GetCoordinates() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetLod();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetBoundingBox(const BoundingBox&);
void SetCastShadows(bool);
void SetCoordinates(const IntVector2&);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetNeighbors(TerrainPatch, TerrainPatch, TerrainPatch, TerrainPatch);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOwner(Terrain);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class Text
{
public:
Text();
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void BringToFront();
void ClearSelection();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
const Color& GetEffectColor() const;
const Color& GetHoverColor() const;
const Color& GetSelectionColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetAutoLocalizable() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
Vector2 GetCharPosition(uint);
Vector2 GetCharSize(uint);
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
float GetEffectDepthBias() const;
bool GetEffectRoundStroke() const;
int GetEffectStrokeThickness() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
Font GetFont() const;
ResourceRef GetFontAttr() const;
float GetFontSize() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChars() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
uint GetNumRows() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
float GetRowHeight() const;
float GetRowSpacing() const;
float GetRowWidth(uint) const;
uint GetSelectionLength() const;
uint GetSelectionStart() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
HorizontalAlignment GetTextAlignment() const;
String GetTextAttr() const;
TextEffect GetTextEffect() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool GetWordwrap() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetClipBorder() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetEffectShadowOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAutoLocalizable(bool);
void SetBlockEvents(bool);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetEffectColor(const Color&);
void SetEffectDepthBias(float);
void SetEffectRoundStroke(bool);
void SetEffectShadowOffset(const IntVector2&);
void SetEffectStrokeThickness(int);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
bool SetFont(Font, float = DEFAULT_FONT_SIZE);
bool SetFont(const String&, float = DEFAULT_FONT_SIZE);
void SetFontAttr(const ResourceRef&);
bool SetFontSize(float);
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverColor(const Color&);
void SetHovering(bool);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetRowSpacing(float);
void SetSelected(bool);
void SetSelection(uint, uint = M_MAX_UNSIGNED);
void SetSelectionColor(const Color&);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetText(const String&);
void SetTextAlignment(HorizontalAlignment);
void SetTextAttr(const String&);
void SetTextEffect(TextEffect);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SetWordwrap(bool);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetText() const;
const String& GetTypeName() const;
operator UIElement() const;
operator UISelectable() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;
operator const UISelectable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool autoLocalizable;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
Array<Vector2> charPositions;
/* readonly */
Array<Vector2> charSizes;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
Color effectColor;
bool effectRoundStroke;
IntVector2 effectShadowOffset;
int effectStrokeThickness;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
/* readonly */
Font font;
float fontSize;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
Color hoverColor;
/* readonly */
bool hovering;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChars;
/* readonly */
uint numChildren;
/* readonly */
uint numRows;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
float rowHeight;
float rowSpacing;
/* readonly */
Array<float> rowWidths;
/* readonly */
IntVector2 screenPosition;
bool selected;
Color selectionColor;
/* readonly */
uint selectionLength;
/* readonly */
uint selectionStart;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
String text;
HorizontalAlignment textAlignment;
TextEffect textEffect;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
bool wordwrap;
};

class Text3D
{
public:
Text3D();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetEffectColor() const;
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Vector2 GetCharPosition(uint);
Vector2 GetCharSize(uint);
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
float GetEffectDepthBias() const;
bool GetEffectRoundStroke() const;
int GetEffectStrokeThickness() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FaceCameraMode GetFaceCameraMode() const;
Light GetFirstLight() const;
Font GetFont() const;
ResourceRef GetFontAttr() const;
float GetFontSize() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumChars() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
uint GetNumRows() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
int GetRowHeight() const;
float GetRowSpacing() const;
int GetRowWidth(uint) const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
HorizontalAlignment GetTextAlignment() const;
String GetTextAttr() const;
TextEffect GetTextEffect() const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
VerticalAlignment GetVerticalAlignment() const;
uint GetViewMask() const;
int GetWidth() const;
bool GetWordwrap() const;
Zone GetZone() const;
uint GetZoneMask() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
const IntVector2& GetEffectShadowOffset() const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsFixedScreenSize() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetCastShadows(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDrawDistance(float);
void SetEffectColor(const Color&);
void SetEffectDepthBias(float);
void SetEffectRoundStroke(bool);
void SetEffectShadowOffset(const IntVector2&);
void SetEffectStrokeThickness(int);
void SetEnabled(bool);
void SetFaceCameraMode(FaceCameraMode);
void SetFixedScreenSize(bool);
bool SetFont(Font, float = DEFAULT_FONT_SIZE);
bool SetFont(const String&, float = DEFAULT_FONT_SIZE);
void SetFontAttr(const ResourceRef&);
bool SetFontSize(float);
void SetGlobalVar(StringHash, const Variant&);
void SetHorizontalAlignment(HorizontalAlignment);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOpacity(float);
void SetRowSpacing(float);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetText(const String&);
void SetTextAlignment(HorizontalAlignment);
void SetTextAttr(const String&);
void SetTextEffect(TextEffect);
void SetVerticalAlignment(VerticalAlignment);
void SetViewMask(uint);
void SetWidth(int);
void SetWordwrap(bool);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
const String& GetCategory() const;
const String& GetText() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
/* readonly */
Array<Vector2> charPositions;
/* readonly */
Array<Vector2> charSizes;
/* writeonly */
Color color;
Array<Color> colors;
float drawDistance;
Color effectColor;
float effectDepthBias;
bool effectRoundStroke;
IntVector2 effectShadowOffset;
int effectStrokeThickness;
bool enabled;
/* readonly */
bool enabledEffective;
FaceCameraMode faceCameraMode;
bool fixedScreenSize;
/* readonly */
Font font;
float fontSize;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int height;
HorizontalAlignment horizontalAlignment;
/* readonly */
uint id;
/* readonly */
bool inView;
uint lightMask;
float lodBias;
Material material;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
uint numChars;
/* readonly */
uint numRows;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
float opacity;
/* readonly */
int refs;
/* readonly */
bool replicated;
/* readonly */
int rowHeight;
float rowSpacing;
/* readonly */
Array<int> rowWidths;
float shadowDistance;
uint shadowMask;
bool temporary;
String text;
HorizontalAlignment textAlignment;
TextEffect textEffect;
/* readonly */
StringHash type;
/* readonly */
String typeName;
VerticalAlignment verticalAlignment;
uint viewMask;
/* readonly */
int weakRefs;
int width;
bool wordwrap;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
};

class Texture
{
public:
Texture();
// Methods:
void AddMetadata(const String&, const Variant&);
bool BeginLoad(Deserializer&);
void ClearDataLost();
const Color& GetBorderColor() const;
bool EndLoad();
TextureAddressMode GetAddressMode(TextureCoordinate) const;
uint GetAnisotropy() const;
AsyncLoadState GetAsyncLoadState() const;
bool GetAutoResolve() const;
Texture GetBackupTexture() const;
bool GetBlockEvents() const;
uint GetComponents() const;
uint GetDataSize(int, int) const;
uint GetDataSize(int, int, int) const;
int GetDepth() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
TextureFilterMode GetFilterMode() const;
uint GetFormat() const;
uint GetGPUObjectName() const;
Graphics GetGraphics() const;
int GetHeight() const;
int GetLevelDepth(uint) const;
int GetLevelHeight(uint) const;
int GetLevelWidth(uint) const;
uint GetLevels() const;
bool GetLevelsDirty() const;
uint GetMemoryUse() const;
int GetMipsToSkip(uint) const;
int GetMultiSample() const;
StringHash GetNameHash() const;
bool GetParametersDirty() const;
uint GetRowDataSize(int) const;
bool GetSRGB() const;
bool GetShadowCompare() const;
Object GetSubsystem(StringHash) const;
uint GetTarget() const;
StringHash GetType() const;
TextureUsage GetUsage() const;
uint GetUseTimer();
int GetWidth() const;
bool HasEventHandlers() const;
bool HasMetadata() const;
bool HasPendingData() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsCompressed() const;
bool IsDataLost() const;
bool IsInstanceOf(StringHash) const;
bool IsResolveDirty() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnDeviceLost();
void OnDeviceReset();
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RegenerateLevels();
void Release();
void RemoveAllMetadata();
void RemoveMetadata(const String&);
void ResetUseTimer();
operator Resource() const;
operator ResourceWithMetadata() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAddressMode(TextureCoordinate, TextureAddressMode);
void SetAnisotropy(uint);
void SetAsyncLoadState(AsyncLoadState);
void SetBackupTexture(Texture);
void SetBlockEvents(bool);
void SetBorderColor(const Color&);
void SetFilterMode(TextureFilterMode);
void SetGlobalVar(StringHash, const Variant&);
void SetLevelsDirty();
void SetMemoryUse(uint);
void SetMipsToSkip(uint, int);
void SetName(const String&);
void SetNumLevels(uint);
void SetParameters(XMLFile);
void SetParameters(const XMLElement&);
void SetParametersDirty();
void SetResolveDirty(bool);
void SetSRGB(bool);
void SetShadowCompare(bool);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator Texture2D() const;
operator Texture2DArray() const;
operator Texture3D() const;
operator TextureCube() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdateParameters();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetMetadata(const String&) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;
operator const ResourceWithMetadata() const;
operator const Texture2D() const;
operator const Texture2DArray() const;
operator const Texture3D() const;
operator const TextureCube() const;

// Properties:
Array<TextureAddressMode> addressMode;
uint anisotropy;
/* readonly */
bool autoResolve;
Texture backupTexture;
Color borderColor;
/* readonly */
String category;
/* readonly */
uint components;
/* readonly */
bool compressed;
/* readonly */
bool dataLost;
TextureFilterMode filterMode;
/* readonly */
uint format;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hasMetadata;
/* readonly */
int height;
/* readonly */
Array<int> levelHeight;
/* readonly */
Array<int> levelWidth;
/* readonly */
uint levels;
/* readonly */
bool levelsDirty;
/* readonly */
uint memoryUse;
Array<Variant> metadata;
Array<int> mipsToSkip;
/* readonly */
int multiSample;
String name;
/* readonly */
int refs;
/* readonly */
bool resolveDirty;
bool sRGB;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
TextureUsage usage;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
/* readonly */
int width;
};

class Texture2D
{
public:
Texture2D();
// Methods:
void AddMetadata(const String&, const Variant&);
bool BeginLoad(Deserializer&);
void ClearDataLost();
const Color& GetBorderColor() const;
bool EndLoad();
TextureAddressMode GetAddressMode(TextureCoordinate) const;
uint GetAnisotropy() const;
AsyncLoadState GetAsyncLoadState() const;
bool GetAutoResolve() const;
Texture GetBackupTexture() const;
bool GetBlockEvents() const;
uint GetComponents() const;
uint GetDataSize(int, int) const;
uint GetDataSize(int, int, int) const;
int GetDepth() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
TextureFilterMode GetFilterMode() const;
uint GetFormat() const;
uint GetGPUObjectName() const;
Graphics GetGraphics() const;
int GetHeight() const;
Image GetImage() const;
bool GetImage(Image&) const;
int GetLevelDepth(uint) const;
int GetLevelHeight(uint) const;
int GetLevelWidth(uint) const;
uint GetLevels() const;
bool GetLevelsDirty() const;
uint GetMemoryUse() const;
int GetMipsToSkip(uint) const;
int GetMultiSample() const;
StringHash GetNameHash() const;
bool GetParametersDirty() const;
RenderSurface GetRenderSurface() const;
uint GetRowDataSize(int) const;
bool GetSRGB() const;
bool GetShadowCompare() const;
Object GetSubsystem(StringHash) const;
uint GetTarget() const;
StringHash GetType() const;
TextureUsage GetUsage() const;
uint GetUseTimer();
int GetWidth() const;
bool HasEventHandlers() const;
bool HasMetadata() const;
bool HasPendingData() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsCompressed() const;
bool IsDataLost() const;
bool IsInstanceOf(StringHash) const;
bool IsResolveDirty() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnDeviceLost();
void OnDeviceReset();
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RegenerateLevels();
void Release();
void RemoveAllMetadata();
void RemoveMetadata(const String&);
void ResetUseTimer();
operator Resource() const;
operator ResourceWithMetadata() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAddressMode(TextureCoordinate, TextureAddressMode);
void SetAnisotropy(uint);
void SetAsyncLoadState(AsyncLoadState);
void SetBackupTexture(Texture);
void SetBlockEvents(bool);
void SetBorderColor(const Color&);
bool SetData(Image, bool = false);
void SetFilterMode(TextureFilterMode);
void SetGlobalVar(StringHash, const Variant&);
void SetLevelsDirty();
void SetMemoryUse(uint);
void SetMipsToSkip(uint, int);
void SetName(const String&);
void SetNumLevels(uint);
void SetParameters(XMLFile);
void SetParameters(const XMLElement&);
void SetParametersDirty();
void SetResolveDirty(bool);
void SetSRGB(bool);
void SetShadowCompare(bool);
bool SetSize(int, int, uint, TextureUsage = TEXTURE_STATIC, int = 1, bool = true);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator Texture() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdateParameters();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetMetadata(const String&) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;
operator const ResourceWithMetadata() const;
operator const Texture() const;

// Properties:
Array<TextureAddressMode> addressMode;
uint anisotropy;
/* readonly */
bool autoResolve;
Texture backupTexture;
Color borderColor;
/* readonly */
String category;
/* readonly */
uint components;
/* readonly */
bool compressed;
/* readonly */
bool dataLost;
TextureFilterMode filterMode;
/* readonly */
uint format;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hasMetadata;
/* readonly */
int height;
/* readonly */
Array<int> levelHeight;
/* readonly */
Array<int> levelWidth;
/* readonly */
uint levels;
/* readonly */
bool levelsDirty;
/* readonly */
uint memoryUse;
Array<Variant> metadata;
Array<int> mipsToSkip;
/* readonly */
int multiSample;
String name;
/* readonly */
int refs;
/* readonly */
RenderSurface renderSurface;
/* readonly */
bool resolveDirty;
bool sRGB;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
TextureUsage usage;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
/* readonly */
int width;
};

class Texture2DArray
{
public:
Texture2DArray();
// Methods:
void AddMetadata(const String&, const Variant&);
bool BeginLoad(Deserializer&);
void ClearDataLost();
const Color& GetBorderColor() const;
bool EndLoad();
TextureAddressMode GetAddressMode(TextureCoordinate) const;
uint GetAnisotropy() const;
AsyncLoadState GetAsyncLoadState() const;
bool GetAutoResolve() const;
Texture GetBackupTexture() const;
bool GetBlockEvents() const;
uint GetComponents() const;
uint GetDataSize(int, int) const;
uint GetDataSize(int, int, int) const;
int GetDepth() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
TextureFilterMode GetFilterMode() const;
uint GetFormat() const;
uint GetGPUObjectName() const;
Graphics GetGraphics() const;
int GetHeight() const;
uint GetLayers() const;
int GetLevelDepth(uint) const;
int GetLevelHeight(uint) const;
int GetLevelWidth(uint) const;
uint GetLevels() const;
bool GetLevelsDirty() const;
uint GetMemoryUse() const;
int GetMipsToSkip(uint) const;
int GetMultiSample() const;
StringHash GetNameHash() const;
bool GetParametersDirty() const;
RenderSurface GetRenderSurface() const;
uint GetRowDataSize(int) const;
bool GetSRGB() const;
bool GetShadowCompare() const;
Object GetSubsystem(StringHash) const;
uint GetTarget() const;
StringHash GetType() const;
TextureUsage GetUsage() const;
uint GetUseTimer();
int GetWidth() const;
bool HasEventHandlers() const;
bool HasMetadata() const;
bool HasPendingData() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsCompressed() const;
bool IsDataLost() const;
bool IsInstanceOf(StringHash) const;
bool IsResolveDirty() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnDeviceLost();
void OnDeviceReset();
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RegenerateLevels();
void Release();
void RemoveAllMetadata();
void RemoveMetadata(const String&);
void ResetUseTimer();
operator Resource() const;
operator ResourceWithMetadata() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAddressMode(TextureCoordinate, TextureAddressMode);
void SetAnisotropy(uint);
void SetAsyncLoadState(AsyncLoadState);
void SetBackupTexture(Texture);
void SetBlockEvents(bool);
void SetBorderColor(const Color&);
bool SetData(uint, Deserializer&);
bool SetData(uint, Image, bool = false);
void SetFilterMode(TextureFilterMode);
void SetGlobalVar(StringHash, const Variant&);
void SetLayers(uint);
void SetLevelsDirty();
void SetMemoryUse(uint);
void SetMipsToSkip(uint, int);
void SetName(const String&);
void SetNumLevels(uint);
void SetParameters(XMLFile);
void SetParameters(const XMLElement&);
void SetParametersDirty();
void SetResolveDirty(bool);
void SetSRGB(bool);
void SetShadowCompare(bool);
bool SetSize(uint, int, int, uint, TextureUsage = TEXTURE_STATIC);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator Texture() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdateParameters();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetMetadata(const String&) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;
operator const ResourceWithMetadata() const;
operator const Texture() const;

// Properties:
Array<TextureAddressMode> addressMode;
uint anisotropy;
/* readonly */
bool autoResolve;
Texture backupTexture;
Color borderColor;
/* readonly */
String category;
/* readonly */
uint components;
/* readonly */
bool compressed;
/* readonly */
bool dataLost;
TextureFilterMode filterMode;
/* readonly */
uint format;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hasMetadata;
/* readonly */
int height;
uint layers;
/* readonly */
Array<int> levelHeight;
/* readonly */
Array<int> levelWidth;
/* readonly */
uint levels;
/* readonly */
bool levelsDirty;
/* readonly */
uint memoryUse;
Array<Variant> metadata;
Array<int> mipsToSkip;
/* readonly */
int multiSample;
String name;
/* readonly */
int refs;
/* readonly */
RenderSurface renderSurface;
/* readonly */
bool resolveDirty;
bool sRGB;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
TextureUsage usage;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
/* readonly */
int width;
};

class Texture3D
{
public:
Texture3D();
// Methods:
void AddMetadata(const String&, const Variant&);
bool BeginLoad(Deserializer&);
void ClearDataLost();
const Color& GetBorderColor() const;
bool EndLoad();
TextureAddressMode GetAddressMode(TextureCoordinate) const;
uint GetAnisotropy() const;
AsyncLoadState GetAsyncLoadState() const;
bool GetAutoResolve() const;
Texture GetBackupTexture() const;
bool GetBlockEvents() const;
uint GetComponents() const;
uint GetDataSize(int, int) const;
uint GetDataSize(int, int, int) const;
int GetDepth() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
TextureFilterMode GetFilterMode() const;
uint GetFormat() const;
uint GetGPUObjectName() const;
Graphics GetGraphics() const;
int GetHeight() const;
int GetLevelDepth(uint) const;
int GetLevelHeight(uint) const;
int GetLevelWidth(uint) const;
uint GetLevels() const;
bool GetLevelsDirty() const;
uint GetMemoryUse() const;
int GetMipsToSkip(uint) const;
int GetMultiSample() const;
StringHash GetNameHash() const;
bool GetParametersDirty() const;
uint GetRowDataSize(int) const;
bool GetSRGB() const;
bool GetShadowCompare() const;
Object GetSubsystem(StringHash) const;
uint GetTarget() const;
StringHash GetType() const;
TextureUsage GetUsage() const;
uint GetUseTimer();
int GetWidth() const;
bool HasEventHandlers() const;
bool HasMetadata() const;
bool HasPendingData() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsCompressed() const;
bool IsDataLost() const;
bool IsInstanceOf(StringHash) const;
bool IsResolveDirty() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnDeviceLost();
void OnDeviceReset();
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RegenerateLevels();
void Release();
void RemoveAllMetadata();
void RemoveMetadata(const String&);
void ResetUseTimer();
operator Resource() const;
operator ResourceWithMetadata() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAddressMode(TextureCoordinate, TextureAddressMode);
void SetAnisotropy(uint);
void SetAsyncLoadState(AsyncLoadState);
void SetBackupTexture(Texture);
void SetBlockEvents(bool);
void SetBorderColor(const Color&);
bool SetData(Image, bool = false);
void SetFilterMode(TextureFilterMode);
void SetGlobalVar(StringHash, const Variant&);
void SetLevelsDirty();
void SetMemoryUse(uint);
void SetMipsToSkip(uint, int);
void SetName(const String&);
void SetNumLevels(uint);
void SetParameters(XMLFile);
void SetParameters(const XMLElement&);
void SetParametersDirty();
void SetResolveDirty(bool);
void SetSRGB(bool);
void SetShadowCompare(bool);
bool SetSize(int, int, int, uint, TextureUsage = TEXTURE_STATIC);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator Texture() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdateParameters();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetMetadata(const String&) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;
operator const ResourceWithMetadata() const;
operator const Texture() const;

// Properties:
Array<TextureAddressMode> addressMode;
uint anisotropy;
/* readonly */
bool autoResolve;
Texture backupTexture;
Color borderColor;
/* readonly */
String category;
/* readonly */
uint components;
/* readonly */
bool compressed;
/* readonly */
bool dataLost;
TextureFilterMode filterMode;
/* readonly */
uint format;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hasMetadata;
/* readonly */
int height;
/* readonly */
Array<int> levelHeight;
/* readonly */
Array<int> levelWidth;
/* readonly */
uint levels;
/* readonly */
bool levelsDirty;
/* readonly */
uint memoryUse;
Array<Variant> metadata;
Array<int> mipsToSkip;
/* readonly */
int multiSample;
String name;
/* readonly */
int refs;
/* readonly */
bool resolveDirty;
bool sRGB;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
TextureUsage usage;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
/* readonly */
int width;
};

class TextureCube
{
public:
TextureCube();
// Methods:
void AddMetadata(const String&, const Variant&);
bool BeginLoad(Deserializer&);
void ClearDataLost();
const Color& GetBorderColor() const;
bool EndLoad();
TextureAddressMode GetAddressMode(TextureCoordinate) const;
uint GetAnisotropy() const;
AsyncLoadState GetAsyncLoadState() const;
bool GetAutoResolve() const;
Texture GetBackupTexture() const;
bool GetBlockEvents() const;
uint GetComponents() const;
uint GetDataSize(int, int) const;
uint GetDataSize(int, int, int) const;
int GetDepth() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
TextureFilterMode GetFilterMode() const;
uint GetFormat() const;
uint GetGPUObjectName() const;
Graphics GetGraphics() const;
int GetHeight() const;
Image GetImage(CubeMapFace) const;
int GetLevelDepth(uint) const;
int GetLevelHeight(uint) const;
int GetLevelWidth(uint) const;
uint GetLevels() const;
bool GetLevelsDirty() const;
uint GetMemoryUse() const;
int GetMipsToSkip(uint) const;
int GetMultiSample() const;
StringHash GetNameHash() const;
bool GetParametersDirty() const;
RenderSurface GetRenderSurface(CubeMapFace) const;
uint GetRowDataSize(int) const;
bool GetSRGB() const;
bool GetShadowCompare() const;
Object GetSubsystem(StringHash) const;
uint GetTarget() const;
StringHash GetType() const;
TextureUsage GetUsage() const;
uint GetUseTimer();
int GetWidth() const;
bool HasEventHandlers() const;
bool HasMetadata() const;
bool HasPendingData() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsCompressed() const;
bool IsDataLost() const;
bool IsInstanceOf(StringHash) const;
bool IsResolveDirty() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnDeviceLost();
void OnDeviceReset();
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void RegenerateLevels();
void Release();
void RemoveAllMetadata();
void RemoveMetadata(const String&);
void ResetUseTimer();
operator Resource() const;
operator ResourceWithMetadata() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAddressMode(TextureCoordinate, TextureAddressMode);
void SetAnisotropy(uint);
void SetAsyncLoadState(AsyncLoadState);
void SetBackupTexture(Texture);
void SetBlockEvents(bool);
void SetBorderColor(const Color&);
bool SetData(CubeMapFace, Deserializer&);
bool SetData(CubeMapFace, Image, bool = false);
void SetFilterMode(TextureFilterMode);
void SetGlobalVar(StringHash, const Variant&);
void SetLevelsDirty();
void SetMemoryUse(uint);
void SetMipsToSkip(uint, int);
void SetName(const String&);
void SetNumLevels(uint);
void SetParameters(XMLFile);
void SetParameters(const XMLElement&);
void SetParametersDirty();
void SetResolveDirty(bool);
void SetSRGB(bool);
void SetShadowCompare(bool);
bool SetSize(int, uint, TextureUsage = TEXTURE_STATIC, int = 1);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator Texture() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void UpdateParameters();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetMetadata(const String&) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;
operator const ResourceWithMetadata() const;
operator const Texture() const;

// Properties:
Array<TextureAddressMode> addressMode;
uint anisotropy;
/* readonly */
bool autoResolve;
Texture backupTexture;
Color borderColor;
/* readonly */
String category;
/* readonly */
uint components;
/* readonly */
bool compressed;
/* readonly */
bool dataLost;
TextureFilterMode filterMode;
/* readonly */
uint format;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
bool hasMetadata;
/* readonly */
int height;
/* readonly */
Array<int> levelHeight;
/* readonly */
Array<int> levelWidth;
/* readonly */
uint levels;
/* readonly */
bool levelsDirty;
/* readonly */
uint memoryUse;
Array<Variant> metadata;
Array<int> mipsToSkip;
/* readonly */
int multiSample;
String name;
/* readonly */
int refs;
/* readonly */
Array<RenderSurface> renderSurfaces;
/* readonly */
bool resolveDirty;
bool sRGB;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
TextureUsage usage;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
/* readonly */
int width;
};

class TextureFrame
{
public:
// Methods:
TextureFrame&  operator=(const TextureFrame&);

// Properties:
float time;
Rect uv;
};

class Tile2D
{
public:
Tile2D();
// Methods:
bool GetFlipX() const;
bool GetFlipY() const;
uint GetGid() const;
Sprite2D GetSprite() const;
bool GetSwapXY() const;
bool HasProperty(const String&) const;
operator RefCounted() const;
int Refs() const;
const String& GetProperty(const String&) const;
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
bool flipX;
/* readonly */
bool flipY;
/* readonly */
uint gid;
/* readonly */
int refs;
/* readonly */
Sprite2D sprite;
/* readonly */
bool swapXY;
/* readonly */
int weakRefs;
};

class TileMap2D
{
public:
TileMap2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry();
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
TileMapLayer2D GetLayer(uint) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumLayers() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
Array<TileMapObject2D> GetTileCollisionShapes(uint) const;
TmxFile2D GetTmxFile() const;
ResourceRef GetTmxFileAttr() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
bool PositionToTileIndex(int&, int&, const Vector2&) const;
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
void SetTmxFile(TmxFile2D);
void SetTmxFileAttr(const ResourceRef&);
const String& GetCategory() const;
const String& GetTypeName() const;
Vector2 TileIndexToPosition(int, int) const;
const TileMapInfo2D& GetInfo() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
TileMapInfo2D info;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
uint numLayers;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
TmxFile2D tmxFile;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class TileMapInfo2D
{
public:
// Methods:
TileMapInfo2D&  operator=(const TileMapInfo2D&);
Vector2 ConvertPosition(const Vector2&) const;
float GetMapHeight() const;
float GetMapWidth() const;
bool PositionToTileIndex(int&, int&, const Vector2&) const;
Vector2 TileIndexToPosition(int, int) const;

// Properties:
int height;
/* readonly */
float mapHeight;
/* readonly */
float mapWidth;
Orientation2D orientation;
float tileHeight;
float tileWidth;
int width;
};

class TileMapLayer2D
{
public:
TileMapLayer2D();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
int GetDrawOrder() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
int GetHeight() const;
uint GetID() const;
Node GetImageNode() const;
bool GetInterceptNetworkUpdate(const String&) const;
TileMapLayerType2D GetLayerType() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumObjects() const;
TileMapObject2D GetObject(uint) const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Node GetObjectNode(uint) const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
Tile2D GetTile(int, int) const;
TileMap2D GetTileMap() const;
Node GetTileNode(int, int) const;
TmxLayer2D GetTmxLayer() const;
StringHash GetType() const;
int GetWidth() const;
bool HasEventHandlers() const;
bool HasProperty(const String&) const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
void Initialize(TileMap2D, TmxLayer2D);
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsVisible() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetDrawOrder(int);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
void SetVisible(bool);
const String& GetCategory() const;
const String& GetProperty(const String&) const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
int drawOrder;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int height;
/* readonly */
uint id;
/* readonly */
Node imageNode;
/* readonly */
TileMapLayerType2D layerType;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
/* readonly */
uint numObjects;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool visible;
/* readonly */
int weakRefs;
/* readonly */
int width;
};

class TileMapObject2D
{
public:
TileMapObject2D();
// Methods:
uint GetNumPoints() const;
TileMapObjectType2D GetObjectType() const;
bool GetTileFlipX() const;
bool GetTileFlipY() const;
uint GetTileGid() const;
Sprite2D GetTileSprite() const;
bool GetTileSwapXY() const;
bool HasProperty(const String&) const;
operator RefCounted() const;
int Refs() const;
const String& GetName() const;
const String& GetProperty(const String&) const;
const String& GetType() const;
const Vector2& GetPoint(uint) const;
const Vector2& GetPosition() const;
const Vector2& GetSize() const;
int WeakRefs() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String name;
/* readonly */
uint numPoints;
/* readonly */
TileMapObjectType2D objectType;
/* readonly */
Vector2 position;
/* readonly */
int refs;
/* readonly */
Vector2 size;
/* readonly */
bool tileFlipX;
/* readonly */
bool tileFlipY;
/* readonly */
uint tileGid;
/* readonly */
Sprite2D tileSprite;
/* readonly */
bool tileSwapXY;
/* readonly */
String type;
/* readonly */
int weakRefs;
};

class Time
{
public:
Time();
// Methods:
void BeginFrame(float);
void EndFrame();
bool GetBlockEvents() const;
float GetElapsedTime();
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetFrameNumber() const;
float GetFramesPerSecond() const;
Object GetSubsystem(StringHash) const;
float GetTimeStep() const;
uint GetTimerPeriod() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetTimerPeriod(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
/* readonly */
float elapsedTime;
/* readonly */
uint frameNumber;
/* readonly */
float framesPerSecond;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
uint systemTime;
/* readonly */
uint timeSinceEpoch;
/* readonly */
String timeStamp;
/* readonly */
float timeStep;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class Timer
{
public:
Timer();
// Methods:
Timer&  operator=(const Timer&);
uint GetMSec(bool);
void Reset();
};

class TmxFile2D
{
public:
TmxFile2D();
// Methods:
void AddLayer(uint, TmxLayer2D);
bool BeginLoad(Deserializer&);
bool EndLoad();
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
TmxLayer2D GetLayer(uint) const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
uint GetNumLayers() const;
float GetSpriteTextureEdgeOffset() const;
Object GetSubsystem(StringHash) const;
Array<TileMapObject2D> GetTileCollisionShapes(uint) const;
PropertySet2D GetTilePropertySet(uint) const;
Sprite2D GetTileSprite(uint) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
bool SetInfo(Orientation2D, int, int, float, float);
void SetMemoryUse(uint);
void SetName(const String&);
void SetSpriteTextureEdgeOffset(float);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
const TileMapInfo2D& GetInfo() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
String category;
float edgeOffset;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class TmxImageLayer2D
{
public:
TmxImageLayer2D(TmxFile2D&);
// Methods:
int GetHeight() const;
Sprite2D GetSprite() const;
TmxFile2D GetTmxFile() const;
TileMapLayerType2D GetType() const;
int GetWidth() const;
bool HasProperty(const String&) const;
bool IsVisible() const;
bool Load(const XMLElement&, const TileMapInfo2D&);
operator RefCounted() const;
int Refs() const;
const String& GetName() const;
const String& GetProperty(const String&) const;
const String& GetSource() const;
operator TmxLayer2D() const;
const Vector2& GetPosition() const;
int WeakRefs() const;
operator const RefCounted() const;
operator const TmxLayer2D() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class TmxLayer2D
{
public:
TmxLayer2D(TmxFile2D&, TileMapLayerType2D);
// Methods:
int GetHeight() const;
TmxFile2D GetTmxFile() const;
TileMapLayerType2D GetType() const;
int GetWidth() const;
bool HasProperty(const String&) const;
bool IsVisible() const;
operator RefCounted() const;
int Refs() const;
const String& GetName() const;
const String& GetProperty(const String&) const;
operator TmxImageLayer2D() const;
operator TmxObjectGroup2D() const;
operator TmxTileLayer2D() const;
int WeakRefs() const;
operator const RefCounted() const;
operator const TmxImageLayer2D() const;
operator const TmxObjectGroup2D() const;
operator const TmxTileLayer2D() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class TmxObjectGroup2D
{
public:
TmxObjectGroup2D(TmxFile2D&);
// Methods:
int GetHeight() const;
uint GetNumObjects() const;
TileMapObject2D GetObject(uint) const;
TmxFile2D GetTmxFile() const;
TileMapLayerType2D GetType() const;
int GetWidth() const;
bool HasProperty(const String&) const;
bool IsVisible() const;
bool Load(const XMLElement&, const TileMapInfo2D&);
operator RefCounted() const;
int Refs() const;
const String& GetName() const;
const String& GetProperty(const String&) const;
operator TmxLayer2D() const;
int WeakRefs() const;
operator const RefCounted() const;
operator const TmxLayer2D() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class TmxTileLayer2D
{
public:
TmxTileLayer2D(TmxFile2D&);
// Methods:
int GetHeight() const;
Tile2D GetTile(int, int) const;
TmxFile2D GetTmxFile() const;
TileMapLayerType2D GetType() const;
int GetWidth() const;
bool HasProperty(const String&) const;
bool IsVisible() const;
bool Load(const XMLElement&, const TileMapInfo2D&);
operator RefCounted() const;
int Refs() const;
const String& GetName() const;
const String& GetProperty(const String&) const;
operator TmxLayer2D() const;
int WeakRefs() const;
operator const RefCounted() const;
operator const TmxLayer2D() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class ToolTip
{
public:
ToolTip();
// Methods:
void AddAltTarget(UIElement);
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void BringToFront();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDelay() const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetClipBorder() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void Reset();
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDelay(float);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHovering(bool);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
float delay;
/* readonly */
float derivedOpacity;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
/* readonly */
bool hovering;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class TouchState
{
public:
// Methods:
TouchState&  operator=(const TouchState&);
UIElement GetTouchedElement();

// Properties:
IntVector2 delta;
IntVector2 lastPosition;
IntVector2 position;
float pressure;
int touchID;
/* readonly */
UIElement touchedElement;
};

class TrailPoint
{
public:
~TrailPoint();
TrailPoint();
TrailPoint(const Vector3&in, const Vector3&in);
// Methods:
TrailPoint&  operator=(const TrailPoint&);

// Properties:
float elapsedLength;
Vector3 forward;
float lifetime;
Vector3 parentPos;
Vector3 position;
float sortDistance;
};

class TriangleMeshData
{
public:
TriangleMeshData(Model&, uint);
TriangleMeshData(CustomGeometry&);
// Methods:
operator CollisionGeometryData() const;
operator RefCounted() const;
int Refs() const;
int WeakRefs() const;
operator const CollisionGeometryData() const;
operator const RefCounted() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class UI
{
public:
UI();
// Methods:
void Clear();
IntVector2 ConvertSystemToUI(const IntVector2&) const;
IntVector2 ConvertUIToSystem(const IntVector2&) const;
void DebugDraw(UIElement);
bool GetBlockEvents() const;
Cursor GetCursor() const;
IntVector2 GetCursorPosition() const;
float GetDefaultToolTipDelay() const;
float GetDoubleClickInterval() const;
int GetDragBeginDistance() const;
float GetDragBeginInterval() const;
UIElement GetDragElement(uint);
UIElement GetElementAt(UIElement, const IntVector2&, bool = true);
UIElement GetElementAt(const IntVector2&, bool = true);
UIElement GetElementAt(int, int, bool = true);
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
UIElement GetFocusElement() const;
FontHintLevel GetFontHintLevel() const;
int GetFontOversampling() const;
float GetFontSubpixelThreshold() const;
bool GetForceAutoHint() const;
UIElement GetFrontElement() const;
float GetMaxDoubleClickDistance() const;
int GetMaxFontTextureSize() const;
uint GetNumDragElements() const;
UIElement GetRoot() const;
UIElement GetRootModalElement() const;
float GetScale() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool GetUseMutableGlyphs() const;
bool GetUseScreenKeyboard() const;
bool GetUseSystemClipboard() const;
bool HasEventHandlers() const;
bool HasModalElement() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
const IntVector2& GetCustomSize() const;
bool IsDragging() const;
bool IsInstanceOf(StringHash) const;
bool IsNonFocusedMouseWheel() const;
UIElement LoadLayout(Deserializer&, XMLFile = null);
UIElement LoadLayout(File);
UIElement LoadLayout(File, XMLFile);
UIElement LoadLayout(VectorBuffer&);
UIElement LoadLayout(VectorBuffer&, XMLFile);
UIElement LoadLayout(XMLFile, XMLFile = null);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void Render(bool = false);
void RenderUpdate();
bool SaveLayout(File, UIElement);
bool SaveLayout(Serializer&, UIElement);
bool SaveLayout(VectorBuffer&, UIElement);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetClipboardText(const String&);
void SetCursor(Cursor);
void SetCustomSize(const IntVector2&);
void SetCustomSize(int, int);
void SetDefaultToolTipDelay(float);
void SetDoubleClickInterval(float);
void SetDragBeginDistance(int);
void SetDragBeginInterval(float);
void SetElementRenderTexture(UIElement, Texture2D);
void SetFocusElement(UIElement, bool = false);
void SetFontHintLevel(FontHintLevel);
void SetFontOversampling(int);
void SetFontSubpixelThreshold(float);
void SetForceAutoHint(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(float);
void SetMaxDoubleClickDistance(float);
void SetMaxFontTextureSize(int);
bool SetModalElement(UIElement, bool);
void SetNonFocusedMouseWheel(bool);
void SetScale(float);
void SetUseMutableGlyphs(bool);
void SetUseScreenKeyboard(bool);
void SetUseSystemClipboard(bool);
void SetWidth(float);
const String& GetCategory() const;
const String& GetClipboardText() const;
const String& GetTypeName() const;
const Array<UIElement> GetDragElements();
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
String clipboardText;
Cursor cursor;
/* readonly */
IntVector2 cursorPosition;
IntVector2 customSize;
float defaultToolTipDelay;
float doubleClickInterval;
int dragBeginDistance;
float dragBeginInterval;
UIElement focusElement;
FontHintLevel fontHintLevel;
int fontOversampling;
float fontSubpixelThreshold;
bool forceAutoHint;
/* readonly */
UIElement frontElement;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
float maxDoubleClickDistance;
int maxFontTextureSize;
/* readonly */
UIElement modalRoot;
bool nonFocusedMouseWheel;
/* readonly */
int refs;
/* readonly */
UIElement root;
float scale;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useMutableGlyphs;
bool useScreenKeyboard;
bool useSystemClipboard;
/* readonly */
int weakRefs;
};

class UIBatch
{
public:
~UIBatch();
UIBatch();
// Methods:
UIBatch&  operator=(const UIBatch&);
void AddQuad(const Matrix3x4&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&);
void AddQuad(const Matrix3x4&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const IntVector2&, const Color&, const Color&, const Color&, const Color&);
void AddQuad(const Matrix3x4&, int, int, int, int, int, int, int = 0, int = 0);
void AddQuad(float, float, float, float, int, int, int = 0, int = 0);
void AddQuad(int, int, int, int, int, int, int, int, bool);
uint GetInterpolatedColor(float, float);
bool Merge(const UIBatch&);
void SetColor(const Color&, bool = false);
void SetDefaultColor();

// Properties:
BlendMode blendMode;
uint color;
Vector2 invTextureSize;
IntRect scissor;
bool useGradient;
uint vertexEnd;
uint vertexStart;

// Constants:
static const Vector3 posAdjust;
};

class UIComponent
{
public:
UIComponent();
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Material GetMaterial() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
UIElement GetRoot() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
Texture2D GetTexture() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
void SetViewportIndex(uint);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Material material;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
/* readonly */
UIElement root;
bool temporary;
/* readonly */
Texture2D texture;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class UIElement
{
public:
UIElement();
UIElement(const String&in);
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
operator Button() const;
operator CheckBox() const;
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
operator Cursor() const;
void DisableLayoutUpdate();
operator DropDownList() const;
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetClipBorder() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
operator LineEdit() const;
operator ListView() const;
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Menu() const;
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
operator ProgressBar() const;
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
operator ScrollBar() const;
operator ScrollView() const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHovering(bool);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
operator Slider() const;
void SortChildren();
operator Sprite() const;
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator Text() const;
operator ToolTip() const;
operator UISelectable() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
operator View3D() const;
int WeakRefs() const;
operator Window() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Button() const;
operator const CheckBox() const;
operator const Cursor() const;
operator const DropDownList() const;
operator const LineEdit() const;
operator const ListView() const;
operator const Menu() const;
operator const Object() const;
operator const ProgressBar() const;
operator const RefCounted() const;
operator const ScrollBar() const;
operator const ScrollView() const;
operator const Serializable() const;
operator const Slider() const;
operator const Sprite() const;
operator const Text() const;
operator const ToolTip() const;
operator const UISelectable() const;
operator const View3D() const;
operator const Window() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
/* readonly */
bool hovering;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class UISelectable
{
public:
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void BringToFront();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
const Color& GetHoverColor() const;
const Color& GetSelectionColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetClipBorder() const;
const IntRect& GetLayoutBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverColor(const Color&);
void SetHovering(bool);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetSelected(bool);
void SetSelectionColor(const Color&);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator Text() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const Text() const;
operator const UIElement() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
Color hoverColor;
/* readonly */
bool hovering;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
Color selectionColor;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class UnknownComponent
{
public:
// Methods:
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
void CleanupConnection(Connection);
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
Component GetComponent(StringHash) const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
Scene GetScene() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool GetUseXML() const;
Array<String> GetXMLAttributes() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInstanceOf(StringHash) const;
bool IsReplicated() const;
bool IsTemporary() const;
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkNetworkUpdate();
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlockEvents(bool);
void SetEnabled(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetTemporary(bool);
void SetType(StringHash);
void SetTypeName(const String&);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
/* readonly */
String category;
bool enabled;
/* readonly */
bool enabledEffective;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint id;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
/* readonly */
int refs;
/* readonly */
bool replicated;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class VAnimEventFrame
{
public:
~VAnimEventFrame();
VAnimEventFrame();
// Methods:
VAnimEventFrame&  operator=(const VAnimEventFrame&);

// Properties:
VariantMap eventData;
StringHash eventType;
float time;
};

class VAnimKeyFrame
{
public:
~VAnimKeyFrame();
VAnimKeyFrame();
// Methods:
VAnimKeyFrame&  operator=(const VAnimKeyFrame&);

// Properties:
float time;
Variant value;
};

class ValueAnimation
{
public:
ValueAnimation();
// Methods:
bool BeginLoad(Deserializer&);
bool EndLoad();
Variant GetAnimationValue(float) const;
AsyncLoadState GetAsyncLoadState() const;
float GetBeginTime() const;
bool GetBlockEvents() const;
float GetEndTime() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
InterpMethod GetInterpolationMethod() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
float GetSplineTension() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
VariantType GetValueType() const;
bool HasEventFrames() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool IsValid() const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetEventFrame(float, const StringHash&, const VariantMap& = VariantMap ( ));
void SetGlobalVar(StringHash, const Variant&);
void SetInterpolationMethod(InterpMethod);
bool SetKeyFrame(float, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
void SetSplineTension(float);
void SetValueType(VariantType);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
InterpMethod interpolationMethod;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
float splineTension;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
VariantType valueType;
/* readonly */
int weakRefs;
};

class ValueAnimationInfo
{
public:
ValueAnimationInfo(ValueAnimation&, WrapMode, float);
ValueAnimationInfo(Object&, ValueAnimation&, WrapMode, float);
ValueAnimationInfo(const ValueAnimationInfo&in);
// Methods:
operator AttributeAnimationInfo() const;
ValueAnimation GetAnimation() const;
float GetSpeed() const;
Object GetTarget() const;
float GetTime() const;
WrapMode GetWrapMode() const;
operator RefCounted() const;
int Refs() const;
void SetSpeed(float);
bool SetTime(float);
void SetWrapMode(WrapMode);
operator ShaderParameterAnimationInfo() const;
bool Update(float);
int WeakRefs() const;
operator const AttributeAnimationInfo() const;
operator const RefCounted() const;
operator const ShaderParameterAnimationInfo() const;

// Properties:
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class Variant
{
public:
~Variant();
Variant();
Variant(int);
Variant(int64);
Variant(uint);
Variant(uint64);
Variant(const StringHash&in);
Variant(bool);
Variant(float);
Variant(double);
Variant(const Vector2&in);
Variant(const Vector3&in);
Variant(const Vector4&in);
Variant(const Quaternion&in);
Variant(const Color&in);
Variant(const String&in);
Variant(const VectorBuffer&in);
Variant(const ResourceRef&in);
Variant(const ResourceRefList&in);
Variant(const VariantMap&in);
Variant(String[]@);
Variant(const Rect&in);
Variant(const IntRect&in);
Variant(const IntVector2&in);
Variant(const IntVector3&in);
Variant(RefCounted@);
Variant(const Matrix3&in);
Variant(const Matrix3x4&in);
Variant(const Matrix4&in);
Variant(const String&in, const String&in);
Variant(VariantType, const String&in);
Variant(const Variant&in);
Variant(ScriptObject@);
Variant(const Variant[]@);
// Methods:
Variant&  operator=(RefCounted);
Variant&  operator=(ScriptObject);
Variant&  operator=(Array<String>);
Variant&  operator=(bool);
Variant&  operator=(const Color&);
Variant&  operator=(const IntRect&);
Variant&  operator=(const IntVector2&);
Variant&  operator=(const IntVector3&);
Variant&  operator=(const Matrix3&);
Variant&  operator=(const Matrix3x4&);
Variant&  operator=(const Matrix4&);
Variant&  operator=(const Quaternion&);
Variant&  operator=(const Rect&);
Variant&  operator=(const ResourceRef&);
Variant&  operator=(const ResourceRefList&);
Variant&  operator=(const String&);
Variant&  operator=(const StringHash&);
Variant&  operator=(const Variant&);
Variant&  operator=(const VariantMap&);
Variant&  operator=(const Array<Variant>);
Variant&  operator=(const Vector2&);
Variant&  operator=(const Vector3&);
Variant&  operator=(const Vector4&);
Variant&  operator=(const VectorBuffer&);
Variant&  operator=(double);
Variant&  operator=(float);
Variant&  operator=(int);
Variant&  operator=(int64);
Variant&  operator=(uint);
Variant&  operator=(uint64);
bool  operator==(RefCounted) const;
bool  operator==(ScriptObject) const;
bool  operator==(Array<String>) const;
bool  operator==(bool) const;
bool  operator==(const Color&) const;
bool  operator==(const IntRect&) const;
bool  operator==(const IntVector2&) const;
bool  operator==(const IntVector3&) const;
bool  operator==(const Matrix3&) const;
bool  operator==(const Matrix3x4&) const;
bool  operator==(const Matrix4&) const;
bool  operator==(const Quaternion&) const;
bool  operator==(const Rect&) const;
bool  operator==(const ResourceRef&) const;
bool  operator==(const ResourceRefList&) const;
bool  operator==(const String&) const;
bool  operator==(const StringHash&) const;
bool  operator==(const Variant&) const;
bool  operator==(const VariantMap&) const;
bool  operator==(const Array<Variant>);
bool  operator==(const Vector2&) const;
bool  operator==(const Vector3&) const;
bool  operator==(const Vector4&) const;
bool  operator==(const VectorBuffer&) const;
bool  operator==(double) const;
bool  operator==(float) const;
bool  operator==(int) const;
bool  operator==(int64) const;
bool  operator==(uint) const;
bool  operator==(uint64) const;
void Clear();
const Color& GetColor() const;
void FromString(VariantType, const String&);
void FromString(const String&, const String&);
bool GetBool() const;
VectorBuffer GetBuffer() const;
double GetDouble() const;
float GetFloat() const;
int GetInt() const;
int64 GetInt64() const;
RefCounted GetPtr() const;
ScriptObject GetScriptObject() const;
StringHash GetStringHash() const;
Array<String> GetStringVector() const;
VariantType GetType() const;
String GetTypeName() const;
uint GetUInt() const;
uint64 GetUInt64() const;
Array<Variant> GetVariantVector() const;
VectorBuffer GetVectorBuffer() const;
const IntRect& GetIntRect() const;
const IntVector2& GetIntVector2() const;
const IntVector3& GetIntVector3() const;
bool IsCustom() const;
bool IsEmpty() const;
bool IsZero() const;
const Matrix3& GetMatrix3() const;
const Matrix3x4& GetMatrix3x4() const;
const Matrix4& GetMatrix4() const;
const Quaternion& GetQuaternion() const;
const Rect& GetRect() const;
const ResourceRef& GetResourceRef() const;
const ResourceRefList& GetResourceRefList() const;
const String& GetString() const;
String ToString() const;
const VariantMap& GetVariantMap() const;
const Vector2& GetVector2() const;
const Vector3& GetVector3() const;
const Vector4& GetVector4() const;

// Properties:
/* readonly */
bool empty;
/* readonly */
VariantType type;
/* readonly */
String typeName;
/* readonly */
bool zero;

// Constants:
static const Variant EMPTY;
static const ResourceRef emptyResourceRef;
static const ResourceRefList emptyResourceRefList;
static const VariantMap emptyVariantMap;
};

class VariantMap
{
public:
~VariantMap();
VariantMap();
VariantMap(const VariantMap&in);
// Methods:
VariantMap&  operator=(const VariantMap&);
Variant&  operator[](StringHash);
void Clear();
bool Contains(StringHash) const;
bool Erase(StringHash);

// Properties:
/* readonly */
Array<StringHash> keys;
/* readonly */
uint length;
/* readonly */
Array<Variant> values;
};

class Vector2
{
public:
Vector2();
Vector2(const Vector2&in);
Vector2(const IntVector2&in);
Vector2(float, float);
Vector2(float[]&inout);
// Methods:
Vector2  operator+(const Vector2&) const;
Vector2&  operator+=(const Vector2&);
Vector2&  operator=(const Vector2&);
bool  operator==(const Vector2&) const;
Vector2 Abs() const;
float AbsDotProduct(const Vector2&) const;
float Angle(const Vector2&) const;
float DotProduct(const Vector2&) const;
bool Equals(const Vector2&) const;
bool IsInf() const;
bool IsNaN() const;
float Length() const;
float LengthSquared() const;
Vector2 Lerp(const Vector2&, float) const;
void Normalize();
Vector2 Normalized() const;
Vector2 NormalizedOrDefault(const Vector2& = Vector2 :: ZERO, float = M_LARGE_EPSILON) const;
float ProjectOntoAxis(const Vector2&) const;
Vector2 ReNormalized(float, float, const Vector2& = Vector2 :: ZERO, float = M_LARGE_EPSILON) const;
String ToString() const;

// Properties:
/* readonly */
Array<float> data;
/* readonly */
float length;
/* readonly */
float lengthSquared;
float x;
float y;

// Constants:
static const Vector2 DOWN;
static const Vector2 LEFT;
static const Vector2 ONE;
static const Vector2 RIGHT;
static const Vector2 UP;
static const Vector2 ZERO;
};

class Vector3
{
public:
Vector3();
Vector3(const Vector3&in);
Vector3(const Vector2&in, float);
Vector3(const Vector2&in);
Vector3(const IntVector3&in);
Vector3(float, float, float);
Vector3(float, float);
Vector3(float[]&inout);
// Methods:
Vector3  operator+(const Vector3&) const;
Vector3&  operator+=(const Vector3&);
Vector3&  operator=(const Vector3&);
bool  operator==(const Vector3&) const;
Vector3 Abs() const;
float AbsDotProduct(const Vector3&) const;
float Angle(const Vector3&) const;
Vector3 CrossProduct(const Vector3&) const;
float DistanceToPlane(const Vector3&, const Vector3&) const;
float DistanceToPoint(const Vector3&) const;
float DotProduct(const Vector3&) const;
bool Equals(const Vector3&) const;
bool IsInf() const;
bool IsNaN() const;
float Length() const;
float LengthSquared() const;
Vector3 Lerp(const Vector3&, float) const;
void Normalize();
Vector3 Normalized() const;
Vector3 NormalizedOrDefault(const Vector3& = Vector3 :: ZERO, float = M_LARGE_EPSILON) const;
Vector3 Orthogonalize(const Vector3&) const;
float ProjectOntoAxis(const Vector3&) const;
Vector3 ProjectOntoLine(const Vector3&, const Vector3&, bool = false) const;
Vector3 ProjectOntoPlane(const Vector3&, const Vector3&) const;
Vector3 ReNormalized(float, float, const Vector3& = Vector3 :: ZERO, float = M_LARGE_EPSILON) const;
uint ToHash() const;
String ToString() const;

// Properties:
/* readonly */
Array<float> data;
/* readonly */
float length;
/* readonly */
float lengthSquared;
float x;
float y;
float z;

// Constants:
static const Vector3 BACK;
static const Vector3 DOWN;
static const Vector3 FORWARD;
static const Vector3 LEFT;
static const Vector3 ONE;
static const Vector3 RIGHT;
static const Vector3 UP;
static const Vector3 ZERO;
};

class Vector4
{
public:
Vector4();
Vector4(const Vector4&in);
Vector4(const Vector3&in, float);
Vector4(float, float, float, float);
Vector4(float[]&inout);
// Methods:
Vector4  operator+(const Vector4&) const;
Vector4&  operator+=(const Vector4&);
Vector4&  operator=(const Vector4&);
bool  operator==(const Vector4&) const;
float&  operator[](uint);
float  operator[](uint) const;
Vector4 Abs() const;
float AbsDotProduct(const Vector4&) const;
float DotProduct(const Vector4&) const;
bool Equals(const Vector4&) const;
bool IsInf() const;
bool IsNaN() const;
Vector4 Lerp(const Vector4&, float) const;
float ProjectOntoAxis(const Vector3&) const;
uint ToHash() const;
String ToString() const;

// Properties:
/* readonly */
Array<float> data;
float w;
float x;
float y;
float z;

// Constants:
static const Vector4 ONE;
static const Vector4 ZERO;
};

class VectorBase
{
public:
~VectorBase();
VectorBase();
// Methods:
VectorBase&  operator=(const VectorBase&);
void Swap(VectorBase&);
};

class VectorBuffer
{
public:
~VectorBuffer();
VectorBuffer();
VectorBuffer(Deserializer&inout, uint);
// Methods:
VectorBuffer&  operator=(const VectorBuffer&);
uint8&  operator[](uint);
void Clear();
uint GetChecksum();
uint GetPosition() const;
uint GetSize() const;
bool IsEof() const;
Array<uint8> Read(uint);
bool ReadBool();
BoundingBox ReadBoundingBox();
int8 ReadByte();
Color ReadColor();
double ReadDouble();
String ReadFileID();
float ReadFloat();
int ReadInt();
int64 ReadInt64();
IntRect ReadIntRect();
IntVector2 ReadIntVector2();
IntVector3 ReadIntVector3();
String ReadLine();
Matrix3 ReadMatrix3();
Matrix3x4 ReadMatrix3x4();
Matrix4 ReadMatrix4();
uint ReadNetID();
Quaternion ReadPackedQuaternion();
Vector3 ReadPackedVector3(float);
Quaternion ReadQuaternion();
Rect ReadRect();
ResourceRef ReadResourceRef();
ResourceRefList ReadResourceRefList();
int16 ReadShort();
String ReadString();
StringHash ReadStringHash();
Array<String> ReadStringVector();
uint8 ReadUByte();
uint ReadUInt();
uint64 ReadUInt64();
uint16 ReadUShort();
uint ReadVLE();
Variant ReadVariant();
Variant ReadVariant(VariantType);
VariantMap ReadVariantMap();
Vector2 ReadVector2();
Vector3 ReadVector3();
Vector4 ReadVector4();
VectorBuffer ReadVectorBuffer(uint);
void Resize(uint);
uint Seek(uint);
uint SeekRelative(int);
void SetData(Deserializer&, uint);
void SetName(const String&);
const String& GetName() const;
uint Tell() const;
uint Write(Array<uint8>);
bool WriteBool(bool);
bool WriteBoundingBox(const BoundingBox&);
bool WriteByte(int8);
bool WriteColor(const Color&);
bool WriteDouble(double);
bool WriteFileID(const String&);
bool WriteFloat(float);
bool WriteInt(int);
bool WriteInt64(int64);
bool WriteIntRect(const IntRect&);
bool WriteIntVector2(const IntVector2&);
bool WriteIntVector3(const IntVector3&);
bool WriteLine(const String&);
bool WriteMatrix3(const Matrix3&);
bool WriteMatrix3x4(const Matrix3x4&);
bool WriteMatrix4(const Matrix4&);
bool WriteNetID(uint);
bool WritePackedQuaternion(const Quaternion&);
bool WritePackedVector3(const Vector3&, float);
bool WriteQuaternion(const Quaternion&);
bool WriteRect(const Rect&);
bool WriteResourceRef(const ResourceRef&);
bool WriteResourceRefList(const ResourceRefList&);
bool WriteShort(int16);
bool WriteString(const String&);
bool WriteStringHash(const StringHash&);
bool WriteStringVector(Array<String>);
bool WriteUByte(uint8);
bool WriteUInt(uint);
bool WriteUInt64(uint64);
bool WriteUShort(uint16);
bool WriteVLE(uint);
bool WriteVariant(const Variant&);
bool WriteVariantData(const Variant&);
bool WriteVariantMap(const VariantMap&);
bool WriteVector2(const Vector2&);
bool WriteVector3(const Vector3&);
bool WriteVector4(const Vector4&);
bool WriteVectorBuffer(const VectorBuffer&);
const uint8&  operator[](uint) const;

// Properties:
/* readonly */
uint checksum;
/* readonly */
bool eof;
String name;
/* readonly */
uint position;
/* readonly */
uint size;
};

class Vertex2D
{
public:
~Vertex2D();
Vertex2D();
// Methods:
Vertex2D&  operator=(const Vertex2D&);

// Properties:
uint color;
Vector3 position;
Vector2 uv;
};

class VertexBuffer
{
public:
VertexBuffer(bool = false);
// Methods:
void ClearDataLost();
bool GetBlockEvents() const;
uint64 GetBufferHash(uint);
VectorBuffer GetData() const;
uint GetElementMask() const;
uint GetElementOffset(VertexElementSemantic, uint8 = 0) const;
uint GetElementOffset(VertexElementType, VertexElementSemantic, uint8 = 0) const;
Array<VertexElement> GetElements() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetGPUObjectName() const;
Graphics GetGraphics() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetVertexCount() const;
uint GetVertexSize() const;
bool HasElement(VertexElementSemantic, uint8 = 0) const;
bool HasElement(VertexElementType, VertexElementSemantic, uint8 = 0) const;
bool HasEventHandlers() const;
bool HasPendingData() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsDataLost() const;
bool IsDynamic() const;
bool IsInstanceOf(StringHash) const;
bool IsLocked() const;
bool IsShadowed() const;
operator Object() const;
void OnDeviceLost();
void OnDeviceReset();
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void Release();
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
bool SetData(VectorBuffer&);
bool SetDataRange(VectorBuffer&, uint, uint, bool = false);
void SetGlobalVar(StringHash, const Variant&);
void SetShadowed(bool);
bool SetSize(uint, Array<VertexElement>, bool = false);
bool SetSize(uint, uint, bool = false);
const String& GetCategory() const;
const String& GetTypeName() const;
void Unlock();
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
/* readonly */
bool dataLost;
/* readonly */
bool dynamic;
/* readonly */
uint elementMask;
/* readonly */
Array<VertexElement> elements;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
bool shadowed;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint vertexCount;
/* readonly */
uint vertexSize;
/* readonly */
int weakRefs;
};

class VertexBufferDesc
{
public:
~VertexBufferDesc();
VertexBufferDesc();
// Methods:
VertexBufferDesc&  operator=(const VertexBufferDesc&);

// Properties:
uint dataSize;
uint vertexCount;
};

class VertexBufferMorph
{
public:
~VertexBufferMorph();
VertexBufferMorph();
// Methods:
VertexBufferMorph&  operator=(const VertexBufferMorph&);

// Properties:
uint dataSize;
uint elementMask;
uint vertexCount;
};

class VertexElement
{
public:
~VertexElement();
VertexElement();
VertexElement(VertexElementType, VertexElementSemantic, uint8 = 0, bool = false);
// Methods:
VertexElement&  operator=(const VertexElement&);
bool  operator==(const VertexElement&) const;

// Properties:
uint8 index;
uint offset;
bool perInstance;
VertexElementSemantic semantic;
VertexElementType type;
};

class View
{
public:
View();
// Methods:
bool Define(RenderSurface, Viewport);
void DrawFullscreenQuad(bool = false);
Texture FindNamedTexture(const String&, bool, bool = false);
const FrameInfo& GetFrameInfo() const;
bool GetBlockEvents() const;
Camera GetCamera() const;
Camera GetCullCamera() const;
bool GetDrawDebug() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Array<Drawable> GetGeometries() const;
Graphics GetGraphics() const;
Array<Light> GetLights() const;
uint GetNumActiveOccluders() const;
Array<Drawable> GetOccluders() const;
OcclusionBuffer GetOcclusionBuffer() const;
Octree GetOctree() const;
RenderSurface GetRenderTarget() const;
Renderer GetRenderer() const;
Scene GetScene() const;
View GetSourceView() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
const IntRect& GetViewRect() const;
const IntVector2& GetViewSize() const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
void Render();
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetCameraShaderParameters(Camera);
void SetCommandShaderParameters(const RenderPathCommand&);
void SetGBufferShaderParameters(const IntVector2&, const IntRect&);
void SetGlobalShaderParameters();
void SetGlobalVar(StringHash, const Variant&);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class View3D
{
public:
View3D();
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
const Color& GetModalFrameColor() const;
const Color& GetModalShadeColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetAutoUpdate() const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
Node GetCameraNode() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
Texture2D GetDepthTexture() const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
bool GetFixedHeightResizing() const;
bool GetFixedWidthResizing() const;
FocusMode GetFocusMode() const;
uint GetFormat() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
bool GetModalAutoDismiss() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
Texture2D GetRenderTexture() const;
UIElement GetRoot() const;
Scene GetScene() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
Viewport GetViewport() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntRect& GetResizeBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetModalFrameSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsModal() const;
bool IsMovable() const;
bool IsResizable() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
void QueueUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetAutoUpdate(bool);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedHeightResizing(bool);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFixedWidthResizing(bool);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFormat(uint);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetModal(bool);
void SetModalAutoDismiss(bool);
void SetModalFrameColor(const Color&);
void SetModalFrameSize(const IntVector2&);
void SetModalShadeColor(const Color&);
void SetMovable(bool);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetResizable(bool);
void SetResizeBorder(const IntRect&);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetView(Scene, Camera, bool = true);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
int WeakRefs() const;
operator Window() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;
operator const Window() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
bool autoUpdate;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
Node cameraNode;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
Texture2D depthTexture;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
bool fixedHeightResizing;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool fixedWidthResizing;
bool focus;
FocusMode focusMode;
uint format;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
bool modal;
bool modalAutoDismiss;
Color modalFrameColor;
IntVector2 modalFrameSize;
Color modalShadeColor;
bool movable;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
/* readonly */
Texture2D renderTexture;
bool resizable;
IntRect resizeBorder;
/* readonly */
UIElement root;
/* readonly */
Scene scene;
/* readonly */
IntVector2 screenPosition;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
/* readonly */
Viewport viewport;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class Viewport
{
public:
Viewport();
Viewport(Scene&, Camera&, RenderPath& = null);
Viewport(Scene&, Camera&, const IntRect&in, RenderPath& = null);
// Methods:
void AllocateView();
bool GetBlockEvents() const;
Camera GetCamera() const;
Camera GetCullCamera() const;
bool GetDrawDebug() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
RenderPath GetRenderPath() const;
Scene GetScene() const;
Ray GetScreenRay(int, int) const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
View GetView() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
const IntRect& GetRect() const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
operator RefCounted() const;
int Refs() const;
Vector3 ScreenToWorldPoint(int, int, float) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetCamera(Camera);
void SetCullCamera(Camera);
void SetDrawDebug(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetRect(const IntRect&);
void SetRenderPath(RenderPath);
bool SetRenderPath(XMLFile);
void SetScene(Scene);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
IntVector2 WorldToScreenPoint(const Vector3&) const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
Camera camera;
/* readonly */
String category;
Camera cullCamera;
bool drawDebug;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
IntRect rect;
/* readonly */
int refs;
RenderPath renderPath;
Scene scene;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class WeakHandle
{
public:
~WeakHandle();
WeakHandle();
WeakHandle(const WeakHandle&in);
WeakHandle(RefCounted@);
// Methods:
WeakHandle&  operator=(RefCounted);
WeakHandle&  operator=(const WeakHandle&);
RefCounted Get() const;

// Properties:
/* readonly */
bool expired;
/* readonly */
int refs;
/* readonly */
int weakRefs;
};

class Window
{
public:
Window();
// Methods:
void AddChild(UIElement);
void AddTag(const String&);
void AddTags(Array<String>);
void AddTags(const String&, int8 = ';');
void AdjustScissor(IntRect&);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
operator BorderImage() const;
void BringToFront();
const Color& GetColor(Corner) const;
const Color& GetColorAttr() const;
const Color& GetDerivedColor() const;
const Color& GetModalFrameColor() const;
const Color& GetModalShadeColor() const;
UIElement CreateChild(StringHash, const String& = String :: EMPTY, uint = M_MAX_UNSIGNED);
void DisableLayoutUpdate();
IntVector2 ElementToScreen(const IntVector2&);
void EnableLayoutUpdate();
bool FilterAttributes(XMLElement&) const;
uint FindChild(UIElement) const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
BlendMode GetBlendMode() const;
bool GetBlockEvents() const;
bool GetBringToBack() const;
bool GetBringToFront() const;
UIElement GetChild(const String&, bool = false) const;
UIElement GetChild(const StringHash&, const Variant& = Variant :: EMPTY, bool = false) const;
UIElement GetChild(uint) const;
Array<UIElement> GetChildren() const;
Array<UIElement> GetChildren(bool) const;
Array<UIElement> GetChildrenWithTag(const String&, bool = false) const;
bool GetClipChildren() const;
IntRect GetCombinedScreenRect();
XMLFile GetDefaultStyle(bool = true) const;
float GetDerivedOpacity() const;
uint GetDragButtonCombo() const;
uint GetDragButtonCount() const;
uint GetDragDropMode() const;
IntVector2 GetEffectiveMinSize() const;
UIElement GetElementEventSender() const;
bool GetEnableAnchor() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
bool GetFixedHeightResizing() const;
bool GetFixedWidthResizing() const;
FocusMode GetFocusMode() const;
int GetHeight() const;
HorizontalAlignment GetHorizontalAlignment() const;
int GetIndent() const;
int GetIndentSpacing() const;
int GetIndentWidth() const;
bool GetInterceptNetworkUpdate(const String&) const;
int GetLayoutElementMaxSize() const;
LayoutMode GetLayoutMode() const;
int GetLayoutSpacing() const;
Material GetMaterial() const;
ResourceRef GetMaterialAttr() const;
int GetMaxHeight() const;
int GetMaxWidth() const;
int GetMinHeight() const;
int GetMinWidth() const;
bool GetModalAutoDismiss() const;
uint GetNumAttributes() const;
uint GetNumChildren(bool = false) const;
uint GetNumNetworkAttributes() const;
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
float GetOpacity() const;
UIElement GetParent() const;
int GetPriority() const;
UIElement GetRoot() const;
bool GetSortChildren() const;
Object GetSubsystem(StringHash) const;
Array<String> GetTags() const;
Texture GetTexture() const;
ResourceRef GetTextureAttr() const;
TraversalMode GetTraversalMode() const;
StringHash GetType() const;
bool GetUseDerivedOpacity() const;
VerticalAlignment GetVerticalAlignment() const;
int GetWidth() const;
bool HasColorGradient() const;
bool HasEventHandlers() const;
bool HasFocus() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool HasTag(const String&) const;
void InsertChild(uint, UIElement);
const IntRect& GetBorder() const;
const IntRect& GetClipBorder() const;
const IntRect& GetImageBorder() const;
const IntRect& GetImageRect() const;
const IntRect& GetLayoutBorder() const;
const IntRect& GetResizeBorder() const;
const IntVector2& GetChildOffset() const;
const IntVector2& GetDisabledOffset() const;
const IntVector2& GetHoverOffset() const;
const IntVector2& GetMaxOffset() const;
const IntVector2& GetMaxSize() const;
const IntVector2& GetMinOffset() const;
const IntVector2& GetMinSize() const;
const IntVector2& GetModalFrameSize() const;
const IntVector2& GetPosition() const;
const IntVector2& GetScreenPosition() const;
const IntVector2& GetSize() const;
bool IsChildOf(UIElement) const;
bool IsEditable() const;
bool IsElementEventSender() const;
bool IsEnabled() const;
bool IsEnabledSelf() const;
bool IsFixedHeight() const;
bool IsFixedSize() const;
bool IsFixedWidth() const;
bool IsHovering() const;
bool IsInside(IntVector2, bool);
bool IsInsideCombined(IntVector2, bool);
bool IsInstanceOf(StringHash) const;
bool IsInternal() const;
bool IsModal() const;
bool IsMovable() const;
bool IsResizable() const;
bool IsSelected() const;
bool IsTemporary() const;
bool IsTiled() const;
bool IsVisible() const;
bool IsVisibleEffective() const;
bool IsWheelHandler() const;
bool IsWithinScissor(const IntRect&);
bool Load(Deserializer&);
UIElement LoadChildXML(XMLFile, XMLFile);
UIElement LoadChildXML(const XMLElement&, XMLFile);
bool LoadJSON(const JSONValue&);
bool LoadXML(Deserializer&);
bool LoadXML(File);
bool LoadXML(VectorBuffer&);
bool LoadXML(XMLFile, XMLFile);
bool LoadXML(const XMLElement&);
bool LoadXML(const XMLElement&, XMLFile);
void MarkNetworkUpdate();
operator Object() const;
void OnClickBegin(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnClickEnd(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor, UIElement);
void OnDoubleClick(const IntVector2&, const IntVector2&, uint, uint, uint, Cursor);
void OnDragBegin(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragCancel(const IntVector2&, const IntVector2&, uint, uint, Cursor);
bool OnDragDropFinish(UIElement);
bool OnDragDropTest(UIElement);
void OnDragEnd(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnDragMove(const IntVector2&, const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnHover(const IntVector2&, const IntVector2&, uint, uint, Cursor);
void OnIndentSet();
void OnKey(uint, uint, uint);
void OnPositionSet(const IntVector2&);
void OnResize(const IntVector2&, const IntVector2&);
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEditable();
void OnTextInput(const String&);
void OnWheel(int, uint, uint);
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAllChildren();
void RemoveAllTags();
void RemoveAttributeAnimation(const String&);
void RemoveChild(UIElement, uint = 0);
void RemoveChild(uint);
void RemoveChildAtIndex(uint);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
bool RemoveTag(const String&);
void ResetDeepEnabled();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(File, const String& indentation = "\t");
bool SaveXML(Serializer&, const String& = "\t") const;
bool SaveXML(VectorBuffer&, const String& indentation = "\t");
bool SaveXML(XMLElement&) const;
IntVector2 ScreenToElement(const IntVector2&);
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAlignment(HorizontalAlignment, VerticalAlignment);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBlendMode(BlendMode);
void SetBlockEvents(bool);
void SetBorder(const IntRect&);
void SetBringToBack(bool);
void SetBringToFront(bool);
void SetChildOffset(const IntVector2&);
void SetClipBorder(const IntRect&);
void SetClipChildren(bool);
void SetColor(Corner, const Color&);
void SetColor(const Color&);
void SetDeepEnabled(bool);
void SetDefaultStyle(XMLFile);
void SetDisabledOffset(const IntVector2&);
void SetDisabledOffset(int, int);
void SetDragDropMode(uint);
void SetEditable(bool);
void SetElementEventSender(bool);
void SetEnableAnchor(bool);
void SetEnabled(bool);
void SetEnabledRecursive(bool);
void SetFixedHeight(int);
void SetFixedHeightResizing(bool);
void SetFixedSize(const IntVector2&);
void SetFixedSize(int, int);
void SetFixedWidth(int);
void SetFixedWidthResizing(bool);
void SetFocus(bool);
void SetFocusMode(FocusMode);
void SetFullImageRect();
void SetGlobalVar(StringHash, const Variant&);
void SetHeight(int);
void SetHorizontalAlignment(HorizontalAlignment);
void SetHoverOffset(const IntVector2&);
void SetHoverOffset(int, int);
void SetHovering(bool);
void SetImageBorder(const IntRect&);
void SetImageRect(const IntRect&);
void SetIndent(int);
void SetIndentSpacing(int);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetInternal(bool);
void SetLayout(LayoutMode, int = 0, const IntRect& = IntRect :: ZERO);
void SetLayoutBorder(const IntRect&);
void SetLayoutFlexScale(const Vector2&);
void SetLayoutMode(LayoutMode);
void SetLayoutSpacing(int);
void SetMaterial(Material);
void SetMaterialAttr(const ResourceRef&);
void SetMaxAnchor(const Vector2&);
void SetMaxAnchor(float, float);
void SetMaxHeight(int);
void SetMaxOffset(const IntVector2&);
void SetMaxSize(const IntVector2&);
void SetMaxSize(int, int);
void SetMaxWidth(int);
void SetMinAnchor(const Vector2&);
void SetMinAnchor(float, float);
void SetMinHeight(int);
void SetMinOffset(const IntVector2&);
void SetMinSize(const IntVector2&);
void SetMinSize(int, int);
void SetMinWidth(int);
void SetModal(bool);
void SetModalAutoDismiss(bool);
void SetModalFrameColor(const Color&);
void SetModalFrameSize(const IntVector2&);
void SetModalShadeColor(const Color&);
void SetMovable(bool);
void SetName(const String&);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOpacity(float);
void SetParent(UIElement, uint = M_MAX_UNSIGNED);
void SetPivot(const Vector2&);
void SetPivot(float, float);
void SetPosition(const IntVector2&);
void SetPosition(int, int);
void SetPriority(int);
void SetRenderTexture(Texture2D);
void SetResizable(bool);
void SetResizeBorder(const IntRect&);
void SetSelected(bool);
void SetSize(const IntVector2&);
void SetSize(int, int);
void SetSortChildren(bool);
bool SetStyle(const String&, XMLFile = null);
bool SetStyle(const XMLElement&);
bool SetStyleAuto(XMLFile = null);
void SetTags(Array<String>);
void SetTemporary(bool);
void SetTexture(Texture);
void SetTextureAttr(const ResourceRef&);
void SetTiled(bool);
void SetTraversalMode(TraversalMode);
void SetUseDerivedOpacity(bool);
void SetVar(StringHash, const Variant&);
void SetVerticalAlignment(VerticalAlignment);
void SetVisible(bool);
void SetWidth(int);
void SortChildren();
const String& GetAppliedStyle() const;
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
operator UIElement() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(float);
void UpdateLayout();
const Variant& GetGlobalVar(StringHash) const;
const Variant& GetVar(const StringHash&) const;
const VariantMap& GetGlobalVars() const;
const VariantMap& GetVars() const;
const Vector2& GetLayoutFlexScale() const;
const Vector2& GetMaxAnchor() const;
const Vector2& GetMinAnchor() const;
const Vector2& GetPivot() const;
operator View3D() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const BorderImage() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;
operator const UIElement() const;
operator const View3D() const;

// Properties:
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BlendMode blendMode;
IntRect border;
bool bringToBack;
bool bringToFront;
/* readonly */
String category;
/* readonly */
IntVector2 childOffset;
/* readonly */
Array<UIElement> children;
IntRect clipBorder;
bool clipChildren;
/* writeonly */
Color color;
/* readonly */
bool colorGradient;
Array<Color> colors;
/* readonly */
IntRect combinedScreenRect;
XMLFile defaultStyle;
/* readonly */
float derivedOpacity;
IntVector2 disabledOffset;
/* readonly */
uint dragButtonCombo;
/* readonly */
uint dragButtonCount;
uint dragDropMode;
bool editable;
bool elementEventSender;
bool enableAnchor;
bool enabled;
/* readonly */
bool enabledSelf;
/* readonly */
bool fixedHeight;
bool fixedHeightResizing;
/* readonly */
bool fixedSize;
/* readonly */
bool fixedWidth;
bool fixedWidthResizing;
bool focus;
FocusMode focusMode;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
int height;
HorizontalAlignment horizontalAlignment;
IntVector2 hoverOffset;
/* readonly */
bool hovering;
IntRect imageBorder;
IntRect imageRect;
int indent;
int indentSpacing;
/* readonly */
int indentWidth;
bool internal;
IntRect layoutBorder;
Vector2 layoutFlexScale;
LayoutMode layoutMode;
int layoutSpacing;
Material material;
Vector2 maxAnchor;
int maxHeight;
IntVector2 maxOffset;
IntVector2 maxSize;
int maxWidth;
Vector2 minAnchor;
int minHeight;
IntVector2 minOffset;
IntVector2 minSize;
int minWidth;
bool modal;
bool modalAutoDismiss;
Color modalFrameColor;
IntVector2 modalFrameSize;
Color modalShadeColor;
bool movable;
String name;
/* readonly */
uint numAllChildren;
/* readonly */
uint numAttributes;
/* readonly */
uint numChildren;
ObjectAnimation objectAnimation;
float opacity;
UIElement parent;
Vector2 pivot;
IntVector2 position;
int priority;
/* readonly */
int refs;
bool resizable;
IntRect resizeBorder;
/* readonly */
UIElement root;
/* readonly */
IntVector2 screenPosition;
bool selected;
IntVector2 size;
bool sortChildren;
String style;
/* readonly */
Array<String> tags;
bool temporary;
Texture texture;
bool tiled;
TraversalMode traversalMode;
/* readonly */
StringHash type;
/* readonly */
String typeName;
bool useDerivedOpacity;
/* readonly */
VariantMap vars;
VerticalAlignment verticalAlignment;
bool visible;
/* readonly */
bool visibleEffective;
/* readonly */
int weakRefs;
int width;
};

class WindowModeParams
{
public:
~WindowModeParams();
WindowModeParams();
// Methods:
WindowModeParams&  operator=(const WindowModeParams&);

// Properties:
int height;
ScreenModeParams screenParams;
int width;
};

class WorkQueue
{
public:
WorkQueue();
// Methods:
void Complete(uint);
void CreateThreads(uint);
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
int GetNonThreadedWorkMs() const;
uint GetNumThreads() const;
Object GetSubsystem(StringHash) const;
int GetTolerance() const;
StringHash GetType() const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsCompleted(uint) const;
bool IsCompleting() const;
bool IsInstanceOf(StringHash) const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void Pause();
operator RefCounted() const;
int Refs() const;
void Resume();
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetNonThreadedWorkMs(int);
void SetTolerance(int);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
int refs;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
int weakRefs;
};

class XMLElement
{
public:
~XMLElement();
XMLElement();
XMLElement(const XMLElement&in);
// Methods:
XMLElement&  operator=(const XMLElement&);
bool AppendChild(XMLElement, bool = false);
XMLElement CreateChild(const String&);
String GetAttribute(const String& = String :: EMPTY) const;
String GetAttributeLower(const String&) const;
Array<String> GetAttributeNames() const;
String GetAttributeUpper(const String&) const;
bool GetBool(const String&) const;
BoundingBox GetBoundingBox() const;
XMLElement GetChild(const String& = String :: EMPTY) const;
Color GetColor(const String&) const;
double GetDouble(const String&) const;
XMLFile GetFile() const;
float GetFloat(const String&) const;
int GetInt(const String&) const;
int64 GetInt64(const String&) const;
IntRect GetIntRect(const String&) const;
IntVector2 GetIntVector2(const String&) const;
IntVector3 GetIntVector3(const String&) const;
Matrix3 GetMatrix3(const String&) const;
Matrix3x4 GetMatrix3x4(const String&) const;
Matrix4 GetMatrix4(const String&) const;
String GetName() const;
XMLElement GetNext(const String& = String :: EMPTY) const;
uint GetNumAttributes() const;
XMLElement GetOrCreateChild(const String&);
XMLElement GetParent() const;
Quaternion GetQuaternion(const String&) const;
Rect GetRect(const String&) const;
ResourceRef GetResourceRef() const;
ResourceRefList GetResourceRefList() const;
Array<String> GetStringVector() const;
uint GetUInt(const String&) const;
uint64 GetUInt64(const String&) const;
String GetValue() const;
Variant GetVariant() const;
VariantMap GetVariantMap() const;
Variant GetVariantValue(VariantType) const;
Array<Variant> GetVariantVector() const;
Vector4 GetVector(const String&) const;
Vector2 GetVector2(const String&) const;
Vector3 GetVector3(const String&) const;
Vector4 GetVector4(const String&) const;
Variant GetVectorVariant(const String&) const;
uint GetXPathResultIndex() const;
bool HasAttribute(const String&) const;
bool HasChild(const String&) const;
bool IsNull() const;
XMLElement NextResult() const;
bool NotNull() const;
bool Remove();
bool RemoveAttribute(const String& = String :: EMPTY);
bool RemoveChild(const String&);
bool RemoveChild(const XMLElement&);
bool RemoveChildren(const String& = String :: EMPTY);
XPathResultSet Select(const String&);
XPathResultSet SelectPrepared(const XPathQuery&) const;
XMLElement SelectSingle(const String&);
XMLElement SelectSinglePrepared(const XPathQuery&) const;
bool SetAttribute(const String&);
bool SetAttribute(const String&, const String&);
bool SetBool(const String&, bool);
bool SetBoundingBox(const BoundingBox&);
bool SetColor(const String&, const Color&);
bool SetDouble(const String&, double);
bool SetFloat(const String&, float);
bool SetInt(const String&, int);
bool SetInt64(const String&, int64);
bool SetIntRect(const String&, const IntRect&);
bool SetIntVector2(const String&, const IntVector2&);
bool SetIntVector3(const String&, const IntVector3&);
bool SetMatrix3(const String&, const Matrix3&);
bool SetMatrix3x4(const String&, const Matrix3x4&);
bool SetMatrix4(const String&, const Matrix4&);
bool SetQuaternion(const String&, const Quaternion&);
bool SetRect(const String&, const Rect&);
bool SetResourceRef(const ResourceRef&);
bool SetResourceRefList(const ResourceRefList&);
bool SetString(const String&, const String&);
bool SetStringVector(Array<String>);
bool SetUInt(const String&, uint);
bool SetUInt64(const String&, uint64);
bool SetValue(const String&);
bool SetVariant(const Variant&);
bool SetVariantMap(const VariantMap&);
bool SetVariantValue(const Variant&);
bool SetVariantVector(Array<Variant>);
bool SetVector2(const String&, const Vector2&);
bool SetVector3(const String&, const Vector3&);
bool SetVector4(const String&, const Vector4&);
bool SetVectorVariant(const String&, const Variant&);

// Properties:
/* readonly */
XMLFile file;
/* readonly */
bool isNull;
/* readonly */
String name;
/* readonly */
XMLElement nextResult;
/* readonly */
bool notNull;
/* readonly */
uint numAttributes;
/* readonly */
XMLElement parent;
String value;

// Constants:
static const XMLElement EMPTY;
};

class XMLFile
{
public:
XMLFile();
// Methods:
bool BeginLoad(Deserializer&);
XMLElement CreateRoot(const String&);
bool EndLoad();
bool FromString(const String&);
AsyncLoadState GetAsyncLoadState() const;
bool GetBlockEvents() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
uint GetMemoryUse() const;
StringHash GetNameHash() const;
XMLElement GetOrCreateRoot(const String&);
XMLElement GetRoot(const String& = String :: EMPTY);
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
uint GetUseTimer();
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsInstanceOf(StringHash) const;
bool Load(Deserializer&);
bool Load(File);
bool Load(VectorBuffer&);
bool Load(const String&);
bool LoadFile(const String&);
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void Patch(XMLFile);
void Patch(const XMLElement&);
operator RefCounted() const;
int Refs() const;
void ResetUseTimer();
operator Resource() const;
bool Save(File) const;
bool Save(Serializer&) const;
bool Save(Serializer&, const String&) const;
bool Save(VectorBuffer&) const;
bool Save(const String&) const;
bool SaveFile(const String&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
void SetAsyncLoadState(AsyncLoadState);
void SetBlockEvents(bool);
void SetGlobalVar(StringHash, const Variant&);
void SetMemoryUse(uint);
void SetName(const String&);
const String& GetCategory() const;
const String& GetName() const;
const String& GetTypeName() const;
String ToString(const String& = "\t") const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
operator const Object() const;
operator const RefCounted() const;
operator const Resource() const;

// Properties:
/* readonly */
String category;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
/* readonly */
uint memoryUse;
String name;
/* readonly */
int refs;
/* readonly */
XMLElement root;
/* readonly */
StringHash type;
/* readonly */
String typeName;
/* readonly */
uint useTimer;
/* readonly */
int weakRefs;
};

class XPathQuery
{
public:
~XPathQuery();
XPathQuery();
XPathQuery(const String&in, const String&in = String :: EMPTY);
// Methods:
void Bind();
void Clear();
XPathResultSet Evaluate(const XMLElement&) const;
bool EvaluateToBool(const XMLElement&) const;
float EvaluateToFloat(const XMLElement&) const;
String EvaluateToString(const XMLElement&) const;
String GetQuery() const;
bool SetQuery(const String&, const String& = String :: EMPTY, bool = true);
bool SetVariable(const String&, bool);
bool SetVariable(const String&, const String&);
bool SetVariable(const String&, const XPathResultSet&);
bool SetVariable(const String&, float);

// Properties:
String query;
};

class XPathResultSet
{
public:
~XPathResultSet();
XPathResultSet();
XPathResultSet(const XPathResultSet&in);
// Methods:
XPathResultSet&  operator=(const XPathResultSet&);
XMLElement  operator[](uint) const;
bool Empty() const;
XMLElement FirstResult();
uint Size() const;

// Properties:
/* readonly */
bool empty;
/* readonly */
XMLElement firstResult;
/* readonly */
uint size;
};

class Zone
{
public:
Zone();
// Methods:
void AddLight(Light);
void AddVertexLight(Light);
void AllocateNetworkState();
operator Animatable() const;
void ApplyAttributes();
const BoundingBox& GetBoundingBox() const;
const BoundingBox& GetWorldBoundingBox();
void CleanupConnection(Connection);
const Color& GetAmbientColor() const;
const Color& GetAmbientEndColor();
const Color& GetAmbientStartColor();
const Color& GetFogColor() const;
operator Component() const;
void DrawDebugGeometry(DebugRenderer, bool);
bool DrawOcclusion(OcclusionBuffer);
operator Drawable() const;
bool GetAmbientGradient() const;
bool GetAnimationEnabled() const;
Variant GetAttribute(const String&) const;
Variant GetAttribute(uint) const;
ValueAnimation GetAttributeAnimation(const String&) const;
float GetAttributeAnimationSpeed(const String&) const;
float GetAttributeAnimationTime(const String&) const;
WrapMode GetAttributeAnimationWrapMode(const String&) const;
Variant GetAttributeDefault(const String&) const;
Variant GetAttributeDefault(uint) const;
bool GetBlockEvents() const;
bool GetCastShadows() const;
Component GetComponent(StringHash) const;
float GetDistance() const;
float GetDrawDistance() const;
uint8 GetDrawableFlags() const;
VariantMap& GetEventDataMap() const;
Object GetEventSender() const;
Light GetFirstLight() const;
float GetFogEnd() const;
float GetFogHeight() const;
float GetFogHeightScale() const;
float GetFogStart() const;
bool GetHeightFog() const;
uint GetID() const;
bool GetInterceptNetworkUpdate(const String&) const;
uint GetLightMask() const;
Array<Light> GetLights() const;
float GetLodBias() const;
float GetLodDistance() const;
Geometry GetLodGeometry(uint, uint);
uint GetMaxLights() const;
float GetMaxZ() const;
float GetMinZ() const;
Node GetNode() const;
uint GetNumAttributes() const;
uint GetNumNetworkAttributes() const;
uint GetNumOccluderTriangles();
ObjectAnimation GetObjectAnimation() const;
ResourceRef GetObjectAnimationAttr() const;
bool GetOverride() const;
int GetPriority() const;
Scene GetScene() const;
float GetShadowDistance() const;
uint GetShadowMask() const;
float GetSortValue() const;
Object GetSubsystem(StringHash) const;
StringHash GetType() const;
UpdateGeometryType GetUpdateGeometryType();
Array<Light> GetVertexLights() const;
uint GetViewMask() const;
Zone GetZone() const;
uint GetZoneMask() const;
Texture GetZoneTexture() const;
ResourceRef GetZoneTextureAttr() const;
bool HasBasePass(uint) const;
bool HasEventHandlers() const;
bool HasSubscribedToEvent(Object, StringHash) const;
bool HasSubscribedToEvent(StringHash) const;
bool IsEnabled() const;
bool IsEnabledEffective() const;
bool IsInView() const;
bool IsInView(Camera) const;
bool IsInView(const FrameInfo&, bool = false) const;
bool IsInside(const Vector3&) const;
bool IsInstanceOf(StringHash) const;
bool IsOccludee() const;
bool IsOccluder() const;
bool IsReplicated() const;
bool IsTemporary() const;
bool IsZoneDirty() const;
void LimitLights();
void LimitVertexLights(bool);
bool Load(Deserializer&);
bool LoadJSON(const JSONValue&);
bool LoadXML(const XMLElement&);
void MarkForUpdate();
void MarkInView(const FrameInfo&);
void MarkInView(uint);
void MarkNetworkUpdate();
const Matrix3x4& GetInverseWorldTransform() const;
operator Object() const;
void OnEvent(Object, StringHash, VariantMap&);
void OnGetAttribute(const AttributeInfo&, Variant&) const;
void OnSetAttribute(const AttributeInfo&, const Variant&);
void OnSetEnabled();
void PrepareNetworkUpdate();
bool ReadDeltaUpdate(Deserializer&);
bool ReadLatestDataUpdate(Deserializer&);
operator RefCounted() const;
int Refs() const;
void Remove();
void RemoveAttributeAnimation(const String&);
void RemoveInstanceDefault();
void RemoveObjectAnimation();
void ResetToDefault();
bool Save(Serializer&) const;
bool SaveDefaultAttributes() const;
bool SaveJSON(JSONValue&) const;
bool SaveXML(XMLElement&) const;
void SendEvent(StringHash);
void SendEvent(StringHash, VariantMap&);
operator Serializable() const;
void SetAmbientColor(const Color&);
void SetAmbientGradient(bool);
void SetAnimationEnabled(bool);
void SetAnimationTime(float);
bool SetAttribute(const String&, const Variant&);
bool SetAttribute(uint, const Variant&);
void SetAttributeAnimation(const String&, ValueAnimation, WrapMode = WM_LOOP, float = 1.0f);
void SetAttributeAnimationSpeed(const String&, float);
void SetAttributeAnimationTime(const String&, float);
void SetAttributeAnimationWrapMode(const String&, WrapMode);
void SetBasePass(uint);
void SetBlockEvents(bool);
void SetBoundingBox(const BoundingBox&);
void SetCastShadows(bool);
void SetDrawDistance(float);
void SetEnabled(bool);
void SetFogColor(const Color&);
void SetFogEnd(float);
void SetFogHeight(float);
void SetFogHeightScale(float);
void SetFogStart(float);
void SetGlobalVar(StringHash, const Variant&);
void SetHeightFog(bool);
void SetInstanceDefault(bool);
void SetInterceptNetworkUpdate(const String&, bool);
void SetLightMask(uint);
void SetLodBias(float);
void SetMaxLights(uint);
void SetMinMaxZ(float, float);
void SetObjectAnimation(ObjectAnimation);
void SetObjectAnimationAttr(const ResourceRef&);
void SetOccludee(bool);
void SetOccluder(bool);
void SetOverride(bool);
void SetPriority(int);
void SetShadowDistance(float);
void SetShadowMask(uint);
void SetSortValue(float);
void SetTemporary(bool);
void SetViewMask(uint);
void SetZone(Zone, bool = false);
void SetZoneMask(uint);
void SetZoneTexture(Texture);
void SetZoneTextureAttr(const ResourceRef&);
const String& GetCategory() const;
const String& GetTypeName() const;
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<StringHash>, bool);
void UnsubscribeFromEvent(Object, StringHash);
void UnsubscribeFromEvent(StringHash);
void UnsubscribeFromEvents(Object);
void Update(const FrameInfo&);
void UpdateBatches(const FrameInfo&);
void UpdateGeometry(const FrameInfo&);
const Variant& GetGlobalVar(StringHash) const;
const VariantMap& GetGlobalVars() const;
int WeakRefs() const;
void WriteDeltaUpdate(Serializer&, const DirtyBits&, uint8);
void WriteInitialDeltaUpdate(Serializer&, uint8);
void WriteLatestDataUpdate(Serializer&, uint8);
operator const Animatable() const;
operator const Component() const;
operator const Drawable() const;
operator const Object() const;
operator const RefCounted() const;
operator const Serializable() const;

// Properties:
Color ambientColor;
/* readonly */
Color ambientEndColor;
bool ambientGradient;
/* readonly */
Color ambientStartColor;
bool animationEnabled;
/* readonly */
Array<Variant> attributeDefaults;
/* readonly */
Array<AttributeInfo> attributeInfos;
Array<Variant> attributes;
BoundingBox boundingBox;
bool castShadows;
/* readonly */
String category;
float drawDistance;
bool enabled;
/* readonly */
bool enabledEffective;
Color fogColor;
float fogEnd;
float fogHeight;
float fogHeightScale;
float fogStart;
Array<Variant> globalVar;
/* readonly */
VariantMap globalVars;
bool heightFog;
/* readonly */
uint id;
/* readonly */
bool inView;
/* readonly */
Matrix3x4 inverseWorldTransform;
uint lightMask;
float lodBias;
uint maxLights;
/* readonly */
Node node;
/* readonly */
uint numAttributes;
ObjectAnimation objectAnimation;
bool occludee;
bool occluder;
bool override;
int priority;
/* readonly */
int refs;
/* readonly */
bool replicated;
float shadowDistance;
uint shadowMask;
bool temporary;
/* readonly */
StringHash type;
/* readonly */
String typeName;
uint viewMask;
/* readonly */
int weakRefs;
/* readonly */
BoundingBox worldBoundingBox;
/* readonly */
Zone zone;
uint zoneMask;
Texture zoneTexture;
};

// Enumerations

enum AnimationBlendMode
{
ABM_LERP,
ABM_ADDITIVE,
};

enum AsyncLoadState
{
ASYNC_DONE,
ASYNC_QUEUED,
ASYNC_LOADING,
ASYNC_SUCCESS,
ASYNC_FAIL,
};

enum AttributeMode
{
AM_EDIT,
AM_FILE,
AM_NET,
AM_DEFAULT,
AM_LATESTDATA,
AM_NOEDIT,
AM_NODEID,
AM_COMPONENTID,
AM_NODEIDVECTOR,
AM_FILEREADONLY,
};

enum AutoRemoveMode
{
REMOVE_DISABLED,
REMOVE_COMPONENT,
REMOVE_NODE,
};

enum BlendMode
{
BLEND_REPLACE,
BLEND_ADD,
BLEND_MULTIPLY,
BLEND_ALPHA,
BLEND_ADDALPHA,
BLEND_PREMULALPHA,
BLEND_INVDESTALPHA,
BLEND_SUBTRACT,
BLEND_SUBTRACTALPHA,
MAX_BLENDMODES,
};

enum BodyType2D
{
BT_STATIC,
BT_KINEMATIC,
BT_DYNAMIC,
};

enum CollisionEventMode
{
COLLISION_NEVER,
COLLISION_ACTIVE,
COLLISION_ALWAYS,
};

enum CompareMode
{
CMP_ALWAYS,
CMP_EQUAL,
CMP_NOTEQUAL,
CMP_LESS,
CMP_LESSEQUAL,
CMP_GREATER,
CMP_GREATEREQUAL,
MAX_COMPAREMODES,
};

enum CompressedFormat
{
CF_NONE,
CF_RGBA,
CF_DXT1,
CF_DXT3,
CF_DXT5,
CF_ETC1,
CF_ETC2_RGB,
CF_ETC2_RGBA,
CF_PVRTC_RGB_2BPP,
CF_PVRTC_RGBA_2BPP,
CF_PVRTC_RGB_4BPP,
CF_PVRTC_RGBA_4BPP,
};

enum ConstraintType
{
CONSTRAINT_POINT,
CONSTRAINT_HINGE,
CONSTRAINT_SLIDER,
CONSTRAINT_CONETWIST,
};

enum Corner
{
C_TOPLEFT,
C_TOPRIGHT,
C_BOTTOMLEFT,
C_BOTTOMRIGHT,
MAX_UIELEMENT_CORNERS,
};

enum CreateMode
{
REPLICATED,
LOCAL,
};

enum CrowdAgentRequestedTarget
{
CA_REQUESTEDTARGET_NONE,
CA_REQUESTEDTARGET_POSITION,
CA_REQUESTEDTARGET_VELOCITY,
};

enum CrowdAgentState
{
CA_STATE_INVALID,
CA_STATE_WALKING,
CA_STATE_OFFMESH,
};

enum CrowdAgentTargetState
{
CA_TARGET_NONE,
CA_TARGET_FAILED,
CA_TARGET_VALID,
CA_TARGET_REQUESTING,
CA_TARGET_WAITINGFORQUEUE,
CA_TARGET_WAITINGFORPATH,
CA_TARGET_VELOCITY,
};

enum CubeMapFace
{
FACE_POSITIVE_X,
FACE_NEGATIVE_X,
FACE_POSITIVE_Y,
FACE_NEGATIVE_Y,
FACE_POSITIVE_Z,
FACE_NEGATIVE_Z,
MAX_CUBEMAP_FACES,
};

enum CubeMapLayout
{
CML_HORIZONTAL,
CML_HORIZONTALNVIDIA,
CML_HORIZONTALCROSS,
CML_VERTICALCROSS,
CML_BLENDER,
};

enum CullMode
{
CULL_NONE,
CULL_CCW,
CULL_CW,
MAX_CULLMODES,
};

enum CursorShape
{
CS_NORMAL,
CS_IBEAM,
CS_CROSS,
CS_RESIZEVERTICAL,
CS_RESIZEDIAGONAL_TOPRIGHT,
CS_RESIZEHORIZONTAL,
CS_RESIZEDIAGONAL_TOPLEFT,
CS_RESIZE_ALL,
CS_ACCEPTDROP,
CS_REJECTDROP,
CS_BUSY,
CS_BUSY_ARROW,
CS_MAX_SHAPES,
};

enum DBAPI
{
DBAPI_SQLITE,
DBAPI_ODBC,
};

enum DeferredLightPSVariation
{
DLPS_NONE,
DLPS_SPOT,
DLPS_POINT,
DLPS_POINTMASK,
DLPS_SPEC,
DLPS_SPOTSPEC,
DLPS_POINTSPEC,
DLPS_POINTMASKSPEC,
DLPS_SHADOW,
DLPS_SPOTSHADOW,
DLPS_POINTSHADOW,
DLPS_POINTMASKSHADOW,
DLPS_SHADOWSPEC,
DLPS_SPOTSHADOWSPEC,
DLPS_POINTSHADOWSPEC,
DLPS_POINTMASKSHADOWSPEC,
DLPS_SHADOWNORMALOFFSET,
DLPS_SPOTSHADOWNORMALOFFSET,
DLPS_POINTSHADOWNORMALOFFSET,
DLPS_POINTMASKSHADOWNORMALOFFSET,
DLPS_SHADOWSPECNORMALOFFSET,
DLPS_SPOTSHADOWSPECNORMALOFFSET,
DLPS_POINTSHADOWSPECNORMALOFFSET,
DLPS_POINTMASKSHADOWSPECNORMALOFFSET,
DLPS_ORTHO,
DLPS_ORTHOSPOT,
DLPS_ORTHOPOINT,
DLPS_ORTHOPOINTMASK,
DLPS_ORTHOSPEC,
DLPS_ORTHOSPOTSPEC,
DLPS_ORTHOPOINTSPEC,
DLPS_ORTHOPOINTMASKSPEC,
DLPS_ORTHOSHADOW,
DLPS_ORTHOSPOTSHADOW,
DLPS_ORTHOPOINTSHADOW,
DLPS_ORTHOPOINTMASKSHADOW,
DLPS_ORTHOSHADOWSPEC,
DLPS_ORTHOSPOTSHADOWSPEC,
DLPS_ORTHOPOINTSHADOWSPEC,
DLPS_ORTHOPOINTMASKSHADOWSPEC,
DLPS_ORTHOSHADOWNORMALOFFSET,
DLPS_ORTHOSPOTSHADOWNORMALOFFSET,
DLPS_ORTHOPOINTSHADOWNORMALOFFSET,
DLPS_ORTHOPOINTMASKSHADOWNORMALOFFSET,
DLPS_ORTHOSHADOWSPECNORMALOFFSET,
DLPS_ORTHOSPOTSHADOWSPECNORMALOFFSET,
DLPS_ORTHOPOINTSHADOWSPECNORMALOFFSET,
DLPS_ORTHOPOINTMASKSHADOWSPECNORMALOFFSET,
MAX_DEFERRED_LIGHT_PS_VARIATIONS,
};

enum DeferredLightVSVariation
{
DLVS_NONE,
DLVS_DIR,
DLVS_ORTHO,
DLVS_ORTHODIR,
MAX_DEFERRED_LIGHT_VS_VARIATIONS,
};

enum DumpMode
{
DOXYGEN,
C_HEADER,
};

enum EmitterType
{
EMITTER_SPHERE,
EMITTER_BOX,
EMITTER_SPHEREVOLUME,
EMITTER_CYLINDER,
EMITTER_RING,
};

enum EmitterType2D
{
EMITTER_TYPE_GRAVITY,
EMITTER_TYPE_RADIAL,
};

enum FaceCameraMode
{
FC_NONE,
FC_ROTATE_XYZ,
FC_ROTATE_Y,
FC_LOOKAT_XYZ,
FC_LOOKAT_Y,
FC_LOOKAT_MIXED,
FC_DIRECTION,
};

enum FileMode
{
FILE_READ,
FILE_WRITE,
FILE_READWRITE,
};

enum FillMode
{
FILL_SOLID,
FILL_WIREFRAME,
FILL_POINT,
};

enum FocusMode
{
FM_NOTFOCUSABLE,
FM_RESETFOCUS,
FM_FOCUSABLE,
FM_FOCUSABLE_DEFOCUSABLE,
};

enum FontHintLevel
{
FONT_HINT_LEVEL_NONE,
FONT_HINT_LEVEL_LIGHT,
FONT_HINT_LEVEL_NORMAL,
};

enum FontType
{
FONT_NONE,
FONT_FREETYPE,
FONT_BITMAP,
MAX_FONT_TYPES,
};

enum FrustumPlane
{
PLANE_NEAR,
PLANE_LEFT,
PLANE_RIGHT,
PLANE_UP,
PLANE_DOWN,
PLANE_FAR,
};

enum GeometryType
{
GEOM_STATIC,
GEOM_SKINNED,
GEOM_INSTANCED,
GEOM_BILLBOARD,
GEOM_DIRBILLBOARD,
GEOM_TRAIL_FACE_CAMERA,
GEOM_TRAIL_BONE,
MAX_GEOMETRYTYPES,
GEOM_STATIC_NOINSTANCING,
};

enum HighlightMode
{
HM_NEVER,
HM_FOCUS,
HM_ALWAYS,
};

enum HorizontalAlignment
{
HA_LEFT,
HA_CENTER,
HA_RIGHT,
HA_CUSTOM,
};

enum HttpRequestState
{
HTTP_INITIALIZING,
HTTP_ERROR,
HTTP_OPEN,
HTTP_CLOSED,
};

enum IKAlgorithm
{
ONE_BONE,
TWO_BONE,
FABRIK,
};

enum IKFeature
{
JOINT_ROTATIONS,
TARGET_ROTATIONS,
UPDATE_ORIGINAL_POSE,
UPDATE_ACTIVE_POSE,
USE_ORIGINAL_POSE,
CONSTRAINTS,
AUTO_SOLVE,
};

enum InterpMethod
{
IM_NONE,
IM_LINEAR,
IM_SPLINE,
};

enum InterpolationMode
{
BEZIER_CURVE,
CATMULL_ROM_CURVE,
LINEAR_CURVE,
CATMULL_ROM_FULL_CURVE,
};

enum Intersection
{
OUTSIDE,
INTERSECTS,
INSIDE,
};

enum JSONNumberType
{
JSONNT_NAN,
JSONNT_INT,
JSONNT_UINT,
JSONNT_FLOAT_DOUBLE,
};

enum JSONValueType
{
JSON_NULL,
JSON_BOOL,
JSON_NUMBER,
JSON_STRING,
JSON_ARRAY,
JSON_OBJECT,
};

enum LayoutMode
{
LM_FREE,
LM_HORIZONTAL,
LM_VERTICAL,
};

enum LegacyVertexElement
{
ELEMENT_POSITION,
ELEMENT_NORMAL,
ELEMENT_COLOR,
ELEMENT_TEXCOORD1,
ELEMENT_TEXCOORD2,
ELEMENT_CUBETEXCOORD1,
ELEMENT_CUBETEXCOORD2,
ELEMENT_TANGENT,
ELEMENT_BLENDWEIGHTS,
ELEMENT_BLENDINDICES,
ELEMENT_INSTANCEMATRIX1,
ELEMENT_INSTANCEMATRIX2,
ELEMENT_INSTANCEMATRIX3,
ELEMENT_OBJECTINDEX,
MAX_LEGACY_VERTEX_ELEMENTS,
};

enum LightPSVariation
{
LPS_NONE,
LPS_SPOT,
LPS_POINT,
LPS_POINTMASK,
LPS_SPEC,
LPS_SPOTSPEC,
LPS_POINTSPEC,
LPS_POINTMASKSPEC,
LPS_SHADOW,
LPS_SPOTSHADOW,
LPS_POINTSHADOW,
LPS_POINTMASKSHADOW,
LPS_SHADOWSPEC,
LPS_SPOTSHADOWSPEC,
LPS_POINTSHADOWSPEC,
LPS_POINTMASKSHADOWSPEC,
MAX_LIGHT_PS_VARIATIONS,
};

enum LightType
{
LIGHT_DIRECTIONAL,
LIGHT_SPOT,
LIGHT_POINT,
};

enum LightVSVariation
{
LVS_DIR,
LVS_SPOT,
LVS_POINT,
LVS_SHADOW,
LVS_SPOTSHADOW,
LVS_POINTSHADOW,
LVS_SHADOWNORMALOFFSET,
LVS_SPOTSHADOWNORMALOFFSET,
LVS_POINTSHADOWNORMALOFFSET,
MAX_LIGHT_VS_VARIATIONS,
};

enum LoadMode
{
LOAD_RESOURCES_ONLY,
LOAD_SCENE,
LOAD_SCENE_AND_RESOURCES,
};

enum LockState
{
LOCK_NONE,
LOCK_HARDWARE,
LOCK_SHADOW,
LOCK_SCRATCH,
};

enum LoopMode2D
{
LM_DEFAULT,
LM_FORCE_LOOPED,
LM_FORCE_CLAMPED,
};

enum MouseMode
{
MM_ABSOLUTE,
MM_RELATIVE,
MM_WRAP,
MM_FREE,
MM_INVALID,
};

enum NavigationPathPointFlag
{
NAVPATHFLAG_NONE,
NAVPATHFLAG_START,
NAVPATHFLAG_END,
NAVPATHFLAG_OFF_MESH,
};

enum NavigationPushiness
{
NAVIGATIONPUSHINESS_LOW,
NAVIGATIONPUSHINESS_MEDIUM,
NAVIGATIONPUSHINESS_HIGH,
NAVIGATIONPUSHINESS_NONE,
};

enum NavigationQuality
{
NAVIGATIONQUALITY_LOW,
NAVIGATIONQUALITY_MEDIUM,
NAVIGATIONQUALITY_HIGH,
};

enum NavmeshPartitionType
{
NAVMESH_PARTITION_WATERSHED,
NAVMESH_PARTITION_MONOTONE,
};

enum ObserverPositionSendMode
{
OPSM_NONE,
OPSM_POSITION,
OPSM_POSITION_ROTATION,
};

enum Orientation
{
O_HORIZONTAL,
O_VERTICAL,
};

enum Orientation2D
{
O_ORTHOGONAL,
O_ISOMETRIC,
O_STAGGERED,
O_HEXAGONAL,
};

enum PacketType
{
PT_UNRELIABLE_UNORDERED,
PT_UNRELIABLE_ORDERED,
PT_RELIABLE_UNORDERED,
PT_RELIABLE_ORDERED,
};

enum PassLightingMode
{
LIGHTING_UNLIT,
LIGHTING_PERVERTEX,
LIGHTING_PERPIXEL,
};

enum PrimitiveType
{
TRIANGLE_LIST,
LINE_LIST,
POINT_LIST,
TRIANGLE_STRIP,
LINE_STRIP,
TRIANGLE_FAN,
};

enum RayQueryLevel
{
RAY_AABB,
RAY_OBB,
RAY_TRIANGLE,
RAY_TRIANGLE_UV,
};

enum RenderCommandSortMode
{
SORT_FRONTTOBACK,
SORT_BACKTOFRONT,
};

enum RenderCommandType
{
CMD_NONE,
CMD_CLEAR,
CMD_SCENEPASS,
CMD_QUAD,
CMD_FORWARDLIGHTS,
CMD_LIGHTVOLUMES,
CMD_RENDERUI,
CMD_SENDEVENT,
};

enum RenderSurfaceUpdateMode
{
SURFACE_MANUALUPDATE,
SURFACE_UPDATEVISIBLE,
SURFACE_UPDATEALWAYS,
};

enum RenderTargetSizeMode
{
SIZE_ABSOLUTE,
SIZE_VIEWPORTDIVISOR,
SIZE_VIEWPORTMULTIPLIER,
};

enum ResourceRequest
{
RESOURCE_CHECKEXISTS,
RESOURCE_GETFILE,
};

enum ShaderParameterGroup
{
SP_FRAME,
SP_CAMERA,
SP_ZONE,
SP_LIGHT,
SP_MATERIAL,
SP_OBJECT,
SP_CUSTOM,
MAX_SHADER_PARAMETER_GROUPS,
};

enum ShaderType
{
VS,
PS,
};

enum ShadowQuality
{
SHADOWQUALITY_SIMPLE_16BIT,
SHADOWQUALITY_SIMPLE_24BIT,
SHADOWQUALITY_PCF_16BIT,
SHADOWQUALITY_PCF_24BIT,
SHADOWQUALITY_VSM,
SHADOWQUALITY_BLUR_VSM,
};

enum ShapeType
{
SHAPE_BOX,
SHAPE_SPHERE,
SHAPE_STATICPLANE,
SHAPE_CYLINDER,
SHAPE_CAPSULE,
SHAPE_CONE,
SHAPE_TRIANGLEMESH,
SHAPE_CONVEXHULL,
SHAPE_TERRAIN,
SHAPE_GIMPACTMESH,
};

enum StencilOp
{
OP_KEEP,
OP_ZERO,
OP_REF,
OP_INCR,
OP_DECR,
};

enum TextEffect
{
TE_NONE,
TE_SHADOW,
TE_STROKE,
};

enum TextureAddressMode
{
ADDRESS_WRAP,
ADDRESS_MIRROR,
ADDRESS_CLAMP,
ADDRESS_BORDER,
MAX_ADDRESSMODES,
};

enum TextureCoordinate
{
COORD_U,
COORD_V,
COORD_W,
MAX_COORDS,
};

enum TextureFilterMode
{
FILTER_NEAREST,
FILTER_BILINEAR,
FILTER_TRILINEAR,
FILTER_ANISOTROPIC,
FILTER_NEAREST_ANISOTROPIC,
FILTER_DEFAULT,
MAX_FILTERMODES,
};

enum TextureUnit
{
TU_DIFFUSE,
TU_ALBEDOBUFFER,
TU_NORMAL,
TU_NORMALBUFFER,
TU_SPECULAR,
TU_EMISSIVE,
TU_ENVIRONMENT,
TU_LIGHTRAMP,
TU_LIGHTSHAPE,
TU_SHADOWMAP,
TU_VOLUMEMAP,
TU_CUSTOM1,
TU_CUSTOM2,
TU_FACESELECT,
TU_INDIRECTION,
TU_DEPTHBUFFER,
TU_LIGHTBUFFER,
TU_ZONE,
MAX_MATERIAL_TEXTURE_UNITS,
MAX_TEXTURE_UNITS,
};

enum TextureUsage
{
TEXTURE_STATIC,
TEXTURE_DYNAMIC,
TEXTURE_RENDERTARGET,
TEXTURE_DEPTHSTENCIL,
};

enum TileMapLayerType2D
{
LT_TILE_LAYER,
LT_OBJECT_GROUP,
LT_IMAGE_LAYER,
LT_INVALID,
};

enum TileMapObjectType2D
{
OT_RECTANGLE,
OT_ELLIPSE,
OT_POLYGON,
OT_POLYLINE,
OT_TILE,
OT_INVALID,
};

enum TrailType
{
TT_FACE_CAMERA,
TT_BONE,
};

enum TransformSpace
{
TS_LOCAL,
TS_PARENT,
TS_WORLD,
};

enum TraversalMode
{
TM_BREADTH_FIRST,
TM_DEPTH_FIRST,
};

enum UpdateGeometryType
{
UPDATE_NONE,
UPDATE_MAIN_THREAD,
UPDATE_WORKER_THREAD,
};

enum VariantType
{
VAR_NONE,
VAR_INT,
VAR_BOOL,
VAR_FLOAT,
VAR_VECTOR2,
VAR_VECTOR3,
VAR_VECTOR4,
VAR_QUATERNION,
VAR_COLOR,
VAR_STRING,
VAR_BUFFER,
VAR_VOIDPTR,
VAR_RESOURCEREF,
VAR_RESOURCEREFLIST,
VAR_VARIANTVECTOR,
VAR_VARIANTMAP,
VAR_INTRECT,
VAR_INTVECTOR2,
VAR_PTR,
VAR_MATRIX3,
VAR_MATRIX3X4,
VAR_MATRIX4,
VAR_DOUBLE,
VAR_STRINGVECTOR,
VAR_RECT,
VAR_INTVECTOR3,
VAR_INT64,
VAR_CUSTOM_HEAP,
VAR_CUSTOM_STACK,
MAX_VAR_TYPES,
};

enum VertexElementSemantic
{
SEM_POSITION,
SEM_NORMAL,
SEM_BINORMAL,
SEM_TANGENT,
SEM_TEXCOORD,
SEM_COLOR,
SEM_BLENDWEIGHTS,
SEM_BLENDINDICES,
SEM_OBJECTINDEX,
MAX_VERTEX_ELEMENT_SEMANTICS,
};

enum VertexElementType
{
TYPE_INT,
TYPE_FLOAT,
TYPE_VECTOR2,
TYPE_VECTOR3,
TYPE_VECTOR4,
TYPE_UBYTE4,
TYPE_UBYTE4_NORM,
MAX_VERTEX_ELEMENT_TYPES,
};

enum VertexLightVSVariation
{
VLVS_NOLIGHTS,
VLVS_1LIGHT,
VLVS_2LIGHTS,
VLVS_3LIGHTS,
VLVS_4LIGHTS,
MAX_VERTEXLIGHT_VS_VARIATIONS,
};

enum VerticalAlignment
{
VA_TOP,
VA_CENTER,
VA_BOTTOM,
VA_CUSTOM,
};

enum WindowDragMode
{
DRAG_NONE,
DRAG_MOVE,
DRAG_RESIZE_TOPLEFT,
DRAG_RESIZE_TOP,
DRAG_RESIZE_TOPRIGHT,
DRAG_RESIZE_RIGHT,
DRAG_RESIZE_BOTTOMRIGHT,
DRAG_RESIZE_BOTTOM,
DRAG_RESIZE_BOTTOMLEFT,
DRAG_RESIZE_LEFT,
};

enum WrapMode
{
WM_LOOP,
WM_ONCE,
WM_CLAMP,
};

// Global functions
float Abs(float);
float Acos(float);
String AddTrailingSlash(const String&);
float Asin(float);
float Atan(float);
float Atan2(float, float);
float Ceil(float);
int CeilToInt(float);
uint CheckMaxLevels(int, int, int, uint);
uint CheckMaxLevels(int, int, int, uint);
uint CheckMaxLevels(int, int, int, uint);
uint CheckMaxLevels(int, int, int, uint);
uint CheckMaxLevels(int, int, int, uint);
uint CheckMaxLevels(int, int, uint);
uint CheckMaxLevels(int, int, uint);
uint CheckMaxLevels(int, int, uint);
uint CheckMaxLevels(int, int, uint);
uint CheckMaxLevels(int, int, uint);
float Clamp(float, float, float);
int Clamp(int, int, int);
void ClearDelayedExecute(const String& declaration = String ( ));
uint ClosestPowerOfTwo(uint);
void CombineHash(uint&, uint);
bool CompareDrawables(Drawable, Drawable);
bool CompareLights(Light, Light);
bool CompressStream(Serializer&, Deserializer&);
VectorBuffer CompressVectorBuffer(VectorBuffer&);
float ConvertGammaToLinear(float);
float ConvertLinearToGamma(float);
float Cos(float);
uint CountSetBits(uint);
Object CreateObject(const String&);
bool DecompressStream(Serializer&, Deserializer&);
VectorBuffer DecompressVectorBuffer(VectorBuffer&);
void DelayedExecute(float, bool, const String&, const Array<Variant> params = null);
bool Equals(float, float);
void ErrorDialog(const String&, const String&);
void ErrorExit(const String& = String :: EMPTY, int = EXIT_FAILURE);
uint EstimateCompressBound(uint);
uint16 FloatToHalf(float);
uint FloatToRawIntBits(float);
float Floor(float);
int FloorToInt(float);
float Fract(float);
DBAPI GetAPI();
View GetActualView(View);
uint GetAlphaFormat();
Array<String> GetArguments();
String GetConsoleInput();
uint GetDepthStencilFormat();
uint GetElementOffset(Array<VertexElement>, VertexElementType, VertexElementSemantic, uint8 = 0);
Array<VertexElement> GetElements(uint);
StringHashRegister& GetEventNameRegister();
Object GetEventSender();
String GetExtension(const String&, bool = true);
String GetFileName(const String&);
String GetFileNameAndExtension(const String&, bool = false);
String GetFileSizeString(uint64);
uint GetFloat16Format();
uint GetFloat32Format();
uint GetFormat(const String&);
int64 GetFrequency();
Matrix3x4 GetFullscreenQuadTransform(Camera);
bool GetGL3Support();
Variant GetGlobalVar(const String&);
String GetHostName();
String GetInternalPath(const String&);
uint GetLinearDepthFormat();
String GetLoginName();
uint GetLuminanceAlphaFormat();
uint GetLuminanceFormat();
uint GetMaxBones();
String GetMiniDumpDir();
String GetNativePath(const String&);
uint GetNumLogicalCPUs();
uint GetNumPhysicalCPUs();
JSONNumberType GetNumberTypeFromName(const String&);
String GetNumberTypeName(JSONNumberType);
String GetOSVersion();
Array<AttributeInfo> GetObjectAttributeInfos(const String&);
Array<String> GetObjectCategories();
Array<String> GetObjectsByCategory(const String&);
String GetParentPath(const String&);
uint GetPassIndex(const String&);
String GetPath(const String&);
String GetPlatform();
uint GetRG16Format();
uint GetRGBA16Format();
uint GetRGBAFloat16Format();
uint GetRGBAFloat32Format();
uint GetRGBAFormat();
uint GetRGBFormat();
uint GetRGFloat16Format();
uint GetRGFloat32Format();
uint GetRandomSeed();
uint GetReadableDepthFormat();
ResourceRef GetResourceRef(Resource, StringHash);
StringHash GetResourceType(Resource, StringHash);
uint GetSystemTime();
String GetTextureUnitName(TextureUnit);
uint GetTimeSinceEpoch();
String GetTimeStamp();
uint64 GetTotalMemory();
VariantType GetTypeFromName(const String&);
String GetTypeName(VariantType);
JSONValueType GetValueTypeFromName(const String&);
String GetValueTypeName(JSONValueType);
VariantType GetVariantTypeFromName(const String&);
String GetVariantTypeName(VariantType);
uint GetVertexSize(Array<VertexElement>);
uint GetVertexSize(uint);
float HalfToFloat(uint16);
bool HasElement(Array<VertexElement>, VertexElementType, VertexElementSemantic, uint8 = 0);
bool HasParameter(const VariantMap&, const String&);
bool HasSubscribedToEvent(Object, const String&);
bool HasSubscribedToEvent(const String&);
void InitFPU();
float InverseLerp(float, float, float);
bool IsAbsolutePath(const String&);
bool IsActive();
bool IsAlpha(uint);
bool IsDigit(uint);
bool IsMainThread();
bool IsMainThread();
bool IsNaN(double);
bool IsNaN(float);
bool IsPowerOfTwo(uint);
bool IsReplicatedID(uint);
bool IsSupported();
String Join(Array<String>&, const String& glue);
float Lerp(float, float, float);
float Ln(float);
Sprite2D LoadFromResourceRef(Object, const ResourceRef&);
void LoadShaders(Graphics, Deserializer&);
uint LogBaseTwo(uint);
void MarkNetworkUpdate();
float Max(float, float);
int Max(int, int);
float Min(float, float);
int Min(int, int);
float Mod(float, float);
uint NextPowerOfTwo(uint);
void OpenConsoleWindow();
Array<String> ParseArguments(const String&, bool = true);
VariantMap ParseParameters(Array<String>);
Variant ParseShaderParameterValue(const String&);
float Pow(float, float);
void Print(bool, bool error = false);
void Print(const String&, bool error = false);
void Print(const Variant&, bool error = false);
void Print(float, bool error = false);
void Print(int, bool error = false);
void Print(int64, bool error = false);
void Print(uint, bool error = false);
void Print(uint64, bool error = false);
void PrintCallStack(bool error = false);
void PrintLine(const String&, bool = false);
void PrintUnicode(const String&, bool = false);
void PrintUnicodeLine(const String&, bool = false);
int Rand();
float RandStandardNormal();
float Random();
float Random(float);
float Random(float, float);
int Random(int);
int Random(int, int);
int RandomInt();
int RandomInt(int);
int RandomInt(int, int);
float RandomNormal(float, float);
void RegisterEventName(const String&);
void Remove();
String RemoveTrailingSlash(const String&);
String ReplaceExtension(const String&, const String&);
float Round(float);
int RoundToInt(float);
uint SDBMHash(uint, uint8);
ResourceRef SaveToResourceRef(Sprite2D);
void SendEvent(const String&, VariantMap& eventData = VariantMap ( ));
void SetActive(bool);
void SetGlobalVar(const String&, Variant&);
void SetMainThread();
void SetMainThread();
void SetMiniDumpDir(const String&);
void SetRandomSeed(uint);
float Sign(float);
float Sin(float);
void SinCos(float, float&, float&);
void Sleep(uint);
float SmoothStep(float, float, float);
void SplitPath(const String&, String&, String&, String&, bool = true);
float Sqrt(float);
float StableRandom(const Vector2&);
float StableRandom(const Vector3&);
float StableRandom(float);
const String& GetResourceName(Resource);
const String& GetTypeName(StringHash);
void SubscribeToEvent(Object, const String&, const String&);
void SubscribeToEvent(const String&, const String&);
float Tan(float);
bool ToBool(const String&);
Color ToColor(const String&);
double ToDouble(const String&);
float ToFloat(const String&);
int ToInt(const String&, int = 10);
int64 ToInt64(const String&, int = 10);
IntRect ToIntRect(const String&);
IntVector2 ToIntVector2(const String&);
IntVector3 ToIntVector3(const String&);
uint ToLower(uint);
Matrix3 ToMatrix3(const String&);
Matrix3x4 ToMatrix3x4(const String&);
Matrix4 ToMatrix4(const String&);
Quaternion ToQuaternion(const String&);
Rect ToRect(const String&);
String ToStringHex(uint);
uint ToUInt(const String&, int = 10);
uint64 ToUInt64(const String&, int = 10);
uint ToUpper(uint);
Vector2 ToVector2(const String&);
Vector3 ToVector3(const String&);
Vector4 ToVector4(const String&, bool = false);
Variant ToVectorVariant(const String&);
void UnsubscribeFromAllEvents();
void UnsubscribeFromAllEventsExcept(Array<String>);
void UnsubscribeFromEvent(Object, const String&);
void UnsubscribeFromEvent(const String&);
void UnsubscribeFromEvents(Object);
const Variant& GetParameter(const VariantMap&, const String&, const Variant& = Variant :: EMPTY);
const Vector2& GetPixelUVOffset();
IntVector2 VectorAbs(const IntVector2&);
IntVector3 VectorAbs(const IntVector3&);
Vector2 VectorAbs(const Vector2&);
Vector3 VectorAbs(const Vector3&);
Vector2 VectorCeil(const Vector2&);
Vector3 VectorCeil(const Vector3&);
Vector4 VectorCeil(const Vector4&);
IntVector2 VectorCeilToInt(const Vector2&);
IntVector3 VectorCeilToInt(const Vector3&);
Vector2 VectorFloor(const Vector2&);
Vector3 VectorFloor(const Vector3&);
Vector4 VectorFloor(const Vector4&);
IntVector2 VectorFloorToInt(const Vector2&);
IntVector3 VectorFloorToInt(const Vector3&);
Vector2 VectorLerp(const Vector2&, const Vector2&, const Vector2&);
Vector3 VectorLerp(const Vector3&, const Vector3&, const Vector3&);
Vector4 VectorLerp(const Vector4&, const Vector4&, const Vector4&);
IntVector2 VectorMax(const IntVector2&, const IntVector2&);
IntVector3 VectorMax(const IntVector3&, const IntVector3&);
Vector2 VectorMax(const Vector2&, const Vector2&);
Vector3 VectorMax(const Vector3&, const Vector3&);
Vector4 VectorMax(const Vector4&, const Vector4&);
IntVector2 VectorMin(const IntVector2&, const IntVector2&);
IntVector3 VectorMin(const IntVector3&, const IntVector3&);
Vector2 VectorMin(const Vector2&, const Vector2&);
Vector3 VectorMin(const Vector3&, const Vector3&);
Vector4 VectorMin(const Vector4&, const Vector4&);
Vector2 VectorRound(const Vector2&);
Vector3 VectorRound(const Vector3&);
Vector4 VectorRound(const Vector4&);
IntVector2 VectorRoundToInt(const Vector2&);
IntVector3 VectorRoundToInt(const Vector3&);
bool WriteDrawablesToOBJ(Array<Drawable>, File, bool, bool, bool = false);
void WriteRaw(const String&, bool = false);

// Global properties
DBAPI DBAPI;
Audio audio;
ResourceCache cache;
Console console;
Database database;
DebugHud debugHud;
DebugRenderer debugRenderer;
Engine engine;
FileSystem fileSystem;
VariantMap globalVars;
Graphics graphics;
Input input;
Localization localization;
Log log;
Network network;
Node node;
Octree octree;
PhysicsWorld physicsWorld;
PhysicsWorld2D physicsWorld2D;
Renderer renderer;
ResourceCache resourceCache;
Scene scene;
Script script;
ScriptFile scriptFile;
ScriptInstance self;
Time time;
UI ui;

// Global constants
float ANIMATION_LOD_BASESCALE;
int BITS_PER_COMPONENT;
uint8 BONECOLLISION_BOX;
uint8 BONECOLLISION_NONE;
uint8 BONECOLLISION_SPHERE;
uint8 CHANNEL_NONE;
uint8 CHANNEL_POSITION;
uint8 CHANNEL_ROTATION;
uint8 CHANNEL_SCALE;
uint CLEAR_COLOR;
uint CLEAR_DEPTH;
uint CLEAR_STENCIL;
int COLOR_LUT_SIZE;
uint CONTROLLER_AXIS_LEFTX;
uint CONTROLLER_AXIS_LEFTY;
uint CONTROLLER_AXIS_RIGHTX;
uint CONTROLLER_AXIS_RIGHTY;
uint CONTROLLER_AXIS_TRIGGERLEFT;
uint CONTROLLER_AXIS_TRIGGERRIGHT;
uint CONTROLLER_BUTTON_A;
uint CONTROLLER_BUTTON_B;
uint CONTROLLER_BUTTON_BACK;
uint CONTROLLER_BUTTON_DPAD_DOWN;
uint CONTROLLER_BUTTON_DPAD_LEFT;
uint CONTROLLER_BUTTON_DPAD_RIGHT;
uint CONTROLLER_BUTTON_DPAD_UP;
uint CONTROLLER_BUTTON_GUIDE;
uint CONTROLLER_BUTTON_LEFTSHOULDER;
uint CONTROLLER_BUTTON_LEFTSTICK;
uint CONTROLLER_BUTTON_RIGHTSHOULDER;
uint CONTROLLER_BUTTON_RIGHTSTICK;
uint CONTROLLER_BUTTON_START;
uint CONTROLLER_BUTTON_X;
uint CONTROLLER_BUTTON_Y;
uint CONTROLS_CONTENT_ID;
int CONVERSION_BUFFER_LENGTH;
uint DD_DISABLED;
uint DD_SOURCE;
uint DD_SOURCE_AND_TARGET;
uint DD_TARGET;
uint DEBUGHUD_SHOW_ALL;
uint DEBUGHUD_SHOW_EVENTPROFILER;
uint DEBUGHUD_SHOW_MEMORY;
uint DEBUGHUD_SHOW_MODE;
uint DEBUGHUD_SHOW_NONE;
uint DEBUGHUD_SHOW_PROFILER;
uint DEBUGHUD_SHOW_STATS;
float DEFAULT_CAMERA_FOV;
float DEFAULT_FARCLIP;
float DEFAULT_FONT_SIZE;
int DEFAULT_FPS;
uint DEFAULT_LIGHTMASK;
float DEFAULT_MAX_NETWORK_ANGULAR_VELOCITY;
float DEFAULT_NEARCLIP;
uint DEFAULT_NUM_PARTICLES;
float DEFAULT_ORTHOSIZE;
uint8 DEFAULT_RENDER_ORDER;
uint DEFAULT_SHADOWMASK;
uint DEFAULT_VIEWMASK;
uint DEFAULT_ZONEMASK;
Vector3 DOT_SCALE;
uint DRAWABLE_ANY;
uint DRAWABLE_GEOMETRY;
uint DRAWABLE_GEOMETRY2D;
uint DRAWABLE_LIGHT;
uint DRAWABLE_UNDEFINED;
uint DRAWABLE_ZONE;
String EP_AUTOLOAD_PATHS;
String EP_BORDERLESS;
String EP_DUMP_SHADERS;
String EP_EVENT_PROFILER;
String EP_EXTERNAL_WINDOW;
String EP_FLUSH_GPU;
String EP_FORCE_GL2;
String EP_FRAME_LIMITER;
String EP_FULL_SCREEN;
String EP_HEADLESS;
String EP_HIGH_DPI;
String EP_LOG_LEVEL;
String EP_LOG_NAME;
String EP_LOG_QUIET;
String EP_LOW_QUALITY_SHADOWS;
String EP_MATERIAL_QUALITY;
String EP_MONITOR;
String EP_MULTI_SAMPLE;
String EP_ORIENTATIONS;
String EP_PACKAGE_CACHE_DIR;
String EP_REFRESH_RATE;
String EP_RENDER_PATH;
String EP_RESOURCE_PACKAGES;
String EP_RESOURCE_PATHS;
String EP_RESOURCE_PREFIX_PATHS;
String EP_SHADER_CACHE_DIR;
String EP_SHADOWS;
String EP_SOUND;
String EP_SOUND_BUFFER;
String EP_SOUND_INTERPOLATION;
String EP_SOUND_MIX_RATE;
String EP_SOUND_STEREO;
String EP_TEXTURE_ANISOTROPY;
String EP_TEXTURE_FILTER_MODE;
String EP_TEXTURE_QUALITY;
String EP_TIME_OUT;
String EP_TOUCH_EMULATION;
String EP_TRIPLE_BUFFER;
String EP_VSYNC;
String EP_WINDOW_HEIGHT;
String EP_WINDOW_ICON;
String EP_WINDOW_POSITION_X;
String EP_WINDOW_POSITION_Y;
String EP_WINDOW_RESIZABLE;
String EP_WINDOW_TITLE;
String EP_WINDOW_WIDTH;
String EP_WORKER_THREADS;
uint FIRST_LOCAL_ID;
uint FIRST_REPLICATED_ID;
uint FLIP_ALL;
uint FLIP_DIAGONAL;
uint FLIP_HORIZONTAL;
uint FLIP_RESERVED;
uint FLIP_VERTICAL;
int FONT_DPI;
int FONT_TEXTURE_MIN_SIZE;
uint HAT_CENTER;
uint HAT_DOWN;
uint HAT_LEFT;
uint HAT_RIGHT;
uint HAT_UP;
int INSTANCING_BUFFER_DEFAULT_SIZE;
uint KEY_0;
uint KEY_1;
uint KEY_2;
uint KEY_3;
uint KEY_4;
uint KEY_5;
uint KEY_6;
uint KEY_7;
uint KEY_8;
uint KEY_9;
uint KEY_A;
uint KEY_AC_BACK;
uint KEY_AC_BOOKMARKS;
uint KEY_AC_FORWARD;
uint KEY_AC_HOME;
uint KEY_AC_REFRESH;
uint KEY_AC_SEARCH;
uint KEY_AC_STOP;
uint KEY_AGAIN;
uint KEY_ALT;
uint KEY_ALTERASE;
uint KEY_AMPERSAND;
uint KEY_APPLICATION;
uint KEY_ASTERISK;
uint KEY_AT;
uint KEY_AUDIOMUTE;
uint KEY_AUDIONEXT;
uint KEY_AUDIOPLAY;
uint KEY_AUDIOPREV;
uint KEY_AUDIOSTOP;
uint KEY_B;
uint KEY_BACKQUOTE;
uint KEY_BACKSLASH;
uint KEY_BACKSPACE;
uint KEY_BRIGHTNESSDOWN;
uint KEY_BRIGHTNESSUP;
uint KEY_C;
uint KEY_CALCULATOR;
uint KEY_CANCEL;
uint KEY_CAPSLOCK;
uint KEY_CARET;
uint KEY_CLEAR;
uint KEY_CLEARAGAIN;
uint KEY_COLON;
uint KEY_COMMA;
uint KEY_COMPUTER;
uint KEY_COPY;
uint KEY_CRSEL;
uint KEY_CTRL;
uint KEY_CURRENCYSUBUNIT;
uint KEY_CURRENCYUNIT;
uint KEY_CUT;
uint KEY_D;
uint KEY_DECIMALSEPARATOR;
uint KEY_DELETE;
uint KEY_DISPLAYSWITCH;
uint KEY_DOLLAR;
uint KEY_DOWN;
uint KEY_E;
uint KEY_EJECT;
uint KEY_END;
uint KEY_EQUALS;
uint KEY_ESCAPE;
uint KEY_EXCLAIM;
uint KEY_EXSEL;
uint KEY_F;
uint KEY_F1;
uint KEY_F10;
uint KEY_F11;
uint KEY_F12;
uint KEY_F13;
uint KEY_F14;
uint KEY_F15;
uint KEY_F16;
uint KEY_F17;
uint KEY_F18;
uint KEY_F19;
uint KEY_F2;
uint KEY_F20;
uint KEY_F21;
uint KEY_F22;
uint KEY_F23;
uint KEY_F24;
uint KEY_F3;
uint KEY_F4;
uint KEY_F5;
uint KEY_F6;
uint KEY_F7;
uint KEY_F8;
uint KEY_F9;
uint KEY_FIND;
uint KEY_G;
uint KEY_GREATER;
uint KEY_GUI;
uint KEY_H;
uint KEY_HASH;
uint KEY_HELP;
uint KEY_HOME;
uint KEY_I;
uint KEY_INSERT;
uint KEY_J;
uint KEY_K;
uint KEY_KBDILLUMDOWN;
uint KEY_KBDILLUMTOGGLE;
uint KEY_KBDILLUMUP;
uint KEY_KP_0;
uint KEY_KP_00;
uint KEY_KP_000;
uint KEY_KP_1;
uint KEY_KP_2;
uint KEY_KP_3;
uint KEY_KP_4;
uint KEY_KP_5;
uint KEY_KP_6;
uint KEY_KP_7;
uint KEY_KP_8;
uint KEY_KP_9;
uint KEY_KP_A;
uint KEY_KP_AMPERSAND;
uint KEY_KP_AT;
uint KEY_KP_B;
uint KEY_KP_BACKSPACE;
uint KEY_KP_BINARY;
uint KEY_KP_C;
uint KEY_KP_CLEAR;
uint KEY_KP_CLEARENTRY;
uint KEY_KP_COLON;
uint KEY_KP_COMMA;
uint KEY_KP_D;
uint KEY_KP_DBLAMPERSAND;
uint KEY_KP_DBLVERTICALBAR;
uint KEY_KP_DECIMAL;
uint KEY_KP_DIVIDE;
uint KEY_KP_E;
uint KEY_KP_ENTER;
uint KEY_KP_EQUALS;
uint KEY_KP_EQUALSAS400;
uint KEY_KP_EXCLAM;
uint KEY_KP_F;
uint KEY_KP_GREATER;
uint KEY_KP_HASH;
uint KEY_KP_HEXADECIMAL;
uint KEY_KP_LEFTBRACE;
uint KEY_KP_LEFTPAREN;
uint KEY_KP_LESS;
uint KEY_KP_MEMADD;
uint KEY_KP_MEMCLEAR;
uint KEY_KP_MEMDIVIDE;
uint KEY_KP_MEMMULTIPLY;
uint KEY_KP_MEMRECALL;
uint KEY_KP_MEMSTORE;
uint KEY_KP_MEMSUBTRACT;
uint KEY_KP_MINUS;
uint KEY_KP_MULTIPLY;
uint KEY_KP_OCTAL;
uint KEY_KP_PERCENT;
uint KEY_KP_PERIOD;
uint KEY_KP_PLUS;
uint KEY_KP_PLUSMINUS;
uint KEY_KP_POWER;
uint KEY_KP_RIGHTBRACE;
uint KEY_KP_RIGHTPAREN;
uint KEY_KP_SPACE;
uint KEY_KP_TAB;
uint KEY_KP_VERTICALBAR;
uint KEY_KP_XOR;
uint KEY_L;
uint KEY_LALT;
uint KEY_LCTRL;
uint KEY_LEFT;
uint KEY_LEFTBRACKET;
uint KEY_LEFTPAREN;
uint KEY_LESS;
uint KEY_LGUI;
uint KEY_LSHIFT;
uint KEY_M;
uint KEY_MAIL;
uint KEY_MEDIASELECT;
uint KEY_MENU;
uint KEY_MINUS;
uint KEY_MODE;
uint KEY_MUTE;
uint KEY_N;
uint KEY_NUMLOCKCLEAR;
uint KEY_O;
uint KEY_OPER;
uint KEY_OUT;
uint KEY_P;
uint KEY_PAGEDOWN;
uint KEY_PAGEUP;
uint KEY_PASTE;
uint KEY_PAUSE;
uint KEY_PERCENT;
uint KEY_PERIOD;
uint KEY_PLUS;
uint KEY_POWER;
uint KEY_PRINTSCREEN;
uint KEY_PRIOR;
uint KEY_Q;
uint KEY_QUESTION;
uint KEY_QUOTE;
uint KEY_QUOTEDBL;
uint KEY_R;
uint KEY_RALT;
uint KEY_RCTRL;
uint KEY_RETURN;
uint KEY_RETURN2;
uint KEY_RGUI;
uint KEY_RIGHT;
uint KEY_RIGHTBRACKET;
uint KEY_RIGHTPAREN;
uint KEY_RSHIFT;
uint KEY_S;
uint KEY_SCROLLLOCK;
uint KEY_SELECT;
uint KEY_SEMICOLON;
uint KEY_SEPARATOR;
uint KEY_SHIFT;
uint KEY_SLASH;
uint KEY_SLEEP;
uint KEY_SPACE;
uint KEY_STOP;
uint KEY_SYSREQ;
uint KEY_T;
uint KEY_TAB;
uint KEY_THOUSANDSSEPARATOR;
uint KEY_U;
uint KEY_UNDERSCORE;
uint KEY_UNDO;
uint KEY_UNKNOWN;
uint KEY_UP;
uint KEY_V;
uint KEY_VOLUMEDOWN;
uint KEY_VOLUMEUP;
uint KEY_W;
uint KEY_WWW;
uint KEY_X;
uint KEY_Y;
uint KEY_Z;
uint LAST_LOCAL_ID;
uint LAST_REPLICATED_ID;
int LOG_DEBUG;
int LOG_ERROR;
int LOG_INFO;
int LOG_NONE;
int LOG_RAW;
int LOG_TRACE;
int LOG_WARNING;
uint MASK_BLENDINDICES;
uint MASK_BLENDWEIGHTS;
uint MASK_COLOR;
uint MASK_CUBETEXCOORD1;
uint MASK_CUBETEXCOORD2;
uint MASK_INSTANCEMATRIX1;
uint MASK_INSTANCEMATRIX2;
uint MASK_INSTANCEMATRIX3;
uint MASK_NONE;
uint MASK_NORMAL;
uint MASK_OBJECTINDEX;
uint MASK_POSITION;
uint MASK_TANGENT;
uint MASK_TEXCOORD1;
uint MASK_TEXCOORD2;
int MATRIX_CONVERSION_BUFFER_LENGTH;
uint MAX_CASCADE_SPLITS;
int MAX_CONSTANT_REGISTERS;
int MAX_LIGHT_SPLITS;
uint MAX_NETWORK_ATTRIBUTES;
int MAX_RENDERTARGETS;
int MAX_TEXTURE_QUALITY_LEVELS;
int MAX_VERTEX_LIGHTS;
int MAX_VERTEX_STREAMS;
uint MAX_VIEWPORT_TEXTURES;
uint MOUSEB_ANY;
uint MOUSEB_LEFT;
uint MOUSEB_MIDDLE;
uint MOUSEB_NONE;
uint MOUSEB_RIGHT;
uint MOUSEB_X1;
uint MOUSEB_X2;
IntVector2 MOUSE_POSITION_OFFSCREEN;
int MSG_COMPONENTDELTAUPDATE;
int MSG_COMPONENTLATESTDATA;
int MSG_CONTROLS;
int MSG_CREATECOMPONENT;
int MSG_CREATENODE;
int MSG_IDENTITY;
int MSG_LOADSCENE;
int MSG_NODEDELTAUPDATE;
int MSG_NODELATESTDATA;
int MSG_PACKAGEDATA;
int MSG_PACKAGEINFO;
int MSG_PACKED_MESSAGE;
int MSG_REMOTEEVENT;
int MSG_REMOTENODEEVENT;
int MSG_REMOVECOMPONENT;
int MSG_REMOVENODE;
int MSG_REQUESTPACKAGE;
int MSG_SCENECHECKSUMERROR;
int MSG_SCENELOADED;
int MSG_USER;
float M_DEGTORAD;
float M_DEGTORAD_2;
float M_EPSILON;
float M_HALF_PI;
float M_INFINITY;
float M_LARGE_EPSILON;
float M_LARGE_VALUE;
float M_MAX_FOV;
int M_MAX_INT;
uint M_MAX_UNSIGNED;
int M_MIN_INT;
float M_MIN_NEARCLIP;
uint M_MIN_UNSIGNED;
float M_PI;
float M_RADTODEG;
uint NUM_FRUSTUM_PLANES;
uint NUM_FRUSTUM_VERTICES;
int NUM_OCTANTS;
int OCCLUSION_DEFAULT_MAX_TRIANGLES;
int OCCLUSION_FIXED_BIAS;
int OCCLUSION_MIN_SIZE;
float OCCLUSION_RELATIVE_BIAS;
float OCCLUSION_X_SCALE;
float OCCLUSION_Z_SCALE;
uint PACKAGE_FRAGMENT_SIZE;
float PIXEL_SIZE;
uint PRIORITY_LAST;
StringHash PSP_AMBIENTCOLOR;
StringHash PSP_CAMERAPOS;
StringHash PSP_DELTATIME;
StringHash PSP_DEPTHRECONSTRUCT;
StringHash PSP_ELAPSEDTIME;
StringHash PSP_FARCLIP;
StringHash PSP_FOGCOLOR;
StringHash PSP_FOGPARAMS;
StringHash PSP_GBUFFERINVSIZE;
StringHash PSP_LIGHTCOLOR;
StringHash PSP_LIGHTDIR;
StringHash PSP_LIGHTLENGTH;
StringHash PSP_LIGHTMATRICES;
StringHash PSP_LIGHTPOS;
StringHash PSP_LIGHTRAD;
StringHash PSP_MATDIFFCOLOR;
StringHash PSP_MATEMISSIVECOLOR;
StringHash PSP_MATENVMAPCOLOR;
StringHash PSP_MATSPECCOLOR;
StringHash PSP_METALLIC;
StringHash PSP_NEARCLIP;
StringHash PSP_NORMALOFFSETSCALE;
StringHash PSP_ROUGHNESS;
StringHash PSP_SHADOWCUBEADJUST;
StringHash PSP_SHADOWDEPTHFADE;
StringHash PSP_SHADOWINTENSITY;
StringHash PSP_SHADOWMAPINVSIZE;
StringHash PSP_SHADOWSPLITS;
StringHash PSP_VSMSHADOWPARAMS;
StringHash PSP_ZONEMAX;
StringHash PSP_ZONEMIN;
uint QUALITY_HIGH;
uint QUALITY_LOW;
uint QUALITY_MAX;
uint QUALITY_MEDIUM;
uint QUAL_ALT;
uint QUAL_ANY;
uint QUAL_CTRL;
uint QUAL_NONE;
uint QUAL_SHIFT;
int QUICKSORT_THRESHOLD;
uint ROOT_INDEX;
uint SCANCODE_0;
uint SCANCODE_1;
uint SCANCODE_2;
uint SCANCODE_3;
uint SCANCODE_4;
uint SCANCODE_5;
uint SCANCODE_6;
uint SCANCODE_7;
uint SCANCODE_8;
uint SCANCODE_9;
uint SCANCODE_A;
uint SCANCODE_AC_BACK;
uint SCANCODE_AC_BOOKMARKS;
uint SCANCODE_AC_FORWARD;
uint SCANCODE_AC_HOME;
uint SCANCODE_AC_REFRESH;
uint SCANCODE_AC_SEARCH;
uint SCANCODE_AC_STOP;
uint SCANCODE_AGAIN;
uint SCANCODE_ALT;
uint SCANCODE_ALTERASE;
uint SCANCODE_APOSTROPHE;
uint SCANCODE_APP1;
uint SCANCODE_APP2;
uint SCANCODE_APPLICATION;
uint SCANCODE_AUDIOMUTE;
uint SCANCODE_AUDIONEXT;
uint SCANCODE_AUDIOPLAY;
uint SCANCODE_AUDIOPREV;
uint SCANCODE_AUDIOSTOP;
uint SCANCODE_B;
uint SCANCODE_BACKSLASH;
uint SCANCODE_BACKSPACE;
uint SCANCODE_BRIGHTNESSDOWN;
uint SCANCODE_BRIGHTNESSUP;
uint SCANCODE_C;
uint SCANCODE_CALCULATOR;
uint SCANCODE_CANCEL;
uint SCANCODE_CAPSLOCK;
uint SCANCODE_CLEAR;
uint SCANCODE_CLEARAGAIN;
uint SCANCODE_COMMA;
uint SCANCODE_COMPUTER;
uint SCANCODE_COPY;
uint SCANCODE_CRSEL;
uint SCANCODE_CTRL;
uint SCANCODE_CURRENCYSUBUNIT;
uint SCANCODE_CURRENCYUNIT;
uint SCANCODE_CUT;
uint SCANCODE_D;
uint SCANCODE_DECIMALSEPARATOR;
uint SCANCODE_DELETE;
uint SCANCODE_DISPLAYSWITCH;
uint SCANCODE_DOWN;
uint SCANCODE_E;
uint SCANCODE_EJECT;
uint SCANCODE_END;
uint SCANCODE_EQUALS;
uint SCANCODE_ESCAPE;
uint SCANCODE_EXECUTE;
uint SCANCODE_EXSEL;
uint SCANCODE_F;
uint SCANCODE_F1;
uint SCANCODE_F10;
uint SCANCODE_F11;
uint SCANCODE_F12;
uint SCANCODE_F13;
uint SCANCODE_F14;
uint SCANCODE_F15;
uint SCANCODE_F16;
uint SCANCODE_F17;
uint SCANCODE_F18;
uint SCANCODE_F19;
uint SCANCODE_F2;
uint SCANCODE_F20;
uint SCANCODE_F21;
uint SCANCODE_F22;
uint SCANCODE_F23;
uint SCANCODE_F24;
uint SCANCODE_F3;
uint SCANCODE_F4;
uint SCANCODE_F5;
uint SCANCODE_F6;
uint SCANCODE_F7;
uint SCANCODE_F8;
uint SCANCODE_F9;
uint SCANCODE_FIND;
uint SCANCODE_G;
uint SCANCODE_GRAVE;
uint SCANCODE_GUI;
uint SCANCODE_H;
uint SCANCODE_HELP;
uint SCANCODE_HOME;
uint SCANCODE_I;
uint SCANCODE_INSERT;
uint SCANCODE_INTERNATIONAL1;
uint SCANCODE_INTERNATIONAL2;
uint SCANCODE_INTERNATIONAL3;
uint SCANCODE_INTERNATIONAL4;
uint SCANCODE_INTERNATIONAL5;
uint SCANCODE_INTERNATIONAL6;
uint SCANCODE_INTERNATIONAL7;
uint SCANCODE_INTERNATIONAL8;
uint SCANCODE_INTERNATIONAL9;
uint SCANCODE_J;
uint SCANCODE_K;
uint SCANCODE_KBDILLUMDOWN;
uint SCANCODE_KBDILLUMTOGGLE;
uint SCANCODE_KBDILLUMUP;
uint SCANCODE_KP_0;
uint SCANCODE_KP_00;
uint SCANCODE_KP_000;
uint SCANCODE_KP_1;
uint SCANCODE_KP_2;
uint SCANCODE_KP_3;
uint SCANCODE_KP_4;
uint SCANCODE_KP_5;
uint SCANCODE_KP_6;
uint SCANCODE_KP_7;
uint SCANCODE_KP_8;
uint SCANCODE_KP_9;
uint SCANCODE_KP_A;
uint SCANCODE_KP_AMPERSAND;
uint SCANCODE_KP_AT;
uint SCANCODE_KP_B;
uint SCANCODE_KP_BACKSPACE;
uint SCANCODE_KP_BINARY;
uint SCANCODE_KP_C;
uint SCANCODE_KP_CLEAR;
uint SCANCODE_KP_CLEARENTRY;
uint SCANCODE_KP_COLON;
uint SCANCODE_KP_COMMA;
uint SCANCODE_KP_D;
uint SCANCODE_KP_DBLAMPERSAND;
uint SCANCODE_KP_DBLVERTICALBAR;
uint SCANCODE_KP_DECIMAL;
uint SCANCODE_KP_DIVIDE;
uint SCANCODE_KP_E;
uint SCANCODE_KP_ENTER;
uint SCANCODE_KP_EQUALS;
uint SCANCODE_KP_EQUALSAS400;
uint SCANCODE_KP_EXCLAM;
uint SCANCODE_KP_F;
uint SCANCODE_KP_GREATER;
uint SCANCODE_KP_HASH;
uint SCANCODE_KP_HEXADECIMAL;
uint SCANCODE_KP_LEFTBRACE;
uint SCANCODE_KP_LEFTPAREN;
uint SCANCODE_KP_LESS;
uint SCANCODE_KP_MEMADD;
uint SCANCODE_KP_MEMCLEAR;
uint SCANCODE_KP_MEMDIVIDE;
uint SCANCODE_KP_MEMMULTIPLY;
uint SCANCODE_KP_MEMRECALL;
uint SCANCODE_KP_MEMSTORE;
uint SCANCODE_KP_MEMSUBTRACT;
uint SCANCODE_KP_MINUS;
uint SCANCODE_KP_MULTIPLY;
uint SCANCODE_KP_OCTAL;
uint SCANCODE_KP_PERCENT;
uint SCANCODE_KP_PERIOD;
uint SCANCODE_KP_PLUS;
uint SCANCODE_KP_PLUSMINUS;
uint SCANCODE_KP_POWER;
uint SCANCODE_KP_RIGHTBRACE;
uint SCANCODE_KP_RIGHTPAREN;
uint SCANCODE_KP_SPACE;
uint SCANCODE_KP_TAB;
uint SCANCODE_KP_VERTICALBAR;
uint SCANCODE_KP_XOR;
uint SCANCODE_L;
uint SCANCODE_LALT;
uint SCANCODE_LANG1;
uint SCANCODE_LANG2;
uint SCANCODE_LANG3;
uint SCANCODE_LANG4;
uint SCANCODE_LANG5;
uint SCANCODE_LANG6;
uint SCANCODE_LANG7;
uint SCANCODE_LANG8;
uint SCANCODE_LANG9;
uint SCANCODE_LCTRL;
uint SCANCODE_LEFT;
uint SCANCODE_LEFTBRACKET;
uint SCANCODE_LGUI;
uint SCANCODE_LSHIFT;
uint SCANCODE_M;
uint SCANCODE_MAIL;
uint SCANCODE_MEDIASELECT;
uint SCANCODE_MENU;
uint SCANCODE_MINUS;
uint SCANCODE_MODE;
uint SCANCODE_MUTE;
uint SCANCODE_N;
uint SCANCODE_NONUSBACKSLASH;
uint SCANCODE_NONUSHASH;
uint SCANCODE_NUMLOCKCLEAR;
uint SCANCODE_O;
uint SCANCODE_OPER;
uint SCANCODE_OUT;
uint SCANCODE_P;
uint SCANCODE_PAGEDOWN;
uint SCANCODE_PAGEUP;
uint SCANCODE_PASTE;
uint SCANCODE_PAUSE;
uint SCANCODE_PERIOD;
uint SCANCODE_POWER;
uint SCANCODE_PRINTSCREEN;
uint SCANCODE_PRIOR;
uint SCANCODE_Q;
uint SCANCODE_R;
uint SCANCODE_RALT;
uint SCANCODE_RCTRL;
uint SCANCODE_RETURN;
uint SCANCODE_RETURN2;
uint SCANCODE_RGUI;
uint SCANCODE_RIGHT;
uint SCANCODE_RIGHTBRACKET;
uint SCANCODE_RSHIFT;
uint SCANCODE_S;
uint SCANCODE_SCROLLLOCK;
uint SCANCODE_SELECT;
uint SCANCODE_SEMICOLON;
uint SCANCODE_SEPARATOR;
uint SCANCODE_SHIFT;
uint SCANCODE_SLASH;
uint SCANCODE_SLEEP;
uint SCANCODE_SPACE;
uint SCANCODE_STOP;
uint SCANCODE_SYSREQ;
uint SCANCODE_T;
uint SCANCODE_TAB;
uint SCANCODE_THOUSANDSSEPARATOR;
uint SCANCODE_U;
uint SCANCODE_UNDO;
uint SCANCODE_UNKNOWN;
uint SCANCODE_UP;
uint SCANCODE_V;
uint SCANCODE_VOLUMEDOWN;
uint SCANCODE_VOLUMEUP;
uint SCANCODE_W;
uint SCANCODE_WWW;
uint SCANCODE_X;
uint SCANCODE_Y;
uint SCANCODE_Z;
uint SCAN_DIRS;
uint SCAN_FILES;
uint SCAN_HIDDEN;
int SHADOW_MIN_PIXELS;
float SHADOW_MIN_QUANTIZE;
float SHADOW_MIN_VIEW;
uint SMOOTH_NONE;
uint SMOOTH_POSITION;
uint SMOOTH_ROTATION;
String SOUND_AMBIENT;
String SOUND_EFFECT;
String SOUND_MASTER;
String SOUND_MUSIC;
String SOUND_VOICE;
int STREAM_BUFFER_LENGTH;
uint UI_VERTEX_SIZE;
uint USE_FIXEDPOSTUPDATE;
uint USE_FIXEDUPDATE;
uint USE_NO_EVENT;
uint USE_POSTUPDATE;
uint USE_UPDATE;
uint VARIANT_VALUE_SIZE;
uint VO_DISABLE_OCCLUSION;
uint VO_DISABLE_SHADOWS;
uint VO_LOW_MATERIAL_QUALITY;
uint VO_NONE;
StringHash VSP_AMBIENTENDCOLOR;
StringHash VSP_AMBIENTSTARTCOLOR;
StringHash VSP_BILLBOARDROT;
StringHash VSP_CAMERAPOS;
StringHash VSP_CLIPPLANE;
StringHash VSP_DELTATIME;
StringHash VSP_DEPTHMODE;
StringHash VSP_ELAPSEDTIME;
StringHash VSP_FARCLIP;
StringHash VSP_FRUSTUMSIZE;
StringHash VSP_GBUFFEROFFSETS;
StringHash VSP_LIGHTDIR;
StringHash VSP_LIGHTMATRICES;
StringHash VSP_LIGHTPOS;
StringHash VSP_MODEL;
StringHash VSP_NEARCLIP;
StringHash VSP_NORMALOFFSETSCALE;
StringHash VSP_SKINMATRICES;
StringHash VSP_UOFFSET;
StringHash VSP_VERTEXLIGHTS;
StringHash VSP_VIEW;
StringHash VSP_VIEWINV;
StringHash VSP_VIEWPROJ;
StringHash VSP_VOFFSET;
StringHash VSP_ZONE;
